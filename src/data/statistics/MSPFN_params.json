{
    "model/MSPFN.py": {
        "tensorflow": {
            "get_collection_203": {
                "variable": {
                    "value": "self.variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_210": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.get_shape()",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "prelu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_211": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input, channel, 3, padding='same', activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(f, channel, 3, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.get_shape()",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_212": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input, channel, 3, padding='same', activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(f, channel, 3, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "prelu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_214": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.get_shape()",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_215": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input, channel, 3, padding='same', activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(f, channel, 3, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_216": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_225": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([K, K, 3, 3])",
                            "Call"
                        ],
                        [
                            "np.zeros([K, K, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_226": {
                "variable": {
                    "value": "downscaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[8.0, 0.0, 0.0], [0.0, 8.0, 0.0], [0.0, 0.0, 8.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]]])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant([[-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0], [-2.0, -2.0, -2.0], [0, 0, 0], [2.0, 2.0, 2.0], [-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0]], shape=[3, 3, 3, 1]))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, K, K, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_235": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([K, K, 3, 3])",
                            "Call"
                        ],
                        [
                            "np.zeros([K, K, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_236": {
                "variable": {
                    "value": "downscaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[8.0, 0.0, 0.0], [0.0, 8.0, 0.0], [0.0, 0.0, 8.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]]])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant([[-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0], [-2.0, -2.0, -2.0], [0, 0, 0], [2.0, 2.0, 2.0], [-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0]], shape=[3, 3, 3, 1]))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, K, K, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_241": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[8.0, 0.0, 0.0], [0.0, 8.0, 0.0], [0.0, 0.0, 8.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_246": {
                "variable": {
                    "value": "frame",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[8.0, 0.0, 0.0], [0.0, 8.0, 0.0], [0.0, 0.0, 8.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]]])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant([[-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0], [-2.0, -2.0, -2.0], [0, 0, 0], [2.0, 2.0, 2.0], [-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0]], shape=[3, 3, 3, 1]))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_250": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant([[-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0], [-2.0, -2.0, -2.0], [0, 0, 0], [2.0, 2.0, 2.0], [-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0]], shape=[3, 3, 3, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_254": {
                "variable": {
                    "value": "frame",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[8.0, 0.0, 0.0], [0.0, 8.0, 0.0], [0.0, 0.0, 8.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]]])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant([[-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0], [-2.0, -2.0, -2.0], [0, 0, 0], [2.0, 2.0, 2.0], [-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0]], shape=[3, 3, 3, 1]))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "res_mem_con",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[res_in, res42_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_260": {
                "variable": {
                    "value": "content_base_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt((frame_hr - frame_sr) ** 2 + 0.001 ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_250": {
                "value": {
                    "value": "[[-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0], [-2.0, -2.0, -2.0], [0, 0, 0], [2.0, 2.0, 2.0], [-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_261": {
                "input_tensor": {
                    "value": "content_base_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.sqrt((frame_hr - frame_sr) ** 2 + 0.001 ** 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "LSTM",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "LSTM2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "LSTM4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "rnn1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "rnn2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "rnn4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "residual_memory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "rnn_recon4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_177": {
                "name_or_scope": {
                    "value": "rnn_recon2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "rnn_recon",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_187": {
                "name_or_scope": {
                    "value": "up4_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "up2_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "rnn5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "rnn7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_260": {
                "x": {
                    "value": "(frame_hr - frame_sr) ** 2 + 0.001 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "rain4_res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "lstm_group4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "rain4_res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "upRMM4_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "rain2_res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "lstm_group2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "rain2_res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "upRMM4_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "upRMM2_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "rain_res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "lstm_group",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "rain_res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "'URAB4_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "'URAB2_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "'URAB_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_175": {
                "values": {
                    "value": "[res4_in, res4_lstmout]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_179": {
                "values": {
                    "value": "[res2_in, res2_lstmout]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_183": {
                "values": {
                    "value": "[res_in, res_lstmout]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_193": {
                "values": {
                    "value": "[res4_2, res2_in]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "'down4_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "'up_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "'upURAB4_2_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "'down2_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "'up_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "'upURAB4to1_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "'upURAB2to1_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "'down_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "'up_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "'group_{}_RCAB{}'.format(n + 1, m + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_122": {
                "values": {
                    "value": "[res_short, res_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "'group_{}_RCAB{}'.format(n + 1, m + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_143": {
                "values": {
                    "value": "[res_short, res_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "'group_{}_RCAB{}'.format(n + 1, m + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_168": {
                "values": {
                    "value": "[res_short, res_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/TEST_MSPFN.py": {
        "tensorflow": {
            "get_collection_201": {
                "variable": {
                    "value": "self.g_variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_207": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.get_shape()",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "prelu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_208": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input, channel, 3, padding='same', activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(f, channel, 3, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.get_shape()",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_209": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input, channel, 3, padding='same', activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(f, channel, 3, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_210": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "prelu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_211": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.get_shape()",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_212": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input, channel, 3, padding='same', activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(f, channel, 3, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_222": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([K, K, 3, 3])",
                            "Call"
                        ],
                        [
                            "np.zeros([K, K, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_223": {
                "variable": {
                    "value": "downscaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, K, K, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_232": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([K, K, 3, 3])",
                            "Call"
                        ],
                        [
                            "np.zeros([K, K, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_233": {
                "variable": {
                    "value": "downscaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, K, K, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_193": {
                "variable": {
                    "value": "res_mem_con",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[res_in, res42_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "LSTM",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "LSTM2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "LSTM4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "rnn1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "rnn2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "rnn4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "residual_memory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "rnn_recon4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "rnn_recon2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "rnn_recon",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_185": {
                "name_or_scope": {
                    "value": "up4_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "up2_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "rnn5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "rnn7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "rain4_res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "lstm_group4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "rain4_res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "upRMM4_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "rain2_res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "lstm_group2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "rain2_res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "upRMM4_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "upRMM2_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "rain_res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "lstm_group",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "rain_res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "'URAB4_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "'URAB2_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "'URAB_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_173": {
                "values": {
                    "value": "[res4_in, res4_lstmout]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_177": {
                "values": {
                    "value": "[res2_in, res2_lstmout]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_181": {
                "values": {
                    "value": "[res_in, res_lstmout]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_191": {
                "values": {
                    "value": "[res4_2, res2_in]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "'down4_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "'up_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "'upURAB4_2_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "'down2_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "'up_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "'upURAB4to1_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "'upURAB2to1_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "'down_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "'up_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "'group_{}_RCAB{}'.format(n + 1, m + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_120": {
                "values": {
                    "value": "[res_short, res_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "'group_{}_RCAB{}'.format(n + 1, m + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_141": {
                "values": {
                    "value": "[res_short, res_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "'group_{}_RCAB{}'.format(n + 1, m + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_166": {
                "values": {
                    "value": "[res_short, res_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/TEST_MSPFN_M17N1.py": {
        "tensorflow": {
            "get_collection_203": {
                "variable": {
                    "value": "self.g_variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_210": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.get_shape()",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "prelu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_211": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input, channel, 3, padding='same', activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(f, channel, 3, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.get_shape()",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_212": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input, channel, 3, padding='same', activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(f, channel, 3, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "prelu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_214": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.get_shape()",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_215": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input, channel, 3, padding='same', activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(f, channel, 3, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_216": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_225": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([K, K, 3, 3])",
                            "Call"
                        ],
                        [
                            "np.zeros([K, K, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_226": {
                "variable": {
                    "value": "downscaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[8.0, 0.0, 0.0], [0.0, 8.0, 0.0], [0.0, 0.0, 8.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]]])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant([[-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0], [-2.0, -2.0, -2.0], [0, 0, 0], [2.0, 2.0, 2.0], [-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0]], shape=[3, 3, 3, 1]))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, K, K, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_235": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([K, K, 3, 3])",
                            "Call"
                        ],
                        [
                            "np.zeros([K, K, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_236": {
                "variable": {
                    "value": "downscaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[8.0, 0.0, 0.0], [0.0, 8.0, 0.0], [0.0, 0.0, 8.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]]])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant([[-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0], [-2.0, -2.0, -2.0], [0, 0, 0], [2.0, 2.0, 2.0], [-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0]], shape=[3, 3, 3, 1]))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, K, K, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_241": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[8.0, 0.0, 0.0], [0.0, 8.0, 0.0], [0.0, 0.0, 8.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_246": {
                "variable": {
                    "value": "frame",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[8.0, 0.0, 0.0], [0.0, 8.0, 0.0], [0.0, 0.0, 8.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]]])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant([[-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0], [-2.0, -2.0, -2.0], [0, 0, 0], [2.0, 2.0, 2.0], [-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0]], shape=[3, 3, 3, 1]))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_255": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant([[-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0], [-2.0, -2.0, -2.0], [0, 0, 0], [2.0, 2.0, 2.0], [-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0]], shape=[3, 3, 3, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_259": {
                "variable": {
                    "value": "frame",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(f, axis=(1, 2), keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel // reduction, 1, activation=prelu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, channel, 1, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.multiply(f, x)",
                            "Call"
                        ],
                        [
                            "tf.add(input, x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(arr, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant([[[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[8.0, 0.0, 0.0], [0.0, 8.0, 0.0], [0.0, 0.0, 8.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]], [[[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]], [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]]]])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant([[-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0], [-2.0, -2.0, -2.0], [0, 0, 0], [2.0, 2.0, 2.0], [-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0]], shape=[3, 3, 3, 1]))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "res_mem_con",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[res_in, res42_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_255": {
                "value": {
                    "value": "[[-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0], [-2.0, -2.0, -2.0], [0, 0, 0], [2.0, 2.0, 2.0], [-1.0, -1.0, -1.0], [0, 0, 0], [1.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "LSTM",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "LSTM2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "LSTM4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "rnn1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "rnn2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "rnn4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "residual_memory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "rnn_recon4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_177": {
                "name_or_scope": {
                    "value": "rnn_recon2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "rnn_recon",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_187": {
                "name_or_scope": {
                    "value": "up4_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "up2_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "rnn5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "rnn7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "rain4_res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "lstm_group4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "rain4_res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "upRMM4_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "rain2_res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "lstm_group2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "rain2_res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "upRMM4_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "upRMM2_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "rain_res1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "lstm_group",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "rain_res2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "'BCM4_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "'BCM2_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "'BCM_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_175": {
                "values": {
                    "value": "[res4_in, res4_lstmout]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_179": {
                "values": {
                    "value": "[res2_in, res2_lstmout]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_183": {
                "values": {
                    "value": "[res_in, res_lstmout]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_193": {
                "values": {
                    "value": "[res4_2, res2_in]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "'down4_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "'up_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "'upBCM4_2_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "'down2_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "'up_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "'upBCM4to1_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "'upBCM2to1_{}'.format(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "'down_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "'up_{}'.format(n + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "'group_{}_RCAB{}'.format(n + 1, m + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_122": {
                "values": {
                    "value": "[res_short, res_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "'group_{}_RCAB{}'.format(n + 1, m + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_143": {
                "values": {
                    "value": "[res_short, res_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "'group_{}_RCAB{}'.format(n + 1, m + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_168": {
                "values": {
                    "value": "[res_short, res_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/image_crop.py": {
        "tensorflow": {
            "py_func_46": {
                "func": {
                    "value": "crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[image, scale]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/ps.py": {
        "tensorflow": {
            "split_9": {
                "variable": {
                    "value": "Xs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_11": {
                "variable": {
                    "value": "Xr",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "Xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(X, r, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_12": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Xr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(Xs, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bsize, r * a, r * b, n_out_channel)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_7": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/spp_layer.py": {
        "tensorflow": {
            "py_func_66": {
                "func": {
                    "value": "np_spatial_pyramid_pooling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_spatial_pyramid_pooling",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[tf_input_feature_maps, tf_spatial_pyramid]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/test/test_MSPFN.py": {
        "tensorflow": {
            "placeholder_16": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "x_rain",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, W, H, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_42": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_43": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_45": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_47": {
                "variable": {
                    "value": "vars_all",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "x_rain",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, W, H, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_71": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_72": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_74": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/train_MSPFN.py": {
        "tensorflow": {
            "placeholder_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 96, 96, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "x_rain",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 96, 96, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_24": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_27": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "tf.train.exponential_decay(start_learning_rate, global_step, 20000, decay_rate=0.8, staircase=False) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_29": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_26": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_33": {
                "checkpoint_dir": {
                    "value": "MSPFN/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_34": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_56": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "MSPFN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_27": {
                "learning_rate": {
                    "value": "start_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "float"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "20000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/BasicConvLSTMCell.py": {
        "tensorflow": {
            "zeros_38": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, shape[0], shape[1], num_features * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_91": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_conv_linear([inputs, h], self.filter_size, self.num_features * 4, True)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "scope or type(self).__name__",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "split_87": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_100": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_c, new_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_95": {
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(concat, 4, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_132": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_137": {
                "values": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_93": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(concat, 4, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_133": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a.dtype for a in args][0]",
                            "Subscript"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/closed_form_matting.py": {
        "tensorflow": {
            "SparseTensor_58": {
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mat([coo.row, coo.col]).transpose()",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "coo.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "coo.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/layer.py": {
        "tensorflow": {
            "get_variable_63": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "x.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "filter_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_shape",
                            "Method Argument"
                        ],
                        [
                            "filter_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_87": {
                "variable": {
                    "value": "filter_",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_shape",
                            "Method Argument"
                        ],
                        [
                            "filter_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_118": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_124": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_149": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_155": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_161": {
                "variable": {
                    "value": "pop_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pop_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_167": {
                "variable": {
                    "value": "pop_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pop_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_187": {
                "variable": {
                    "value": "transposed",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 3, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_217": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "n_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_split",
                            "Method Argument"
                        ],
                        [
                            "n_split",
                            "Method Argument"
                        ],
                        [
                            "n_split",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_231": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "n_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_split",
                            "Method Argument"
                        ],
                        [
                            "n_split",
                            "Method Argument"
                        ],
                        [
                            "n_split",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_281": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a, b - OFF, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_282": {
                "variable": {
                    "value": "img11",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a, OFF, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_283": {
                "variable": {
                    "value": "image1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[img1, img11]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_285": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a - OFF, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_286": {
                "variable": {
                    "value": "img22",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, OFF, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_287": {
                "variable": {
                    "value": "image2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[img2, img22]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_289": {
                "variable": {
                    "value": "img3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, OFF, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a, b - OFF, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_290": {
                "variable": {
                    "value": "img33",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, b - OFF, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a, OFF, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_291": {
                "variable": {
                    "value": "image3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[img3, img33]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_292": {
                "variable": {
                    "value": "img4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, OFF, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a - OFF, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_293": {
                "variable": {
                    "value": "img44",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, a - OFF, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, OFF, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_294": {
                "variable": {
                    "value": "image4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[img4, img44]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_340": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image1, image2, image3, image4, image5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_351": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a, b - OFF, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_352": {
                "variable": {
                    "value": "img11",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a, OFF, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_353": {
                "variable": {
                    "value": "image1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[img1, img11]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_354": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a - OFF, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_355": {
                "variable": {
                    "value": "img22",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, OFF, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_356": {
                "variable": {
                    "value": "image2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[img2, img22]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_357": {
                "variable": {
                    "value": "img3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, OFF, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a, b - OFF, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_358": {
                "variable": {
                    "value": "img33",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, b - OFF, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a, OFF, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_359": {
                "variable": {
                    "value": "image3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[img3, img33]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_360": {
                "variable": {
                    "value": "img4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, OFF, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a - OFF, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_361": {
                "variable": {
                    "value": "img44",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, a - OFF, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, OFF, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_362": {
                "variable": {
                    "value": "image4",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[img4, img44]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_369": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image1, image2, image3, image4, image5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_374": {
                "variable": {
                    "value": "x1_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, a - n, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, n, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_375": {
                "variable": {
                    "value": "x1_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a - n, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_376": {
                "variable": {
                    "value": "x2_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, n, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_377": {
                "variable": {
                    "value": "x2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, n, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a - n, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_379": {
                "variable": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x1_2, x12_1, x2_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_381": {
                "variable": {
                    "value": "x3_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x3",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, a - n, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, n, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_382": {
                "variable": {
                    "value": "x3_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x3",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a - n, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_383": {
                "variable": {
                    "value": "x4_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x4",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, n, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_384": {
                "variable": {
                    "value": "x4_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x4",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, n, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a - n, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_386": {
                "variable": {
                    "value": "x34",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x3_2, x34_1, x4_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_388": {
                "variable": {
                    "value": "x12_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x1_2, x12_1, x2_2], 1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, b - n, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a * 2 - n, n, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_389": {
                "variable": {
                    "value": "x12_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x1_2, x12_1, x2_2], 1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a * 2 - n, b - n, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_390": {
                "variable": {
                    "value": "x34_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x34",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x3_2, x34_1, x4_2], 1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a * 2 - n, n, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_391": {
                "variable": {
                    "value": "x34_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x34",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x3_2, x34_1, x4_2], 1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, n, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bs, a * 2 - n, b - n, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_393": {
                "variable": {
                    "value": "x1234",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x12_3, x1234_1, x34_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_20": {
                "variable": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input_x, out_channels, [1, 1], stride=1, scope='g')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(g, [2, 2], stride=2, scope='g_max_pool')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batchsize, out_channels, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_21": {
                "variable": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(g, [batchsize, out_channels, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(g_x, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_22": {
                "variable": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input_x, out_channels, [1, 1], stride=1, scope='theta')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batchsize, out_channels, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_23": {
                "variable": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(theta, [batchsize, out_channels, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(theta_x, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "variable": {
                    "value": "phi_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input_x, out_channels, [1, 1], stride=1, scope='phi')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(phi, [2, 2], stride=2, scope='phi_max_pool')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batchsize, out_channels, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(theta, [batchsize, out_channels, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(theta_x, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "phi_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(phi, [batchsize, out_channels, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_27": {
                "variable": {
                    "value": "f_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(theta_x, phi_x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_28": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(f, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(g, [batchsize, out_channels, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(g_x, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_29": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(f_softmax, g_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batchsize, height, width, out_channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batchsize, height, width, out_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_60": {
                "x": {
                    "value": "alpha * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_79": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "filter_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight', shape=filter_shape, dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weight', shape=filter_shape, dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_93": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "filter_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight', shape=filter_shape, dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weight', shape=filter_shape, dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer(), trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool_101": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, size, size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_109": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, size, size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_130": {
                "x": {
                    "value": "tf.matmul(x, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='bias', shape=[out_dim], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=trainable)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(b)",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(b)",
                            "Call"
                        ],
                        [
                            "x1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_135": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_136": {
                "variable": {
                    "value": "train_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "pop_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pop_mean', shape=[dim], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pop_mean * decay + batch_mean * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_138": {
                "variable": {
                    "value": "train_var",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "pop_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pop_var', shape=[dim], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pop_var * decay + batch_var * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_173": {
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "bn_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn_train",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "bn_inference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn_inference",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_188": {
                "tensor": {
                    "value": "transposed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, (0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_218": {
                "values": {
                    "value": "[PS(x_, r) for x_ in xc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_223": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, a, b, r, r)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_224": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 1, 2, 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_225": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(a)",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(a)",
                            "Call"
                        ],
                        [
                            "x1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_226": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.squeeze(x_) for x_ in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_227": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='bias', shape=[out_dim], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=trainable)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(b)",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(b)",
                            "Call"
                        ],
                        [
                            "x1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_228": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.squeeze(x_) for x_ in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_232": {
                "values": {
                    "value": "[PS(x_, r) for x_ in xc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_240": {
                "variable": {
                    "value": "Xs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_242": {
                "variable": {
                    "value": "Xr",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "Xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(X, r, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_243": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Xr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(Xs, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bsize, r * a, r * b, n_out_channel)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_265": {
                "variable": {
                    "value": "xc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "n_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_split",
                            "Method Argument"
                        ],
                        [
                            "n_split",
                            "Method Argument"
                        ],
                        [
                            "n_split",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_266": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[PS(x, r) for x in xc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NonLocalBlock'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_69": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_130": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weight', shape=[in_dim, out_dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1), trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_145": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "pop_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pop_mean', shape=[dim], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "pop_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pop_var', shape=[dim], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='beta', shape=[dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.0), trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='scale', shape=[dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1), trainable=trainable)",
                            "Call"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_194": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(a, b, r, r)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_195": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 1, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_197": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(a)",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(a)",
                            "Call"
                        ],
                        [
                            "x1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_198": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.squeeze(x_) for x_ in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_200": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='bias', shape=[out_dim], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=trainable)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(b)",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(b)",
                            "Call"
                        ],
                        [
                            "x1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_202": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.squeeze(x_) for x_ in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_205": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, a, b, r, r)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_206": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 1, 2, 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_208": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(a)",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(a)",
                            "Call"
                        ],
                        [
                            "x1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_209": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.squeeze(x_) for x_ in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_211": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='bias', shape=[out_dim], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=trainable)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(b)",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(b)",
                            "Call"
                        ],
                        [
                            "x1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.squeeze(x_) for x_ in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_215": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, a * r, b * r, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_229": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, a * r, b * r, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_256": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bsize, a, b, r, r)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_259": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(a)",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(a)",
                            "Call"
                        ],
                        [
                            "x1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_260": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.squeeze(x) for x_ in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_261": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='bias', shape=[out_dim], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=trainable)",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(b)",
                            "Call"
                        ],
                        [
                            "X.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "int(b)",
                            "Call"
                        ],
                        [
                            "x1.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_262": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.squeeze(x) for x_ in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_263": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bsize, a * r, b * r, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_14": {
                "name_or_scope": {
                    "value": "phi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "theta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_67": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_69": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_122": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_128": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "control_dependencies_140": {
                "control_inputs": {
                    "value": "[train_mean, train_var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_141": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(x, axes=[0, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(x, axes=[0, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='beta', shape=[dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.0), trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='scale', shape=[dim], dtype=tf.float32, initializer=tf.truncated_normal_initializer(stddev=0.1), trainable=trainable)",
                            "Call"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_153": {
                "stddev": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_159": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_165": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_171": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_238": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Xr, (bsize, r * a, r * b, n_out_channel))",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_226": {
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_228": {
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_255": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_198": {
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_202": {
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_209": {
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_213": {
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_260": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_262": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bs, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, (0, 1, 2, 4, 3))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x_) for x_ in x], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a, b, r, r))",
                            "Call"
                        ],
                        [
                            "tf.split(x, a, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 3)",
                            "Call"
                        ],
                        [
                            "tf.split(x, b, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.squeeze(x) for x_ in x], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (bsize, a * r, b * r, 1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}