{
    "Utils.py": {
        "tensorflow": {}
    },
    "imagenet_blackBox_attack2.py": {
        "tensorflow": {
            "Session_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_53": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "121",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "setup_cifar.py": {
        "tensorflow": {
            "Sequential_94": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_96": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_98": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_99": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_100": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_101": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_103": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_104": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_105": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_106": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_107": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_110": {
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_111": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_112": {
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_113": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_114": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_116": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "setup_inception.py": {
        "tensorflow": {
            "DEFINE_string_62": {
                "name": {
                    "value": "model_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "tmp/imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to classify_image_graph_def.pb, imagenet_synset_to_human_label_map.txt, and imagenet_2012_challenge_label_map_proto.pbtxt.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_67": {
                "name": {
                    "value": "image_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Absolute path to image file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_69": {
                "name": {
                    "value": "num_top_predictions",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Display this many predictions.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_147": {
                "variable": {
                    "value": "image_data",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.image_file if FLAGS.image_file else os.path.join(FLAGS.model_dir, 'cropped_panda.jpg')",
                            "IfExp"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_102": {
                "variable": {
                    "value": "proto_as_ascii",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "label_lookup_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.model_dir, 'labels.txt')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GraphDef_128": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_133": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_162": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(299, 299, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "import_graph_def_163": {
                "variable": {
                    "value": "softmax_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "sess.graph.as_graph_def()",
                    "type": "Call",
                    "possible_values": []
                },
                "input_map": {
                    "value": "{'DecodeJpeg:0': tf.reshape(img, (299, 299, 3))}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "['softmax/logits:0']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_192": {
                "variable": {
                    "value": "self.img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 299, 299, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "import_graph_def_193": {
                "variable": {
                    "value": "self.softmax_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "sess.graph.as_graph_def()",
                    "type": "Call",
                    "possible_values": []
                },
                "input_map": {
                    "value": "{'input:0': self.img}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "[output_name]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "run_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_125": {
                "name": {
                    "value": "os.path.join(FLAGS.model_dir, 'frozen_inception_v3.pb')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_145": {
                "filename": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.image_file if FLAGS.image_file else os.path.join(FLAGS.model_dir, 'cropped_panda.jpg')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "fatal_146": {
                "msg": {
                    "value": "File does not exist %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.image_file if FLAGS.image_file else os.path.join(FLAGS.model_dir, 'cropped_panda.jpg')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Session_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_244": {
                "variable": {
                    "value": "softmax_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "self.sess.graph.as_graph_def()",
                    "type": "Call",
                    "possible_values": []
                },
                "input_map": {
                    "value": "{'input:0': img, 'InceptionV3/Predictions/Shape:0': shape}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "[output_name]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "import_graph_def_250": {
                "variable": {
                    "value": "softmax_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "self.sess.graph.as_graph_def()",
                    "type": "Call",
                    "possible_values": []
                },
                "input_map": {
                    "value": "{'input:0': img}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "[output_name]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_97": {
                "filename": {
                    "value": "label_lookup_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.model_dir, 'labels.txt')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fatal_98": {
                "msg": {
                    "value": "File does not exist %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "label_lookup_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.model_dir, 'labels.txt')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_165": {
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.uint8, (299, 299, 3))",
                            "Call"
                        ],
                        [
                            "scipy.misc.imread(f)",
                            "Call"
                        ],
                        [
                            "np.array(scipy.misc.imresize(img, (299, 299)), dtype=np.float32) / 255 - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(299, 299, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "setup_mnist.py": {
        "tensorflow": {}
    },
    "train_model.py": {
        "tensorflow": {
            "softmax_cross_entropy_with_logits_54": {
                "labels": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "predicted / train_temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_94": {
                "logits": {
                    "value": "predicted / train_temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "universal.py": {
        "tensorflow": {
            "Session_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_51": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "121",
                            "int"
                        ]
                    ]
                }
            }
        }
    }
}