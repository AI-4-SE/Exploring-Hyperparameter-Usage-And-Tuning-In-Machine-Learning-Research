{
    "fewshot_re_kit/framework.py": {
        "sklearn": {},
        "torch": {
            "CrossEntropyLoss_22": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_81": {
                "variable": {
                    "value": "torch_version",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": ".",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "StepLR_127": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optimizer(parameters_to_optimize, learning_rate, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD",
                            "MethodArgument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "lr_step_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_50": {
                "input": {
                    "value": "(pred.view(-1) == label.view(-1)).type(torch.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_71": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_175": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fewshot_re_kit/data_loader.py": {
        "torch": {
            "from_numpy_271": {
                "ndarray": {
                    "value": "np.stack(support['word'], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_272": {
                "ndarray": {
                    "value": "np.stack(support['pos1'], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_273": {
                "ndarray": {
                    "value": "np.stack(support['pos2'], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_274": {
                "ndarray": {
                    "value": "np.stack(support['mask'], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_275": {
                "ndarray": {
                    "value": "np.stack(query['word'], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_276": {
                "ndarray": {
                    "value": "np.stack(query['pos1'], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_277": {
                "ndarray": {
                    "value": "np.stack(query['pos2'], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_278": {
                "ndarray": {
                    "value": "np.stack(query['mask'], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_279": {
                "ndarray": {
                    "value": "np.stack(label, 0).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fewshot_re_kit/network/embedding.py": {
        "torch": {
            "zeros_18": {
                "variable": {
                    "value": "blk",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "word_embedding_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_19": {
                "variable": {
                    "value": "word_vec_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "word_vec_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(word_vec_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_20": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "word_vec_mat.shape[0] + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.word_embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "word_vec_mat.shape[0] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_24": {
                "variable": {
                    "value": "self.pos1_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2 * max_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "pos_embedding_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_25": {
                "variable": {
                    "value": "self.pos2_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2 * max_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "pos_embedding_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.word_embedding(word), self.pos1_embedding(pos1), self.pos2_embedding(pos2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_17": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "word_embedding_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_21": {
                "tensors": {
                    "value": "(word_vec_mat, unk, blk)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "fewshot_re_kit/network/encoder.py": {
        "torch": {
            "Conv1d_15": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool1d_16": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "max_length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_19": {
                "variable": {
                    "value": "self.mask_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv(inputs.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv(inputs.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.cat([pool1, pool2, pool3], 1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pool1, pool2, pool3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_36": {
                "input": {
                    "value": "x + self._minus * mask[:, 0:1, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_37": {
                "input": {
                    "value": "x + self._minus * mask[:, 1:2, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_38": {
                "input": {
                    "value": "x + self._minus * mask[:, 2:3, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "fewshot_re_kit/sentence_encoder.py": {
        "torch": {}
    },
    "models/gnn.py": {
        "torch": {
            "cat_45": {
                "tensors": {
                    "value": "[query, support]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_48": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gnn_obj(nodes)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "(B * NQ, 1 + N * K, N)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/gnn_iclr.py": {
        "torch": {
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((W1, W2), 3)",
                            "Call"
                        ],
                        [
                            "W.split(1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat(W, 1).squeeze(3)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_31": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_32": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((W1, W2), 3)",
                            "Call"
                        ],
                        [
                            "W.split(1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat(W, 1).squeeze(3)",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones((bs, N, nf))",
                            "Call"
                        ],
                        [
                            "gmul(input)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.num_inputs)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], self.num_outputs)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_new], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_new], 2)",
                            "Call"
                        ],
                        [
                            "x + label2add",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, x_new], 2)",
                            "Call"
                        ],
                        [
                            "self.active(x, oracles_yi, hidden_labels)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_new], 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_34": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(W, x)",
                            "Call"
                        ],
                        [
                            "output.split(N, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(output, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_332": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bs, N, nf)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_333": {
                "variable": {
                    "value": "W1",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "W_size[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_333": {
                "variable": {
                    "value": "W1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_334": {
                "variable": {
                    "value": "W2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "W_size[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_334": {
                "variable": {
                    "value": "W2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_336": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(W1, W2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv2d_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(nf * ratio[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.bn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(nf * ratio[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv2d_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(nf * ratio[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(nf * ratio[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(nf * ratio[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv2d_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(nf * ratio[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * ratio[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.bn_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nf * ratio[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv2d_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf * ratio[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * ratio[3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "variable": {
                    "value": "self.bn_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nf * ratio[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv2d_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_operators",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_88": {
                "variable": {
                    "value": "W2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.eye(N).unsqueeze(0).unsqueeze(-1).expand(bs, N, N, 1)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_89": {
                "variable": {
                    "value": "W_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W1 - W2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_90": {
                "variable": {
                    "value": "W_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.abs(W1 - W2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.conv2d_1(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_1(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.dropout(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_2(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_3(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_3(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_4(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_4(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_last(W_new)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "W_new - W_id.expand_as(W_new) * 100000000.0",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "W_new.contiguous()",
                            "Call"
                        ],
                        [
                            "W_new.view(-1, W_new.size(3))",
                            "Call"
                        ],
                        [
                            "F.softmax(W_new)",
                            "Call"
                        ],
                        [
                            "W_new.view(W_new_size)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(W_new)",
                            "Call"
                        ],
                        [
                            "W_new * (1 - W_id)",
                            "BinOp"
                        ],
                        [
                            "W_id - W_new",
                            "BinOp"
                        ],
                        [
                            "torch.cat([W_id, W_new], 3)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_94": {
                "variable": {
                    "value": "W_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.abs(W1 - W2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.conv2d_1(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_1(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.dropout(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_2(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_3(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_3(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_4(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_4(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_last(W_new)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "W_new - W_id.expand_as(W_new) * 100000000.0",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "W_new.contiguous()",
                            "Call"
                        ],
                        [
                            "W_new.view(-1, W_new.size(3))",
                            "Call"
                        ],
                        [
                            "F.softmax(W_new)",
                            "Call"
                        ],
                        [
                            "W_new.view(W_new_size)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(W_new)",
                            "Call"
                        ],
                        [
                            "W_new * (1 - W_id)",
                            "BinOp"
                        ],
                        [
                            "W_id - W_new",
                            "BinOp"
                        ],
                        [
                            "torch.cat([W_id, W_new], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_100": {
                "variable": {
                    "value": "W_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.abs(W1 - W2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.conv2d_1(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_1(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.dropout(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_2(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_3(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_3(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_4(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_4(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_last(W_new)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "W_new - W_id.expand_as(W_new) * 100000000.0",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "W_new.contiguous()",
                            "Call"
                        ],
                        [
                            "W_new.view(-1, W_new.size(3))",
                            "Call"
                        ],
                        [
                            "F.softmax(W_new)",
                            "Call"
                        ],
                        [
                            "W_new.view(W_new_size)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(W_new)",
                            "Call"
                        ],
                        [
                            "W_new * (1 - W_id)",
                            "BinOp"
                        ],
                        [
                            "W_id - W_new",
                            "BinOp"
                        ],
                        [
                            "torch.cat([W_id, W_new], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_104": {
                "variable": {
                    "value": "W_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.abs(W1 - W2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.conv2d_1(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_1(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.dropout(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_2(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_3(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_3(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_4(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_4(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_last(W_new)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "W_new - W_id.expand_as(W_new) * 100000000.0",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "W_new.contiguous()",
                            "Call"
                        ],
                        [
                            "W_new.view(-1, W_new.size(3))",
                            "Call"
                        ],
                        [
                            "F.softmax(W_new)",
                            "Call"
                        ],
                        [
                            "W_new.view(W_new_size)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(W_new)",
                            "Call"
                        ],
                        [
                            "W_new * (1 - W_id)",
                            "BinOp"
                        ],
                        [
                            "W_id - W_new",
                            "BinOp"
                        ],
                        [
                            "torch.cat([W_id, W_new], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_108": {
                "variable": {
                    "value": "W_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.abs(W1 - W2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.conv2d_1(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_1(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.dropout(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_2(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_3(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_3(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_4(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_4(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_last(W_new)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "W_new - W_id.expand_as(W_new) * 100000000.0",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "W_new.contiguous()",
                            "Call"
                        ],
                        [
                            "W_new.view(-1, W_new.size(3))",
                            "Call"
                        ],
                        [
                            "F.softmax(W_new)",
                            "Call"
                        ],
                        [
                            "W_new.view(W_new_size)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(W_new)",
                            "Call"
                        ],
                        [
                            "W_new * (1 - W_id)",
                            "BinOp"
                        ],
                        [
                            "W_id - W_new",
                            "BinOp"
                        ],
                        [
                            "torch.cat([W_id, W_new], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_111": {
                "variable": {
                    "value": "W_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.abs(W1 - W2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.conv2d_1(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_1(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.dropout(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_2(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_3(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_3(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_4(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_4(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_last(W_new)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "W_new - W_id.expand_as(W_new) * 100000000.0",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "W_new.contiguous()",
                            "Call"
                        ],
                        [
                            "W_new.view(-1, W_new.size(3))",
                            "Call"
                        ],
                        [
                            "F.softmax(W_new)",
                            "Call"
                        ],
                        [
                            "W_new.view(W_new_size)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(W_new)",
                            "Call"
                        ],
                        [
                            "W_new * (1 - W_id)",
                            "BinOp"
                        ],
                        [
                            "W_id - W_new",
                            "BinOp"
                        ],
                        [
                            "torch.cat([W_id, W_new], 3)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_240": {
                "variable": {
                    "value": "self.conv_active_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_features + int(nf / 2) * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.input_features + int(nf / 2) * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_241": {
                "variable": {
                    "value": "self.bn_active",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.input_features + int(nf / 2) * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_242": {
                "variable": {
                    "value": "self.conv_active_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_features + int(nf / 2) * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_258": {
                "variable": {
                    "value": "x_active",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones((bs, N, nf))",
                            "Call"
                        ],
                        [
                            "gmul(input)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.num_inputs)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "x.view(x_size[0], x_size[1], self.num_outputs)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_new], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_new], 2)",
                            "Call"
                        ],
                        [
                            "x + label2add",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, x_new], 2)",
                            "Call"
                        ],
                        [
                            "self.active(x, oracles_yi, hidden_labels)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_new], 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_260": {
                "variable": {
                    "value": "x_active",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_active(x_active)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_262": {
                "variable": {
                    "value": "x_active",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_active",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv_active_1(x_active)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn_active(x_active))",
                            "Call"
                        ],
                        [
                            "self.conv_active_2(x_active)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x_active, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_active.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "x_active - (1 - hidden_labels) * 100000000.0",
                            "BinOp"
                        ],
                        [
                            "F.softmax(x_active)",
                            "Call"
                        ],
                        [
                            "x_active * hidden_labels",
                            "BinOp"
                        ],
                        [
                            "x_active.detach()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_266": {
                "variable": {
                    "value": "x_active",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_active",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv_active_1(x_active)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn_active(x_active))",
                            "Call"
                        ],
                        [
                            "self.conv_active_2(x_active)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x_active, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_active.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "x_active - (1 - hidden_labels) * 100000000.0",
                            "BinOp"
                        ],
                        [
                            "F.softmax(x_active)",
                            "Call"
                        ],
                        [
                            "x_active * hidden_labels",
                            "BinOp"
                        ],
                        [
                            "x_active.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_293": {
                "variable": {
                    "value": "padd",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.size(2) - label2add.size(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_297": {
                "variable": {
                    "value": "label2add",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[label2add, padd]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_48": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_76": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_115": {
                "variable": {
                    "value": "W_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.abs(W1 - W2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.conv2d_1(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_1(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.dropout(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_2(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_3(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_3(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_4(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_4(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_last(W_new)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "W_new - W_id.expand_as(W_new) * 100000000.0",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "W_new.contiguous()",
                            "Call"
                        ],
                        [
                            "W_new.view(-1, W_new.size(3))",
                            "Call"
                        ],
                        [
                            "F.softmax(W_new)",
                            "Call"
                        ],
                        [
                            "W_new.view(W_new_size)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(W_new)",
                            "Call"
                        ],
                        [
                            "W_new * (1 - W_id)",
                            "BinOp"
                        ],
                        [
                            "W_id - W_new",
                            "BinOp"
                        ],
                        [
                            "torch.cat([W_id, W_new], 3)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_120": {
                "variable": {
                    "value": "W_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.abs(W1 - W2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.conv2d_1(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_1(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.dropout(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_2(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_3(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_3(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_4(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_4(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_last(W_new)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "W_new - W_id.expand_as(W_new) * 100000000.0",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "W_new.contiguous()",
                            "Call"
                        ],
                        [
                            "W_new.view(-1, W_new.size(3))",
                            "Call"
                        ],
                        [
                            "F.softmax(W_new)",
                            "Call"
                        ],
                        [
                            "W_new.view(W_new_size)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(W_new)",
                            "Call"
                        ],
                        [
                            "W_new * (1 - W_id)",
                            "BinOp"
                        ],
                        [
                            "W_id - W_new",
                            "BinOp"
                        ],
                        [
                            "torch.cat([W_id, W_new], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_123": {
                "variable": {
                    "value": "W_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.abs(W1 - W2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.conv2d_1(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_1(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.dropout(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_2(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_3(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_3(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_4(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_4(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_last(W_new)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "W_new - W_id.expand_as(W_new) * 100000000.0",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "W_new.contiguous()",
                            "Call"
                        ],
                        [
                            "W_new.view(-1, W_new.size(3))",
                            "Call"
                        ],
                        [
                            "F.softmax(W_new)",
                            "Call"
                        ],
                        [
                            "W_new.view(W_new_size)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(W_new)",
                            "Call"
                        ],
                        [
                            "W_new * (1 - W_id)",
                            "BinOp"
                        ],
                        [
                            "W_id - W_new",
                            "BinOp"
                        ],
                        [
                            "torch.cat([W_id, W_new], 3)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_173": {
                "variable": {
                    "value": "x_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._modules['layer_l{}'.format(i)]([Wi, x])[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_new]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_212": {
                "variable": {
                    "value": "x_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._modules['layer_l{}'.format(i)]([Wi, x])[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_new]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_272": {
                "variable": {
                    "value": "decision",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_active",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv_active_1(x_active)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn_active(x_active))",
                            "Call"
                        ],
                        [
                            "self.conv_active_2(x_active)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x_active, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_active.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "x_active - (1 - hidden_labels) * 100000000.0",
                            "BinOp"
                        ],
                        [
                            "F.softmax(x_active)",
                            "Call"
                        ],
                        [
                            "x_active * hidden_labels",
                            "BinOp"
                        ],
                        [
                            "x_active.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_310": {
                "variable": {
                    "value": "x_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._modules['layer_l{}'.format(i)]([Wi, x])[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_new]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_317": {
                "variable": {
                    "value": "x_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._modules['layer_l{}'.format(i)]([Wi, x])[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_318": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_new]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_126": {
                "variable": {
                    "value": "W_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.abs(W1 - W2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "self.conv2d_1(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_1(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.dropout(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_2(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_3(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_3(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_4(W_new)",
                            "Call"
                        ],
                        [
                            "self.bn_4(W_new)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(W_new)",
                            "Call"
                        ],
                        [
                            "self.conv2d_last(W_new)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 1, 3)",
                            "Call"
                        ],
                        [
                            "W_new - W_id.expand_as(W_new) * 100000000.0",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "W_new.contiguous()",
                            "Call"
                        ],
                        [
                            "W_new.view(-1, W_new.size(3))",
                            "Call"
                        ],
                        [
                            "F.softmax(W_new)",
                            "Call"
                        ],
                        [
                            "W_new.view(W_new_size)",
                            "Call"
                        ],
                        [
                            "torch.transpose(W_new, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(W_new)",
                            "Call"
                        ],
                        [
                            "W_new * (1 - W_id)",
                            "BinOp"
                        ],
                        [
                            "W_id - W_new",
                            "BinOp"
                        ],
                        [
                            "torch.cat([W_id, W_new], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_136": {
                "variable": {
                    "value": "W_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[W_id, W_new]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_166": {
                "n": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_166": {
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_206": {
                "n": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_206": {
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_276": {
                "variable": {
                    "value": "decision",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_active",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv_active_1(x_active)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn_active(x_active))",
                            "Call"
                        ],
                        [
                            "self.conv_active_2(x_active)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x_active, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_active.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "x_active - (1 - hidden_labels) * 100000000.0",
                            "BinOp"
                        ],
                        [
                            "F.softmax(x_active)",
                            "Call"
                        ],
                        [
                            "x_active * hidden_labels",
                            "BinOp"
                        ],
                        [
                            "x_active.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_278": {
                "variable": {
                    "value": "(_, decision)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_active",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv_active_1(x_active)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn_active(x_active))",
                            "Call"
                        ],
                        [
                            "self.conv_active_2(x_active)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x_active, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_active.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "x_active - (1 - hidden_labels) * 100000000.0",
                            "BinOp"
                        ],
                        [
                            "F.softmax(x_active)",
                            "Call"
                        ],
                        [
                            "x_active * hidden_labels",
                            "BinOp"
                        ],
                        [
                            "x_active.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_304": {
                "n": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_304": {
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/metanet.py": {
        "torch": {
            "cat_19": {
                "tensors": {
                    "value": "[log, sign]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_25": {
                "variable": {
                    "value": "self.conv_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.conv_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_27": {
                "variable": {
                    "value": "self.fc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.conv_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.conv_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.conv_fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.fc_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.fc_fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.basic_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "230",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.attention_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "230",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_133": {
                "variable": {
                    "value": "cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "s_att",
                    "type": "Call",
                    "possible_values": [
                        [
                            "s_att.view(s_att.size(0), s_att.size(1) * s_att.size(2), s_att.size(3))",
                            "Call"
                        ],
                        [
                            "s_att.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.attention_emb(support, (-1, N, K, self.hidden_size), use_fast=True)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "q_att",
                    "type": "Call",
                    "possible_values": [
                        [
                            "q_att.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.attention_emb(query, (-1, NQ, self.hidden_size), use_fast=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.cosine_similarity(s_att, q_att, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_183": {
                "variable": {
                    "value": "basic_fast_conv_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "basic_fast_conv_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(basic_fast_conv_params, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_184": {
                "variable": {
                    "value": "basic_fast_fc_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "basic_fast_fc_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(basic_fast_fc_params, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_193": {
                "variable": {
                    "value": "final_fast_conv_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(cos, -1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(s_att, q_att).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "basic_fast_conv_params.view(N * K, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_194": {
                "variable": {
                    "value": "final_fast_fc_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(cos, -1)",
                            "Call"
                        ],
                        [
                            "self.attention_score(s_att, q_att).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "basic_fast_fc_params.view(N * K, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_202": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stack_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_204": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_14": {
                "input": {
                    "value": "torch.abs(inputs) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "data": {
                    "value": "[[x] * K for x in range(N)] * B",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_14": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_115": {
                "input": {
                    "value": "F.conv1d(x.transpose(-1, -2), self.basic_fast_conv_W, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_115": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_122": {
                "input": {
                    "value": "F.conv1d(x.transpose(-1, -2), self.attention_fast_conv_W, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_122": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_200": {
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.basic_emb({'word': query['word'][i:i + 1], 'pos1': query['pos1'][i:i + 1], 'pos2': query['pos2'][i:i + 1], 'mask': query['mask'][i:i + 1]}, self.hidden_size, use_fast=True)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.basic_fast_fc_W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "[i]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_115": {
                "input": {
                    "value": "x.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.basic_fast_conv_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_122": {
                "input": {
                    "value": "x.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.attention_fast_conv_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/proto.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "230",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "230",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_15": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_42": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.sentence_encoder(support)",
                            "Call"
                        ],
                        [
                            "self.drop(support)",
                            "Call"
                        ],
                        [
                            "support.view(-1, N, K, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "torch.mean(support, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_44": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_18": {
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_18": {
                "input": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/snail.py": {
        "torch": {
            "Conv1d_15": {
                "variable": {
                    "value": "self.causal_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_40": {
                "variable": {
                    "value": "tanh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.causal_conv1(minibatch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_41": {
                "variable": {
                    "value": "sig",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.causal_conv2(minibatch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[minibatch, tanh * sig]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.tcblock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.key_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.query_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.value_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "v_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_75": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_86": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "current_mask * torch.div(torch.bmm(queries, keys.transpose(2, 1)), self.sqrt_k) + self.minus * (1.0 - current_mask)",
                            "BinOp"
                        ],
                        [
                            "self.disc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_87": {
                "variable": {
                    "value": "read",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(logits, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.value_layer(minibatch)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_103": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.disc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att2.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.tc1.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.tc2.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "minibatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[support, query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_138": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "current_mask * torch.div(torch.bmm(queries, keys.transpose(2, 1)), self.sqrt_k) + self.minus * (1.0 - current_mask)",
                            "BinOp"
                        ],
                        [
                            "self.disc(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_88": {
                "tensors": {
                    "value": "[minibatch, read]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "ndarray": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.tril(np.ones((seq_len, seq_len))).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_85": {
                "input": {
                    "value": "torch.bmm(queries, keys.transpose(2, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.sqrt_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_85": {
                "input": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keys",
                            "Name"
                        ]
                    ]
                },
                "mat2": {
                    "value": "keys.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_demo.py": {
        "torch": {}
    }
}