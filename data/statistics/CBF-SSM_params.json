{
    "cbfssm/outputs/outputs.py": {
        "sklearn": {
            "mean_squared_error_132": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ds.denormalize(ds.test_out[i:i + 1, :, :], 'out')[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.run(sess, model.pred_mean, {model.condition: False})[0]",
                            "Subscript"
                        ],
                        [
                            "ds.denormalize(pred, 'out')[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "Session_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cbfssm/model/base_model.py": {
        "tensorflow": {
            "Graph_11": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "self.data_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, dim_u]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "self.data_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, dim_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.repeats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "self.condition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_30": {
                "input": {
                    "value": "self.sample_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_31": {
                "input": {
                    "value": "self.sample_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cbfssm/model/cbfssm.py": {
        "tensorflow": {
            "Variable_51": {
                "variable": {
                    "value": "self.var_x_unc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "backward(self.config['var_x'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_53": {
                "variable": {
                    "value": "self.var_y_unc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "backward(self.config['var_y'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_72": {
                "variable": {
                    "value": "self.u_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_74": {
                "variable": {
                    "value": "u_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.sample_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_75": {
                "variable": {
                    "value": "u_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(u_dub, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_78": {
                "variable": {
                    "value": "self.y_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_80": {
                "variable": {
                    "value": "y_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.sample_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_81": {
                "variable": {
                    "value": "y_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(y_dub, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_87": {
                "variable": {
                    "value": "prob_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_89": {
                "variable": {
                    "value": "y2_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_95": {
                "variable": {
                    "value": "y2_array",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y2_array.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_96": {
                "variable": {
                    "value": "out_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.sample_out, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_97": {
                "variable": {
                    "value": "self.y_tilde",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "(out_dub, y2_array)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "variable": {
                    "value": "self.entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "prob_array.stack()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "y_init",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_tf, samples, dim_x - dim_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_107": {
                "variable": {
                    "value": "(u_final, y_final, y2_final, p_final, t_final, h_final)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda u, y, y2, p, t, h: t >= 0",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "functools.partial(self._backward_body, run=run)",
                    "type": "Call",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[self.u_array, self.y_array, y2_array, prob_array, self.seq_len_tf - 1, y_init]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_133": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "resample_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.mod(t + 1, 2 * recog_len), 0)",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.mod(t + recog_len + 1, 2 * recog_len), 0)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.tile(tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype), [1, 1, dim_out])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : h",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_137": {
                "variable": {
                    "value": "in_t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(hidden, u_t, y_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "in_t_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "in_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((hidden, u_t, y_t), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((x_t, u_t), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf * samples, dim_x + dim_u)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_out))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_out])",
                            "Call"
                        ],
                        [
                            "self.gp_f.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_x])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf, samples, dim_out)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, dim_out))",
                            "Call"
                        ],
                        [
                            "fvar + self.var_x[:dim_out]",
                            "BinOp"
                        ],
                        [
                            "self.gp_f.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "fvar + self.var_x",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf, samples, dim_out)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_145": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_out))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_out])",
                            "Call"
                        ],
                        [
                            "self.gp_f.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "in_t[:, :, :dim_out]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_149": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, dim_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_150": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_out))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_out])",
                            "Call"
                        ],
                        [
                            "self.gp_f.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(eps, tf.sqrt(fvar))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_151": {
                "variable": {
                    "value": "y2_out",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "write_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(t, 2 * recog_len) < recog_len",
                            "Compare"
                        ],
                        [
                            "tf.mod(t, 2 * recog_len) >= recog_len",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : y2.write(t, out)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : y2",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_154": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "2.0 * np.pi * np.e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_156": {
                "variable": {
                    "value": "p_out",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "write_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(t, 2 * recog_len) < recog_len",
                            "Compare"
                        ],
                        [
                            "tf.mod(t, 2 * recog_len) >= recog_len",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : p.write(t, entropy)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : p",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "TensorArray_163": {
                "variable": {
                    "value": "prob_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_166": {
                "variable": {
                    "value": "x_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_171": {
                "variable": {
                    "value": "y_tilde_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_173": {
                "variable": {
                    "value": "y_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.y_tilde",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_176": {
                "variable": {
                    "value": "(u_final, x_final, y_final, p_final, t_final)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda u, x, y, p, t: t < self.seq_len_tf - 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "self._forward_body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[self.u_array, x_array, y_tilde_array, prob_array, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_181": {
                "variable": {
                    "value": "self.x_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "x_final.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_183": {
                "variable": {
                    "value": "self.kl_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p_final.stack()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_197": {
                "variable": {
                    "value": "in_t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(x_t, u_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "in_t_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "in_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((hidden, u_t, y_t), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat((x_t, u_t), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf * samples, dim_u + dim_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_203": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_out))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_out])",
                            "Call"
                        ],
                        [
                            "self.gp_f.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_x])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf, samples, dim_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_204": {
                "variable": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, dim_out))",
                            "Call"
                        ],
                        [
                            "fvar + self.var_x[:dim_out]",
                            "BinOp"
                        ],
                        [
                            "self.gp_f.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "fvar + self.var_x",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf, samples, dim_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_205": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_out))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_out])",
                            "Call"
                        ],
                        [
                            "self.gp_f.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "in_t[:, :, :dim_x]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_209": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_212": {
                "variable": {
                    "value": "var_y_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(self.var_y, axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.batch_tf, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_221": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fmean + k * y_diff",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(eps, tf.sqrt(sig))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_224": {
                "variable": {
                    "value": "x_t_nocond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_out))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_out])",
                            "Call"
                        ],
                        [
                            "self.gp_f.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(eps, tf.sqrt(fvar))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_or_227": {
                "variable": {
                    "value": "do_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.condition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t < recog_len - 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cond_228": {
                "variable": {
                    "value": "x_next",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(self.condition, t < recog_len - 1)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : x_t",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x_t_nocond",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_245": {
                "input": {
                    "value": "self.var_y[:dim_y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_246": {
                "variable": {
                    "value": "var_full",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var_y_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(self.var_y[:dim_y], 0), 0), 0)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self.batch_tf, self.seq_len_tf, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_249": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.sample_out, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_251": {
                "variable": {
                    "value": "loglik",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_dist.log_prob(obs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reciprocal_257": {
                "variable": {
                    "value": "divisor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(samples, dtype=self.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "negative_262": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loglik * loss_factors[0] * divisor - self.kl_x * loss_factors[0] * divisor + self.entropy * loss_factors[1] * divisor - kl_z_f - kl_z_b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "moments_267": {
                "variable": {
                    "value": "(self.pred_mean, self.pred_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_268": {
                "variable": {
                    "value": "self.pred_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.pred_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.var_y[:dim_y]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "moments_269": {
                "variable": {
                    "value": "(self.internal_mean, self.internal_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_squared_error_270": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.sample_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.pred_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_274": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Saver_276": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_277": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_124": {
                "variable": {
                    "value": "resample_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.mod(t + 1, 2 * recog_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_127": {
                "variable": {
                    "value": "resample_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.mod(t + recog_len + 1, 2 * recog_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_75": {
                "input": {
                    "value": "u_dub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(self.sample_in, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(u_dub, axis=2), [1, 1, samples, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_81": {
                "input": {
                    "value": "y_dub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(self.sample_out, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(y_dub, axis=2), [1, 1, samples, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(self.y_tilde, perm=[1, 0, 2, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_96": {
                "input": {
                    "value": "self.sample_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_150": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype), [1, 1, dim_out])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype), [1, 1, dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sqrt(fvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_155": {
                "input_tensor": {
                    "value": "tf.log(c) + tf.log(fvar)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_212": {
                "input": {
                    "value": "self.var_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reciprocal_217": {
                "x": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_y_tiled + fvar",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_219": {
                "shape": {
                    "value": "(self.batch_tf, samples, dim_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_221": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype), [1, 1, dim_out])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype), [1, 1, dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sqrt(sig)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_224": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype), [1, 1, dim_out])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype), [1, 1, dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sqrt(fvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_233": {
                "input_tensor": {
                    "value": "kl_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(fvar) - tf.log(sig) + (sig + tf.pow(mu - fmean, 2.0)) / fvar - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(kl_reg) * tf.cond(do_cond, lambda : tf.constant(0.5, dtype=self.dtype), lambda : tf.constant(0.0, dtype=self.dtype))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cond_233": {
                "pred": {
                    "value": "do_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(self.condition, t < recog_len - 1)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.constant(0.5, dtype=self.dtype)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, dtype=self.dtype)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_249": {
                "input": {
                    "value": "self.sample_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_257": {
                "value": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config['samples']",
                            "Subscript"
                        ],
                        [
                            "self.config['samples']",
                            "Subscript"
                        ],
                        [
                            "self.config['samples']",
                            "Subscript"
                        ],
                        [
                            "self.config['samples']",
                            "Subscript"
                        ],
                        [
                            "self.config['samples']",
                            "Subscript"
                        ],
                        [
                            "self.config['samples']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_271": {
                "x": {
                    "value": "self.pred_mean - self.sample_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_271": {
                "x": {
                    "value": "self.pred_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mod_124": {
                "x1": {
                    "value": "t + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x2": {
                    "value": "2 * recog_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mod_125": {
                "x1": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "2 * recog_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mod_127": {
                "x1": {
                    "value": "t + recog_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x2": {
                    "value": "2 * recog_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mod_128": {
                "x1": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "2 * recog_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_134": {
                "input": {
                    "value": "tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, dim_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_150": {
                "x": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, dim_out))",
                            "Call"
                        ],
                        [
                            "fvar + self.var_x[:dim_out]",
                            "BinOp"
                        ],
                        [
                            "self.gp_f.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "fvar + self.var_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_220": {
                "x": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvar * tf.reciprocal(s)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_221": {
                "x": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((self.batch_tf, samples, dim_x), dtype=self.dtype) - k",
                            "BinOp"
                        ],
                        [
                            "tf.square(sig) * fvar + tf.square(k) * var_y_tiled",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_224": {
                "x": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, dim_out))",
                            "Call"
                        ],
                        [
                            "fvar + self.var_x[:dim_out]",
                            "BinOp"
                        ],
                        [
                            "self.gp_f.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "fvar + self.var_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_248": {
                "x": {
                    "value": "var_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(var_y_exp, [self.batch_tf, self.seq_len_tf, samples, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_155": {
                "x": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, dim_out))",
                            "Call"
                        ],
                        [
                            "fvar + self.var_x[:dim_out]",
                            "BinOp"
                        ],
                        [
                            "self.gp_f.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "fvar + self.var_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_232": {
                "x": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((self.batch_tf, samples, dim_x), dtype=self.dtype) - k",
                            "BinOp"
                        ],
                        [
                            "tf.square(sig) * fvar + tf.square(k) * var_y_tiled",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_234": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_232": {
                "x": {
                    "value": "mu - fmean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "cbfssm/model/cbfssmhalf.py": {
        "tensorflow": {
            "Variable_36": {
                "variable": {
                    "value": "self.var_x_unc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "backward(self.config['var_x'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "variable": {
                    "value": "self.var_y_unc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "backward(self.config['var_y'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_52": {
                "variable": {
                    "value": "self.u_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_54": {
                "variable": {
                    "value": "u_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.sample_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_55": {
                "variable": {
                    "value": "u_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(u_dub, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_58": {
                "variable": {
                    "value": "self.y_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_60": {
                "variable": {
                    "value": "y_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.sample_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_61": {
                "variable": {
                    "value": "y_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(y_dub, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_100": {
                "variable": {
                    "value": "prob_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_103": {
                "variable": {
                    "value": "x_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_108": {
                "variable": {
                    "value": "(u_final, x_final, y_final, p_final, t_final)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda u, x, y, p, t: t < self.seq_len_tf - 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "self._forward_body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[self.u_array, x_array, self.y_array, prob_array, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_113": {
                "variable": {
                    "value": "self.x_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "x_final.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "variable": {
                    "value": "self.kl_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p_final.stack()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_130": {
                "variable": {
                    "value": "in_t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(x_t, u_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "in_t_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "in_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((x_t, u_t), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf * samples, dim_u + dim_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_f.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_x])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf, samples, dim_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_f.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "fvar + self.var_x",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf, samples, dim_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_138": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_f.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "in_t[:, :, :dim_x]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_142": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_145": {
                "variable": {
                    "value": "var_y_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(self.var_y, axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.batch_tf, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_tf, samples, dim_x - dim_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_156": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fmean + tf.concat((k * y_diff, pad), axis=2)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(eps, tf.sqrt(sig))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_159": {
                "variable": {
                    "value": "x_t_nocond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_f.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(eps, tf.sqrt(fvar))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_or_162": {
                "variable": {
                    "value": "do_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.condition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t < recog_len - 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cond_163": {
                "variable": {
                    "value": "x_next",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(self.condition, t < recog_len - 1)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : x_t",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x_t_nocond",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_180": {
                "input": {
                    "value": "self.var_y[:dim_y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_181": {
                "variable": {
                    "value": "var_full",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var_y_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(self.var_y[:dim_y], 0), 0), 0)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self.batch_tf, self.seq_len_tf, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_184": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.sample_out, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_186": {
                "variable": {
                    "value": "loglik",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_dist.log_prob(obs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reciprocal_192": {
                "variable": {
                    "value": "divisor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(samples, dtype=self.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "negative_196": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loglik * loss_factors[0] * divisor - self.kl_x * loss_factors[0] * divisor - kl_z_f",
                            "BinOp"
                        ]
                    ]
                }
            },
            "moments_201": {
                "variable": {
                    "value": "(self.pred_mean, self.pred_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_202": {
                "variable": {
                    "value": "self.pred_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.pred_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.var_y[:dim_y]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "moments_203": {
                "variable": {
                    "value": "(self.internal_mean, self.internal_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_squared_error_204": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.sample_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.pred_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_208": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Saver_210": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_211": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_tf, dim_x - dim_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_79": {
                "variable": {
                    "value": "x_0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(x_0, pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_80": {
                "variable": {
                    "value": "x_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(x_0, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_83": {
                "variable": {
                    "value": "sample_uy",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(sample_in, sample_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRUCell_85": {
                "variable": {
                    "value": "rnn_recog",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dynamic_rnn_87": {
                "variable": {
                    "value": "(_, recog_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "rnn_recog",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.GRUCell(16)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "tf.reverse(sample_uy, axis=[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_recog.zero_state(self.batch_tf, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "RNN_recog",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_91": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "recog_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(rnn_recog, tf.reverse(sample_uy, axis=[1]), initial_state=initial_state, dtype=self.dtype, scope='RNN_recog')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "dim_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config['dim_x']",
                            "Subscript"
                        ],
                        [
                            "self.config['dim_x']",
                            "Subscript"
                        ],
                        [
                            "self.config['dim_x']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_92": {
                "variable": {
                    "value": "x_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(dense, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_155": {
                "values": {
                    "value": "(tf.square(k) * var_y_tiled, pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_55": {
                "input": {
                    "value": "u_dub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(self.sample_in, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(u_dub, axis=2), [1, 1, samples, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "input": {
                    "value": "y_dub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(self.sample_out, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(y_dub, axis=2), [1, 1, samples, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_145": {
                "input": {
                    "value": "self.var_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reciprocal_150": {
                "x": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_y_tiled + fvar[:, :, :dim_y]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_152": {
                "values": {
                    "value": "(k * y_diff, pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_153": {
                "shape": {
                    "value": "(self.batch_tf, samples, dim_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_153": {
                "values": {
                    "value": "(k, pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_154": {
                "x": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((self.batch_tf, samples, dim_x), dtype=self.dtype) - tf.concat((k, pad), axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.square(sig) * fvar",
                            "BinOp"
                        ],
                        [
                            "sig + tf.concat((tf.square(k) * var_y_tiled, pad), axis=2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_156": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype), [1, 1, dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sqrt(sig)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_159": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype), [1, 1, dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sqrt(fvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_168": {
                "input_tensor": {
                    "value": "kl_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(fvar) - tf.log(sig) + (sig + tf.pow(mu - fmean, 2.0)) / fvar - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(kl_reg) * tf.cond(do_cond, lambda : tf.constant(0.5, dtype=self.dtype), lambda : tf.constant(0.0, dtype=self.dtype))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cond_168": {
                "pred": {
                    "value": "do_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(self.condition, t < recog_len - 1)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.constant(0.5, dtype=self.dtype)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, dtype=self.dtype)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_184": {
                "input": {
                    "value": "self.sample_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_192": {
                "value": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config['samples']",
                            "Subscript"
                        ],
                        [
                            "self.config['samples']",
                            "Subscript"
                        ],
                        [
                            "self.config['samples']",
                            "Subscript"
                        ],
                        [
                            "self.config['samples']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_205": {
                "x": {
                    "value": "self.pred_mean - self.sample_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_205": {
                "x": {
                    "value": "self.pred_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_80": {
                "input": {
                    "value": "x_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "sample_out[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "tf.concat((x_0, pad), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(x_0, axis=1), [1, samples, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(dense, axis=1), [1, samples, 1])",
                            "Call"
                        ],
                        [
                            "self._recog_model(self.sample_in, self.sample_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_88": {
                "tensor": {
                    "value": "sample_uy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((sample_in, sample_out), axis=2)",
                            "Call"
                        ],
                        [
                            "sample_uy[:, :recog_len, :]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_92": {
                "input": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(recog_state, dim_x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_156": {
                "x": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((self.batch_tf, samples, dim_x), dtype=self.dtype) - tf.concat((k, pad), axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.square(sig) * fvar",
                            "BinOp"
                        ],
                        [
                            "sig + tf.concat((tf.square(k) * var_y_tiled, pad), axis=2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_159": {
                "x": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_f.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "fvar + self.var_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_183": {
                "x": {
                    "value": "var_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(var_y_exp, [self.batch_tf, self.seq_len_tf, samples, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_155": {
                "x": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvar[:, :, :dim_y] * tf.reciprocal(s)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_167": {
                "x": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((self.batch_tf, samples, dim_x), dtype=self.dtype) - tf.concat((k, pad), axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.square(sig) * fvar",
                            "BinOp"
                        ],
                        [
                            "sig + tf.concat((tf.square(k) * var_y_tiled, pad), axis=2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_169": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_167": {
                "x": {
                    "value": "mu - fmean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "cbfssm/model/gp_tf.py": {
        "tensorflow": {
            "stack_80": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[num_func, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_81": {
                "variable": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(fvar, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([num_func, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([self.out_dim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(Lm, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(Lm), A, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(self.cholesky, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(self.cholesky), A, lower=False)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_35": {
                "variable": {
                    "value": "Xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cholesky_54": {
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_set_diag(mat, tf.diag_part(mat) + jitter)",
                            "Call"
                        ],
                        [
                            "tf.cast(mat, tf.float64)",
                            "Call"
                        ],
                        [
                            "mat",
                            "Method Argument"
                        ],
                        [
                            "mat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_63": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_set_diag(mat, tf.diag_part(mat) + jitter)",
                            "Call"
                        ],
                        [
                            "tf.cast(mat, tf.float64)",
                            "Call"
                        ],
                        [
                            "mat",
                            "Method Argument"
                        ],
                        [
                            "mat",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_112": {
                "variable": {
                    "value": "self.zeta_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.uniform(low=-zeta_pos, high=zeta_pos, size=(num_points, in_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_117": {
                "variable": {
                    "value": "self.zeta_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "zeta_mean * np.random.rand(num_points, out_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_120": {
                "variable": {
                    "value": "zeta_var_unc",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "backward(zeta_var * np.ones((num_points, out_dim)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_123": {
                "variable": {
                    "value": "self.zeta_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.zeta_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.out_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_142": {
                "variable": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(fvar, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([num_func, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([self.out_dim, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_148": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(Lm, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(Lm), A, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(self.cholesky, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(self.cholesky), A, lower=False)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.zeta_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_25": {
                "variable": {
                    "value": "self.variance_unc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "backward(variance)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_29": {
                "variable": {
                    "value": "self.lengthscales_unc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "backward(lengthscales)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_41": {
                "variable": {
                    "value": "X2s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(X2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_46": {
                "dims": {
                    "value": "tf.stack([tf.shape(X)[0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.squeeze(self.variance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_65": {
                "x": {
                    "value": "chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_jitter_cholesky(mat, jitter=jitter)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_70": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_79": {
                "input_tensor": {
                    "value": "tf.square(A)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_81": {
                "input": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.Kdiag(Xnew) - tf.reduce_sum(tf.square(A), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(fvar, 0), shape)",
                            "Call"
                        ],
                        [
                            "fvar + tf.reduce_sum(tf.square(LTA), 1)",
                            "BinOp"
                        ],
                        [
                            "self.kern.Kdiag(Xnew) - tf.reduce_sum(tf.square(A), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(fvar, 0), shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_84": {
                "a": {
                    "value": "Lm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cast_cholesky(kern.K(X), jitter=1e-08)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "tf.square(LTA)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_100": {
                "a": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.Kdiag(Xnew) - tf.reduce_sum(tf.square(A), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(fvar, 0), shape)",
                            "Call"
                        ],
                        [
                            "fvar + tf.reduce_sum(tf.square(LTA), 1)",
                            "BinOp"
                        ],
                        [
                            "self.kern.Kdiag(Xnew) - tf.reduce_sum(tf.square(A), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(fvar, 0), shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_172": {
                "input_tensor": {
                    "value": "tf.contrib.distributions.kl_divergence(zeta_dist, zeta_prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_24": {
                "name": {
                    "value": "kern",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_35": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X / self.lengthscales",
                            "BinOp"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_46": {
                "values": {
                    "value": "[tf.shape(X)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_46": {
                "input": {
                    "value": "self.variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_49": {
                "x": {
                    "value": "-0.5 * self.square_dist(X, X2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_part_53": {
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_set_diag(mat, tf.diag_part(mat) + jitter)",
                            "Call"
                        ],
                        [
                            "tf.cast(mat, tf.float64)",
                            "Call"
                        ],
                        [
                            "mat",
                            "Method Argument"
                        ],
                        [
                            "mat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_79": {
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(Lm, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(Lm), A, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(self.cholesky, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(self.cholesky), A, lower=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_93": {
                "variable": {
                    "value": "A_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(A, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack([num_func, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "LTA",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q_sqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_sqrt",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "A_tiled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(A, 0), tf.stack([num_func, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(A, 0), tf.stack([self.out_dim, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_98": {
                "x": {
                    "value": "LTA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A * tf.expand_dims(tf.transpose(q_sqrt), 2)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q_sqrt, A_tiled, transpose_a=True)",
                            "Call"
                        ],
                        [
                            "A * tf.expand_dims(tf.transpose(self.zeta_std), 2)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(self.zeta_std, A_tiled, transpose_a=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_140": {
                "input_tensor": {
                    "value": "tf.square(A)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_142": {
                "input": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.Kdiag(Xnew) - tf.reduce_sum(tf.square(A), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(fvar, 0), shape)",
                            "Call"
                        ],
                        [
                            "fvar + tf.reduce_sum(tf.square(LTA), 1)",
                            "BinOp"
                        ],
                        [
                            "self.kern.Kdiag(Xnew) - tf.reduce_sum(tf.square(A), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(fvar, 0), shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "a": {
                    "value": "self.cholesky",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_159": {
                "input_tensor": {
                    "value": "tf.square(LTA)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_161": {
                "a": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kern.Kdiag(Xnew) - tf.reduce_sum(tf.square(A), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(fvar, 0), shape)",
                            "Call"
                        ],
                        [
                            "fvar + tf.reduce_sum(tf.square(LTA), 1)",
                            "BinOp"
                        ],
                        [
                            "self.kern.Kdiag(Xnew) - tf.reduce_sum(tf.square(A), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(fvar, 0), shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "kl_divergence_172": {
                "y_true": {
                    "value": "zeta_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.distributions.MultivariateNormalDiag(loc=tf.transpose(self.zeta_mean), scale_diag=tf.transpose(self.zeta_std))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "zeta_prior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.distributions.MultivariateNormalTriL(loc=tf.zeros((self.out_dim, self.num_points), dtype=self.dtype), scale_tril=tf.tile(tf.expand_dims(self.cholesky, 0), [self.out_dim, 1, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_38": {
                "tensor": {
                    "value": "Xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(X), 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "square_41": {
                "x": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X2 / self.lengthscales",
                            "BinOp"
                        ],
                        [
                            "X2",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_43": {
                "tensor": {
                    "value": "Xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(X), 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_91": {
                "input": {
                    "value": "tf.transpose(q_sqrt)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_140": {
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(Lm, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(Lm), A, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(self.cholesky, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(self.cholesky), A, lower=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_154": {
                "variable": {
                    "value": "A_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(A, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack([self.out_dim, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_155": {
                "variable": {
                    "value": "LTA",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.zeta_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "A_tiled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(A, 0), tf.stack([num_func, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(A, 0), tf.stack([self.out_dim, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_159": {
                "x": {
                    "value": "LTA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A * tf.expand_dims(tf.transpose(q_sqrt), 2)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q_sqrt, A_tiled, transpose_a=True)",
                            "Call"
                        ],
                        [
                            "A * tf.expand_dims(tf.transpose(self.zeta_std), 2)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(self.zeta_std, A_tiled, transpose_a=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_165": {
                "shape": {
                    "value": "(self.out_dim, self.num_points)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_166": {
                "input": {
                    "value": "tf.expand_dims(self.cholesky, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.out_dim, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_169": {
                "a": {
                    "value": "self.zeta_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_170": {
                "a": {
                    "value": "self.zeta_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_91": {
                "a": {
                    "value": "q_sqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_sqrt",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_93": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(Lm, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(Lm), A, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(self.cholesky, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(self.cholesky), A, lower=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_93": {
                "values": {
                    "value": "[num_func, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_152": {
                "input": {
                    "value": "tf.transpose(self.zeta_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_166": {
                "input": {
                    "value": "self.cholesky",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X / self.lengthscales",
                            "BinOp"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X / self.lengthscales",
                            "BinOp"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_42": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X / self.lengthscales",
                            "BinOp"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X2 / self.lengthscales",
                            "BinOp"
                        ],
                        [
                            "X2",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_46": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X / self.lengthscales",
                            "BinOp"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_152": {
                "a": {
                    "value": "self.zeta_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_154": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(Lm, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(Lm), A, lower=False)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(self.cholesky, Kmn, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_triangular_solve(tf.transpose(self.cholesky), A, lower=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_154": {
                "values": {
                    "value": "[self.out_dim, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cbfssm/model/prssm.py": {
        "tensorflow": {
            "concat_112": {
                "variable": {
                    "value": "in_t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(x_t, u_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "in_t_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "in_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((x_t, u_t), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf * samples, dim_u + dim_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conditional(in_t_reshape, self.zeta_pos, self.kern, self.zeta_mean, tf.sqrt(self.zeta_var))",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_x])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf, samples, dim_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conditional(in_t_reshape, self.zeta_pos, self.kern, self.zeta_mean, tf.sqrt(self.zeta_var))",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "fvar + self.var_x",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf, samples, dim_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_122": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conditional(in_t_reshape, self.zeta_pos, self.kern, self.zeta_mean, tf.sqrt(self.zeta_var))",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "in_t[:, :, :dim_x]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_126": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.random_normal((self.batch_tf, samples, 1), dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_127": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conditional(in_t_reshape, self.zeta_pos, self.kern, self.zeta_mean, tf.sqrt(self.zeta_var))",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(eps, tf.sqrt(fvar))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "variable": {
                    "value": "self.zeta_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.uniform(low=-self.config['zeta_pos'], high=self.config['zeta_pos'], size=(ind_pnt_num, dim_x + dim_u))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_33": {
                "variable": {
                    "value": "self.zeta_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.config['zeta_mean'] * np.random.rand(ind_pnt_num, dim_x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "zeta_var_unc",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "backward(self.config['zeta_var'] * np.ones((ind_pnt_num, dim_x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "variable": {
                    "value": "var_x_unc",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "backward(self.config['var_x'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "variable": {
                    "value": "var_y_unc",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "backward(self.config['var_y'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorArray_50": {
                "variable": {
                    "value": "x_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_55": {
                "variable": {
                    "value": "u_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_57": {
                "variable": {
                    "value": "u_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.sample_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_58": {
                "variable": {
                    "value": "u_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(u_dub, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_62": {
                "variable": {
                    "value": "(u_final, x_final, t_final)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda u, x, t: t < self.seq_len_tf - 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "self._loop_body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[u_array, x_array, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_67": {
                "variable": {
                    "value": "x_final",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_final.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_71": {
                "input": {
                    "value": "self.var_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_72": {
                "variable": {
                    "value": "var_full",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var_y_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(self.var_y, 0), 0), 0)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self.batch_tf, self.seq_len_tf, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_75": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.sample_out, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "variable": {
                    "value": "loglik",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_dist.log_prob(obs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_81": {
                "variable": {
                    "value": "scale_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.cholesky(k_prior), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[dim_x, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_86": {
                "variable": {
                    "value": "kl_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.contrib.distributions.kl_divergence(zeta_dist, zeta_prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_89": {
                "variable": {
                    "value": "(self.pred_mean, self.pred_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_90": {
                "variable": {
                    "value": "self.pred_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.pred_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.var_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moments_91": {
                "variable": {
                    "value": "(self.internal_mean, self.internal_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.while_loop(lambda u, x, t: t < self.seq_len_tf - 1, self._loop_body, [u_array, x_array, 0], parallel_iterations=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_final.stack(), perm=[1, 0, 2, 3])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_squared_error_92": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.sample_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.pred_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "negative_97": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loglik * loss_factors[0] - kl_reg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "AdamOptimizer_98": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Saver_100": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_101": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_tf, dim_x - dim_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_143": {
                "variable": {
                    "value": "x_0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(x_0, pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_144": {
                "variable": {
                    "value": "x_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(x_0, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_147": {
                "variable": {
                    "value": "sample_uy",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(sample_in, sample_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_149": {
                "variable": {
                    "value": "sample_uy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sample_uy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((sample_in, sample_out), axis=2)",
                            "Call"
                        ],
                        [
                            "sample_uy[:, :recog_len, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(sample_uy, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat((sample_in, sample_out), axis=2)",
                            "Call"
                        ],
                        [
                            "sample_uy[:, :recog_len, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_151": {
                "variable": {
                    "value": "layer1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_uy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((sample_in, sample_out), axis=2)",
                            "Call"
                        ],
                        [
                            "sample_uy[:, :recog_len, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(sample_uy, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat((sample_in, sample_out), axis=2)",
                            "Call"
                        ],
                        [
                            "sample_uy[:, :recog_len, :]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling1d_152": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(sample_uy, 5, 3, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_153": {
                "variable": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling1d(layer1, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_tf, 35]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_154": {
                "variable": {
                    "value": "dense2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool1, [self.batch_tf, 35])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "dim_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config['dim_x']",
                            "Subscript"
                        ],
                        [
                            "self.config['dim_x']",
                            "Subscript"
                        ],
                        [
                            "self.config['dim_x']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_155": {
                "variable": {
                    "value": "dense2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dense2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out1, dim_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(dense2, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_160": {
                "variable": {
                    "value": "sample_uy",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(sample_in, sample_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRUCell_162": {
                "variable": {
                    "value": "rnn_recog",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dynamic_rnn_164": {
                "variable": {
                    "value": "(_, recog_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "rnn_recog",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.GRUCell(16)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "tf.reverse(sample_uy, axis=[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_recog.zero_state(self.batch_tf, dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "RNN_recog",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_168": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "recog_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(rnn_recog, tf.reverse(sample_uy, axis=[1]), initial_state=initial_state, dtype=tf.float64, scope='RNN_recog')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "dim_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config['dim_x']",
                            "Subscript"
                        ],
                        [
                            "self.config['dim_x']",
                            "Subscript"
                        ],
                        [
                            "self.config['dim_x']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_169": {
                "variable": {
                    "value": "x_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(dense, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_118": {
                "x": {
                    "value": "self.zeta_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_127": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, samples, 1), dtype=tf.float64), [1, 1, dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sqrt(fvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_58": {
                "input": {
                    "value": "u_dub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(self.sample_in, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(u_dub, axis=2), [1, 1, samples, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_75": {
                "input": {
                    "value": "self.sample_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_81": {
                "input": {
                    "value": "tf.cholesky(k_prior)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_divergence_86": {
                "y_true": {
                    "value": "zeta_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.distributions.MultivariateNormalDiag(loc=tf.transpose(self.zeta_mean), scale_diag=tf.sqrt(tf.transpose(self.zeta_var)))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "zeta_prior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.distributions.MultivariateNormalTriL(loc=tf.zeros((dim_x, ind_pnt_num), dtype=tf.float64), scale_tril=scale_prior)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_93": {
                "x": {
                    "value": "self.pred_mean - self.sample_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_93": {
                "x": {
                    "value": "self.pred_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_127": {
                "x": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conditional(in_t_reshape, self.zeta_pos, self.kern, self.zeta_mean, tf.sqrt(self.zeta_var))",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, dim_x))",
                            "Call"
                        ],
                        [
                            "fvar + self.var_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_144": {
                "input": {
                    "value": "x_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._recog_model(self.sample_in, self.sample_out)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "sample_out[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "tf.concat((x_0, pad), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(x_0, axis=1), [1, samples, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(dense2, axis=1) + tf.zeros((self.batch_tf, samples, dim_x), dtype=tf.float64)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(dense, axis=1), [1, samples, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_157": {
                "input": {
                    "value": "dense2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(out1, dim_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(dense2, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "shape": {
                    "value": "(self.batch_tf, samples, dim_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reverse_165": {
                "tensor": {
                    "value": "sample_uy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((sample_in, sample_out), axis=2)",
                            "Call"
                        ],
                        [
                            "sample_uy[:, :recog_len, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(sample_uy, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat((sample_in, sample_out), axis=2)",
                            "Call"
                        ],
                        [
                            "sample_uy[:, :recog_len, :]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_169": {
                "input": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(recog_state, dim_x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_74": {
                "x": {
                    "value": "var_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(var_y_exp, [self.batch_tf, self.seq_len_tf, samples, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_81": {
                "input": {
                    "value": "k_prior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kern.K(self.zeta_pos, self.zeta_pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_83": {
                "shape": {
                    "value": "(dim_x, ind_pnt_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_85": {
                "a": {
                    "value": "self.zeta_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_85": {
                "x": {
                    "value": "tf.transpose(self.zeta_var)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cbfssm/model/tf_transform.py": {
        "tensorflow": {
            "convert_to_tensor_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_21": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cbfssm/model/voliro.py": {
        "tensorflow": {
            "constant_36": {
                "variable": {
                    "value": "self.alloc_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._alloc_matrtix()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_37": {
                "variable": {
                    "value": "self.rotor_force_constant",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_38": {
                "variable": {
                    "value": "self.rotor_speed_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1700",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_39": {
                "variable": {
                    "value": "self.mass_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0 / 4.04",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_40": {
                "variable": {
                    "value": "self.inertia_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[1.0 / 0.078359127, 1.0 / 0.081797886, 1.0 / 0.1533554115]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_41": {
                "variable": {
                    "value": "self.gravity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 9.81]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "self.var_x_unc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "backward(self.config['var_x'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "self.var_y_unc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "backward(self.config['var_y'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_51": {
                "variable": {
                    "value": "self.var_z_unc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "backward(self.config['var_z'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_95": {
                "variable": {
                    "value": "self.local_coo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "local_coo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_99": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.local_coo",
                            "Attribute"
                        ]
                    ]
                }
            },
            "expand_dims_100": {
                "input": {
                    "value": "self.alloc_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_101": {
                "variable": {
                    "value": "a_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(self.alloc_m, axis=0), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(a_tile, [shape[0], shape[1], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[shape[0], shape[1], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_102": {
                "variable": {
                    "value": "b_tile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.local_coo",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(self.alloc_m, axis=0), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(a_tile, [shape[0], shape[1], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "b_tile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(data_in, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "in_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.local_coo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_tf * self.seq_len_tf, self.gp_dim_in_f)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_f.predict(in_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, self.seq_len_tf, self.gp_dim_out_f))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, self.force_torque[..., :3])",
                            "Call"
                        ],
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, self.gp_dim_out_b))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :self.gp_dim_out_b])",
                            "Call"
                        ],
                        [
                            "self.symplectic_euler(x_t, u_t)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf, self.seq_len_tf, self.gp_dim_out_f)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_f.predict(in_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, self.seq_len_tf, self.gp_dim_out_f))",
                            "Call"
                        ],
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, self.gp_dim_out_b))",
                            "Call"
                        ],
                        [
                            "self.var_x",
                            "Attribute"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(fvar, axis=0), axis=0), [self.batch_tf, samples, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf, self.seq_len_tf, self.gp_dim_out_f)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_113": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_f.predict(in_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, self.seq_len_tf, self.gp_dim_out_f))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, self.force_torque[..., :3])",
                            "Call"
                        ],
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, self.gp_dim_out_b))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :self.gp_dim_out_b])",
                            "Call"
                        ],
                        [
                            "self.symplectic_euler(x_t, u_t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.force_torque[..., :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_114": {
                "variable": {
                    "value": "out_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(fmean, self.force_torque[..., 3:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_115": {
                "variable": {
                    "value": "out_var",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(fvar, tf.zeros_like(self.force_torque[..., 3:]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_118": {
                "variable": {
                    "value": "out_mean_samp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(out_mean, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_119": {
                "variable": {
                    "value": "out_var_samp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(out_var, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_120": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.random_normal((self.batch_tf, self.seq_len_tf, samples, 1), dtype=self.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_122": {
                "variable": {
                    "value": "self.ft_gp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "out_mean_samp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(out_mean, axis=2), [1, 1, samples, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(eps, tf.sqrt(out_var_samp))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorArray_128": {
                "variable": {
                    "value": "y_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_130": {
                "variable": {
                    "value": "y_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.out_to_hidden(self.sample_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_131": {
                "variable": {
                    "value": "y_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(y_dub, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_134": {
                "variable": {
                    "value": "u_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.ft_gp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_135": {
                "variable": {
                    "value": "u_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_142": {
                "variable": {
                    "value": "prob_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_144": {
                "variable": {
                    "value": "y2_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "variable": {
                    "value": "y_init",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_tf, samples, self.gp_dim_out_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_148": {
                "variable": {
                    "value": "(u_final, y_final, y2_final, p_final, t_final, h_final)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda u, y, y2, p, t, h: t >= 0",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "self._backward_body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[self.u_array, self.y_array, y2_array, prob_array, self.seq_len_tf - 1, y_init]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_154": {
                "variable": {
                    "value": "y2_array",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y2_final.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_155": {
                "variable": {
                    "value": "out_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.out_to_hidden(self.sample_out), axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_156": {
                "variable": {
                    "value": "self.y_tilde",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "(out_dub, y2_array)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_158": {
                "variable": {
                    "value": "self.entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p_final.stack()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_166": {
                "variable": {
                    "value": "in_t",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(h, u_t, y_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_169": {
                "variable": {
                    "value": "in_t_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "in_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.local_coo, (self.batch_tf * self.seq_len_tf, self.gp_dim_in_f))",
                            "Call"
                        ],
                        [
                            "tf.concat((h, u_t, y_t), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf * samples, self.gp_dim_in_b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_172": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_f.predict(in_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, self.seq_len_tf, self.gp_dim_out_f))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, self.force_torque[..., :3])",
                            "Call"
                        ],
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, self.gp_dim_out_b))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :self.gp_dim_out_b])",
                            "Call"
                        ],
                        [
                            "self.symplectic_euler(x_t, u_t)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf, samples, self.gp_dim_out_b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_173": {
                "variable": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_f.predict(in_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, self.seq_len_tf, self.gp_dim_out_f))",
                            "Call"
                        ],
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, self.gp_dim_out_b))",
                            "Call"
                        ],
                        [
                            "self.var_x",
                            "Attribute"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(fvar, axis=0), axis=0), [self.batch_tf, samples, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_tf, samples, self.gp_dim_out_b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_174": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_f.predict(in_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, self.seq_len_tf, self.gp_dim_out_f))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, self.force_torque[..., :3])",
                            "Call"
                        ],
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, self.gp_dim_out_b))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :self.gp_dim_out_b])",
                            "Call"
                        ],
                        [
                            "self.symplectic_euler(x_t, u_t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "in_t[:, :, :self.gp_dim_out_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_177": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.gp_dim_out_b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_178": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_f.predict(in_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, self.seq_len_tf, self.gp_dim_out_f))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, self.force_torque[..., :3])",
                            "Call"
                        ],
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fmean, (self.batch_tf, samples, self.gp_dim_out_b))",
                            "Call"
                        ],
                        [
                            "tf.add(fmean, in_t[:, :, :self.gp_dim_out_b])",
                            "Call"
                        ],
                        [
                            "self.symplectic_euler(x_t, u_t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(eps, tf.sqrt(fvar))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorArray_189": {
                "variable": {
                    "value": "prob_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_192": {
                "variable": {
                    "value": "x_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_197": {
                "variable": {
                    "value": "y_tilde_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.seq_len_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_199": {
                "variable": {
                    "value": "y_dub",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.y_tilde",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_202": {
                "variable": {
                    "value": "(u_final, x_final, y_final, p_final, t_final)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda u, x, y, p, t: t < self.seq_len_tf - 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "self._forward_body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[self.u_array, x_array, y_tilde_array, prob_array, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_207": {
                "variable": {
                    "value": "self.x_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "x_final.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_209": {
                "variable": {
                    "value": "self.kl_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p_final.stack()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_222": {
                "variable": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(fvar, axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.batch_tf, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_225": {
                "variable": {
                    "value": "var_y_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(self.var_y, axis=0), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.batch_tf, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_233": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_234": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fmean + k * y_diff",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(eps, tf.sqrt(sig))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_248": {
                "input": {
                    "value": "self.var_y[:self.dim_y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_249": {
                "variable": {
                    "value": "var_full",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var_y_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(self.var_y[:self.dim_y], 0), 0), 0)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self.batch_tf, self.seq_len_tf, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_253": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(obs, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_255": {
                "variable": {
                    "value": "self.loglik",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.log_probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_262": {
                "variable": {
                    "value": "n_alpha_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.config['n_beta'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_263": {
                "variable": {
                    "value": "n_beta_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.config['n_beta'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Beta_264": {
                "variable": {
                    "value": "n_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "n_alpha_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(self.config['n_beta'][0], dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "concentration0": {
                    "value": "n_beta_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(self.config['n_beta'][1], dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_265": {
                "variable": {
                    "value": "self.n_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "n_dist.log_prob(self.var_z / self.config['n_beta'][2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_268": {
                "variable": {
                    "value": "l_alpha_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.config['l_beta'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_269": {
                "variable": {
                    "value": "l_beta_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.config['l_beta'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Beta_270": {
                "variable": {
                    "value": "l_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "l_alpha_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(self.config['l_beta'][0], dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "concentration0": {
                    "value": "l_beta_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(self.config['l_beta'][1], dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_271": {
                "variable": {
                    "value": "self.l_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "l_dist.log_prob(self.gp_f.kern.lengthscales / self.config['l_beta'][2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_274": {
                "variable": {
                    "value": "(self.pred_mean, self.pred_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reciprocal_281": {
                "variable": {
                    "value": "divisor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(samples, dtype=self.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "negative_288": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loglik * loglik_factor[0] * divisor - self.kl_x * loglik_factor[0] * divisor + self.entropy * loglik_factor[1] * divisor + self.n_reg * loglik_factor[2] + self.l_reg * loglik_factor[2] - self.kl_z_f - self.kl_z_b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "AdamOptimizer_289": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Saver_291": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_292": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_92": {
                "variable": {
                    "value": "fac",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pwm[..., k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_336": {
                "input": {
                    "value": "tf.expand_dims(tf.norm(rot, axis=-1), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_338": {
                "values": {
                    "value": "(pos, rot, linvel, angvel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_342": {
                "values": {
                    "value": "(y[..., 0:3], y[..., 12:16])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_42": {
                "x": {
                    "value": "self.rotor_speed_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_45": {
                "x": {
                    "value": "tf.shape(timesteps)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(a_tile, b_tile)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_118": {
                "input": {
                    "value": "out_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((fmean, self.force_torque[..., 3:]), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_119": {
                "input": {
                    "value": "out_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((fvar, tf.zeros_like(self.force_torque[..., 3:])), axis=2)",
                            "Call"
                        ],
                        [
                            "out_var + self.var_z",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_122": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, self.seq_len_tf, samples, 1), dtype=self.dtype), [1, 1, 1, 6])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype), [1, 1, self.gp_dim_out_b])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype), [1, 1, self.dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sqrt(out_var_samp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_131": {
                "input": {
                    "value": "y_dub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(self.out_to_hidden(self.sample_out), perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(y_dub, axis=2), [1, 1, samples, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(self.y_tilde, perm=[1, 0, 2, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_155": {
                "input": {
                    "value": "self.out_to_hidden(self.sample_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_178": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, self.seq_len_tf, samples, 1), dtype=self.dtype), [1, 1, 1, 6])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype), [1, 1, self.gp_dim_out_b])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype), [1, 1, self.dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sqrt(fvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_183": {
                "input_tensor": {
                    "value": "tf.log(c * fvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_222": {
                "input": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_f.predict(in_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, self.seq_len_tf, self.gp_dim_out_f))",
                            "Call"
                        ],
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, self.gp_dim_out_b))",
                            "Call"
                        ],
                        [
                            "self.var_x",
                            "Attribute"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(fvar, axis=0), axis=0), [self.batch_tf, samples, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_225": {
                "input": {
                    "value": "self.var_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reciprocal_229": {
                "x": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_y_tiled + fvar",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_231": {
                "shape": {
                    "value": "(self.batch_tf, samples, self.dim_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_234": {
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, self.seq_len_tf, samples, 1), dtype=self.dtype), [1, 1, 1, 6])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype), [1, 1, self.gp_dim_out_b])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.random_normal((self.batch_tf, samples, 1), dtype=self.dtype), [1, 1, self.dim_x])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sqrt(sig)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_239": {
                "input_tensor": {
                    "value": "kl_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(fvar) - tf.log(sig) + (sig + tf.pow(mu - fmean, 2.0)) / fvar - 1.0",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum(kl_reg)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_253": {
                "input": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_to_hidden(self.sample_out)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(obs, 2), [1, 1, samples, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_281": {
                "value": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config['samples']",
                            "Subscript"
                        ],
                        [
                            "self.config['samples']",
                            "Subscript"
                        ],
                        [
                            "self.config['samples']",
                            "Subscript"
                        ],
                        [
                            "self.config['samples']",
                            "Subscript"
                        ],
                        [
                            "self.config['samples']",
                            "Subscript"
                        ],
                        [
                            "self.config['samples']",
                            "Subscript"
                        ],
                        [
                            "self.config['samples']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_336": {
                "input": {
                    "value": "tf.norm(rot, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_115": {
                "input": {
                    "value": "self.force_torque[..., 3:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_122": {
                "x": {
                    "value": "out_var_samp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(out_var, axis=2), [1, 1, samples, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_178": {
                "x": {
                    "value": "fvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gp_f.predict(in_t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, self.seq_len_tf, self.gp_dim_out_f))",
                            "Call"
                        ],
                        [
                            "self.gp_b.predict(in_t_reshape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fvar, (self.batch_tf, samples, self.gp_dim_out_b))",
                            "Call"
                        ],
                        [
                            "self.var_x",
                            "Attribute"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(fvar, axis=0), axis=0), [self.batch_tf, samples, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_183": {
                "x": {
                    "value": "c * fvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_232": {
                "x": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k in range(6)",
                            "Call"
                        ],
                        [
                            "fvar * tf.reciprocal(s)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_234": {
                "x": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((self.batch_tf, samples, self.dim_x), dtype=self.dtype) - k",
                            "BinOp"
                        ],
                        [
                            "tf.square(sig) * fvar + tf.square(k) * var_y_tiled",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_251": {
                "x": {
                    "value": "var_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(var_y_exp, [self.batch_tf, self.seq_len_tf, samples, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_336": {
                "tensor": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[..., 3:7]",
                            "Subscript"
                        ],
                        [
                            "rot / tf.tile(tf.expand_dims(tf.norm(rot, axis=-1), axis=-1), [1, 1, 4])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_45": {
                "input": {
                    "value": "timesteps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_in[0, :, 12]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_93": {
                "x": {
                    "value": "tilt[..., k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_94": {
                "x": {
                    "value": "tilt[..., k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_238": {
                "x": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((self.batch_tf, samples, self.dim_x), dtype=self.dtype) - k",
                            "BinOp"
                        ],
                        [
                            "tf.square(sig) * fvar + tf.square(k) * var_y_tiled",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_238": {
                "x": {
                    "value": "mu - fmean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "cbfssm/training/trainer.py": {
        "tensorflow": {
            "ConfigProto_22": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_28": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cbfssm/utils/quaternions.py": {
        "tensorflow": {
            "zeros_like_33": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "a.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_13": {
                "values": {
                    "value": "(el_0, el_1, el_2, el_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_34": {
                "values": {
                    "value": "(zeros[..., 0:1], a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_25": {
                "value": {
                    "value": "[1.0, -1.0, -1.0, -1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "a.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}