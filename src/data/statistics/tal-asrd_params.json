{
    "tal/wder_search.py": {
        "sklearn": {
            "PCA_102": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "pca_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "safe_sparse_dot_33": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "X.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_output": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DBSCAN_118": {
                "variable": {
                    "value": "engine",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "min_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "metric": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "METRIC_MAP[metric_name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "safe_sparse_dot_29": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "X.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_output": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BayesianGaussianMixture_126": {
                "variable": {
                    "value": "engine",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "weight_concentration_prior": {
                    "value": "weight_concentration_prior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cluster_params[0]",
                            "Subscript"
                        ]
                    ]
                },
                "n_init": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_145": {
                "variable": {
                    "value": "engine",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "affinity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cosine_distances",
                            "variable"
                        ],
                        [
                            "metric_name",
                            "variable"
                        ],
                        [
                            "pairwise_idp",
                            "variable"
                        ],
                        [
                            "pairwise_ndp",
                            "variable"
                        ]
                    ]
                },
                "linkage": {
                    "value": "linkage",
                    "type": "variable",
                    "possible_values": []
                },
                "distance_threshold": {
                    "value": "distance_threshold",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tal/wder_search_emb.py": {
        "sklearn": {
            "PCA_107": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "pca_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "safe_sparse_dot_40": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "X.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_output": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DBSCAN_135": {
                "variable": {
                    "value": "engine",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "min_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "metric": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "safe_sparse_dot_36": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "X.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_output": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_143": {
                "variable": {
                    "value": "engine",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "linkage",
                    "type": "variable",
                    "possible_values": []
                },
                "distance_threshold": {
                    "value": "distance_threshold",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "normalize_116": {
                "variable": {
                    "value": "emb_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(final_emb).cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(emb_tensor, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "np.clip(np.matrix(1.0 - torch.matmul(emb_tensor, emb_tensor.T).detach().cpu().numpy().astype(np.float64)), 0.0, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_380": {
                "variable": {
                    "value": "labels_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hyp_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyp_u_emb",
                            "variable"
                        ],
                        [
                            "[np.matrix(np.asarray(e_tup).reshape(e_shape)) for (e_tup, e_shape) in hyp_u_emb]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_191": {
                "variable": {
                    "value": "curr_speaker",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros_like(raw_s[0]) if raw_s else np.array([0.0])",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "matmul_118": {
                "input": {
                    "value": "emb_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(final_emb).cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(emb_tensor, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "np.clip(np.matrix(1.0 - torch.matmul(emb_tensor, emb_tensor.T).detach().cpu().numpy().astype(np.float64)), 0.0, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "emb_tensor.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tal/wder_search_emb_new_format.py": {
        "sklearn": {
            "PCA_107": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "pca_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "safe_sparse_dot_40": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "X.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_output": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DBSCAN_131": {
                "variable": {
                    "value": "engine",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "min_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "metric": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "safe_sparse_dot_36": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "X.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_output": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_139": {
                "variable": {
                    "value": "engine",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "linkage",
                    "type": "variable",
                    "possible_values": []
                },
                "distance_threshold": {
                    "value": "distance_threshold",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "normalize_115": {
                "variable": {
                    "value": "emb_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(final_emb).cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(emb_tensor, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "np.clip(np.matrix((1.0 - torch.matmul(emb_tensor, emb_tensor.T)).detach().cpu().numpy()).astype(np.float64), 0.0, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_116": {
                "input": {
                    "value": "emb_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(final_emb).cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(emb_tensor, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "np.clip(np.matrix((1.0 - torch.matmul(emb_tensor, emb_tensor.T)).detach().cpu().numpy()).astype(np.float64), 0.0, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "emb_tensor.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tal/__init__.py": {
        "torch": {
            "is_available_12": {
                "variable": {
                    "value": "cuda_available",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_37": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_94": {
                "variable": {
                    "value": "n_nan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_94": {
                "variable": {
                    "value": "n_nan",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_39": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "current_device_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tal/apply_role_names_unaligned.py": {
        "torch": {}
    },
    "tal/asr/data/aligned.py": {
        "torch": {
            "stack_255": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.nn.functional.pad(x, (0, max_audio_len - len(x)), value=0) for x in raw_audio]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_265": {
                "variable": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.nn.functional.pad(x, (0, max_text_len - len(x)), value=self.padding_idx) for x in text]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_267": {
                "variable": {
                    "value": "spk_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.nn.functional.pad(x, (0, max_text_len - len(x)), value=self.padding_idx) for x in spk_ids]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pad_256": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, max_audio_len - len(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_265": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, max_text_len - len(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_267": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, max_text_len - len(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tal/asr/data/audio.py": {
        "torch": {
            "stack_112": {
                "tensors": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tal/asr/data/baseline_speaker.py": {
        "torch": {
            "stack_229": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.nn.functional.pad(x, (0, max_audio_len - len(x)), value=0) for x in raw_audio]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_239": {
                "variable": {
                    "value": "speaker",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.nn.functional.pad(x, (0, max_speaker_len - len(x)), value=self.padding_idx) for x in speakers]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pad_230": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, max_audio_len - len(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_239": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, max_speaker_len - len(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tal/asr/data/segment.py": {
        "torch": {
            "stack_319": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.nn.functional.pad(x, (0, max_audio_len - len(x)), value=0) for x in raw_audio]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_329": {
                "variable": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.nn.functional.pad(x, (0, max_text_len - len(x)), value=self.padding_idx) for x in text]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "pad_320": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, max_audio_len - len(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_329": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, max_text_len - len(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tal/asr/data/util.py": {
        "torch": {
            "save_52": {
                "obj": {
                    "value": "x_wav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resample(x_wav)",
                            "Call"
                        ],
                        [
                            "x_wav.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_dir, hash_str + '.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_27": {
                "f": {
                    "value": "cached_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_dir, hash_str + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tal/asr/gen_embed.py": {
        "torch": {
            "load_37": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "dloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ASRAlignedDataset(args.train_data[0], system.tokenizer, num_utterances=1, max_segment_duration=args.max_secs, speaker_map_loc=os.path.join(args.train_data[0], 'speaker_map.json') if args.num_speakers > 0 else None)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "system.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "system.val_bsz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ASRAlignedCollater(system.tokenizer.pad_token_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_97": {
                "variable": {
                    "value": "speaker_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[:, len(system.tokenizer):]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "variable": {
                    "value": "cur_spk_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "speaker_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(logits[:, len(system.tokenizer):], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "speaker_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "system.model.embedding.weight[len(system.tokenizer):]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_120": {
                "obj": {
                    "value": "(all_speakers[:num_train], all_speaker_ids[:num_train])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "args.out_path + '.train.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "(all_speakers[num_train:], all_speaker_ids[num_train:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "args.out_path + '.valid.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "all_speakers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_speakers, cur_spk_embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "all_speaker_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_speaker_ids, speaker_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tal/asr/models.py": {
        "torch": {
            "Dropout_97": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.decoder_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "tds_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_decoder_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                }
            },
            "TransformerDecoder_119": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decoder_layer": {
                    "value": "ModRZTXDecoderLayer(d_model=d_decoder_hidden, dim_feedforward=d_decoder_hidden * 4, nhead=n_head, dropout=dropout, activation='relu')",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_decoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_303": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(hidden, hidden, kernel_size=kernel_size, stride=1, groups=groups, padding=kernel_size // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_312": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(hidden, hidden, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_321": {
                "variable": {
                    "value": "self.resweight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_360": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Sequential(nn.Conv1d(sizes[i - 1], sizes[i], kernel_size=kernel_size, stride=2, groups=input_size), nn.Sequential(*[TDSBlock(sizes[i], kernel_size, input_size, dropout=dropout) for _ in range(depths[i - 1])])) for i in range(1, len(sizes))]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_418": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_421": {
                "variable": {
                    "value": "self.spk_embed_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "tds_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_422": {
                "variable": {
                    "value": "self.spk_logit_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_speakers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "6008",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiheadAttention_493": {
                "variable": {
                    "value": "self.self_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "nhead",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiheadAttention_494": {
                "variable": {
                    "value": "self.multihead_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "nhead",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_497": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_498": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_499": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_501": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_502": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_503": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_504": {
                "variable": {
                    "value": "self.resweight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_505": {
                "variable": {
                    "value": "self.resweight_src",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_50": {
                "variable": {
                    "value": "mel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mel + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_106": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size if use_speaker_head else vocab_size + num_speakers",
                            "IfExp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.embedding_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_decoder_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size if use_speaker_head else vocab_size + num_speakers",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_112": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size if use_speaker_head else vocab_size + num_speakers",
                            "IfExp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "d_decoder_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_decoder_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size if use_speaker_head else vocab_size + num_speakers",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.spk_enc_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "tds_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_decoder_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                }
            },
            "TransformerDecoder_133": {
                "variable": {
                    "value": "self.spk_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decoder_layer": {
                    "value": "ModRZTXDecoderLayer(d_model=d_decoder_hidden, dim_feedforward=d_decoder_hidden * 4, nhead=n_head, dropout=dropout, activation='relu')",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_decoder_layers // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.speaker_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_decoder_hidden, spk_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "encoder_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_233": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_244": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(y_prev, x, tgt_mask=tgt_mask, memory_key_padding_mask=memory_key_padding_mask)",
                            "Call"
                        ],
                        [
                            "h.permute(1, 0, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "F.linear(h, self.embedding_proj.weight.t())",
                            "Call"
                        ],
                        [
                            "self.lm_head(h)",
                            "Call"
                        ],
                        [
                            "self.spk_decoder(y_prev, x, tgt_mask=tgt_mask, memory_key_padding_mask=memory_key_padding_mask)",
                            "Call"
                        ],
                        [
                            "h.permute(1, 0, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.speaker_head(h)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.embedding_proj.weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_279": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_454": {
                "variable": {
                    "value": "encoder_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_304": {
                "in_channels": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_308": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_313": {
                "in_channels": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_315": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_316": {
                "in_channels": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_317": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "d_decoder_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "spk_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_145": {
                "in_features": {
                    "value": "spk_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_speakers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "6008",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_233": {
                "*size": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_prev.size(0)",
                            "Call"
                        ],
                        [
                            "y_prev.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_prev.size(0)",
                            "Call"
                        ],
                        [
                            "y_prev.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_279": {
                "*size": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_prev.size(0)",
                            "Call"
                        ],
                        [
                            "y_prev.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ctx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_prev.size(0)",
                            "Call"
                        ],
                        [
                            "y_prev.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_361": {
                "*args": {
                    "value": "nn.Conv1d(sizes[i - 1], sizes[i], kernel_size=kernel_size, stride=2, groups=input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_526": {
                "input": {
                    "value": "self.linear1(tgt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_363": {
                "in_channels": {
                    "value": "sizes[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_366": {
                "*args": {
                    "value": "*[TDSBlock(sizes[i], kernel_size, input_size, dropout=dropout) for _ in range(depths[i - 1])]",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "tal/asr/system.py": {
        "torch": {
            "device_count_31": {
                "variable": {
                    "value": "self.num_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_38": {
                "variable": {
                    "value": "self.ce_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generated.size(0)",
                            "Call"
                        ],
                        [
                            "generated.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "audio_x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_558": {
                "variable": {
                    "value": "spk_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConcatDataset_808": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_810": {
                "variable": {
                    "value": "dist_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConcatDataset_834": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_835": {
                "variable": {
                    "value": "dist_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConcatDataset_861": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_862": {
                "variable": {
                    "value": "dist_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_125": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_153": {
                "variable": {
                    "value": "(scores, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "total_logprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logprobs + scores.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "total_logprobs.view(-1, cur_beam_size, vocab_size)",
                            "Call"
                        ],
                        [
                            "total_logprobs.flatten(start_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "generated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generated, best_tokens.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_534": {
                "variable": {
                    "value": "y_known",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "where_546": {
                "variable": {
                    "value": "y_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "rand_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand_like(y_prev, dtype=torch.half) < 0.01",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "torch.randint_like(y_prev, high=len(self.tokenizer))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_known[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "y[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.where(rand_mask, torch.randint_like(y_prev, high=len(self.tokenizer)), y_prev)",
                            "Call"
                        ],
                        [
                            "y_known[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "y[:, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_631": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LambdaLR_776": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lamb(self.model.parameters(), lr=scaled_lr)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda e: max(1 - e / total_steps, scaled_lr / 1000)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_811": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "dist_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.train_bsz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ASRAlignedCollater(self.tokenizer.pad_token_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_836": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "dist_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.val_bsz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ASRAlignedCollater(self.tokenizer.pad_token_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_863": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "dist_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.val_bsz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ASRAlignedCollater(self.tokenizer.pad_token_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_37": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_129": {
                "variable": {
                    "value": "lm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generated",
                            "variable"
                        ],
                        [
                            "generated",
                            "variable"
                        ],
                        [
                            "slice_tensor(model_input, history_start)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_136": {
                "variable": {
                    "value": "lm_logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_logits.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_323": {
                "tensors": {
                    "value": "jagged_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x[i, start[i]:end[i]] for i in range(x.size(0))]",
                            "ListComp"
                        ],
                        [
                            "[x[i, start[i]:] for i in range(x.size(0))]",
                            "ListComp"
                        ],
                        [
                            "[torch.nn.functional.pad(x, (0, max_len - len(x)), value=0) for x in jagged_tensors]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "log_softmax_366": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.decode(model_input, model_memory, causal_mask=False)",
                            "Call"
                        ],
                        [
                            "logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self.model.decode(model_input, model_memory, causal_mask=False)",
                            "Call"
                        ],
                        [
                            "torch.stack([logits[i, s] for (i, s) in enumerate(select_index)], dim=0)",
                            "Call"
                        ],
                        [
                            "logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_386": {
                "variable": {
                    "value": "generated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generated, logprobs.argmax(dim=-1).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_392": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l.src_attn_weights for l in self.model.decoder.layers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_392": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_396": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_weights[i, s] for (i, s) in enumerate(select_index)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_421": {
                "variable": {
                    "value": "is_stalling",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "num_no_improve >= stall_patience",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "min_480": {
                "variable": {
                    "value": "chunk_start",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chunk_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([0 for _ in range(batch_size)])",
                            "Call"
                        ],
                        [
                            "torch.min(chunk_start, encoder_lens - chunk_size)",
                            "Call"
                        ],
                        [
                            "chunk_start + int(chunk_size * shift_prct)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_482": {
                "variable": {
                    "value": "history_start",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "history_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([0 for _ in range(batch_size)])",
                            "Call"
                        ],
                        [
                            "torch.max(history_start, torch.tensor(max(generated.size(1) - max_positions, 0)))",
                            "Call"
                        ],
                        [
                            "history_start + (del_prct * (history_size - 1)).floor().long()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_582": {
                "tensors": {
                    "value": "[x[k] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_582": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_635": {
                "variable": {
                    "value": "y_known",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_191": {
                "variable": {
                    "value": "spk_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(spk_embeds, pred_speaker.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_320": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, beam_size, -1)",
                            "Call"
                        ],
                        [
                            "x.gather(1, best_beams.unsqueeze(-1).expand(-1, -1, x.size(-1)))",
                            "Call"
                        ],
                        [
                            "x.view(batch_size * beam_size, -1)",
                            "Call"
                        ],
                        [
                            "x.to('cuda')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, max_len - len(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_357": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logits[i, s] for (i, s) in enumerate(select_index)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_370": {
                "variable": {
                    "value": "lm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generated",
                            "variable"
                        ],
                        [
                            "generated",
                            "variable"
                        ],
                        [
                            "slice_tensor(model_input, history_start)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_382": {
                "variable": {
                    "value": "lm_logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lm_logits.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_534": {
                "data": {
                    "value": "len(self.tokenizer) + self.args.num_speakers - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_like_544": {
                "input": {
                    "value": "y_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_known[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "y[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.where(rand_mask, torch.randint_like(y_prev, high=len(self.tokenizer)), y_prev)",
                            "Call"
                        ],
                        [
                            "y_known[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "y[:, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_like_546": {
                "input": {
                    "value": "y_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_known[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "y[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.where(rand_mask, torch.randint_like(y_prev, high=len(self.tokenizer)), y_prev)",
                            "Call"
                        ],
                        [
                            "y_known[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "y[:, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "high": {
                    "value": "len(self.tokenizer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "len(self.tokenizer) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_363": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.decode(model_input, model_memory, causal_mask=False)",
                            "Call"
                        ],
                        [
                            "logits[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self.model.decode(model_input, model_memory, causal_mask=False)",
                            "Call"
                        ],
                        [
                            "torch.stack([logits[i, s] for (i, s) in enumerate(select_index)], dim=0)",
                            "Call"
                        ],
                        [
                            "logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "any_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_376": {
                "variable": {
                    "value": "lm_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lm_logits[i, s] for (i, s) in enumerate(select_index)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_405": {
                "start": {
                    "value": "attn_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_482": {
                "data": {
                    "value": "max(generated.size(1) - max_positions, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_635": {
                "data": {
                    "value": "len(self.tokenizer) + self.args.num_speakers - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_704": {
                "variable": {
                    "value": "utt[attention]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_705": {
                "variable": {
                    "value": "utt[chunkStart]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "chunk_starts",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_370": {
                "data": {
                    "value": "len(self.tokenizer) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tal/asr/test.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.lm_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "device_count_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tal/asr/tokenizers/__init__.py": {
        "torch": {}
    },
    "tal/asr/train.py": {
        "torch": {
            "device_count_27": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_49": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_63": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "state_dict[model.embedding.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedding, torch.empty(args.num_speakers, embedding.size(1)).uniform_(-1 / embedding.size(1), 1 / embedding.size(1)))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_74": {
                "*size": {
                    "value": "args.num_speakers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "embedding.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tal/asr/train_embed.py": {
        "torch": {
            "device_count_153": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_26": {
                "variable": {
                    "value": "self.num_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[:, :1]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "support.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_63": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(examples, support.transpose(1, 2)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_104": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "scaled_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.lr * math.sqrt(effect_bsz) if self.args.lr else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_114": {
                "variable": {
                    "value": "(speakers, ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.train_data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DistributedSampler_116": {
                "variable": {
                    "value": "dist_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ContrastiveDataset(speakers, ids)",
                            "Call"
                        ],
                        [
                            "ContrastiveDataset(speakers, ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_127": {
                "variable": {
                    "value": "(speakers, ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.valid_data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DistributedSampler_129": {
                "variable": {
                    "value": "dist_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ContrastiveDataset(speakers, ids)",
                            "Call"
                        ],
                        [
                            "ContrastiveDataset(speakers, ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_117": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ContrastiveDataset(speakers, ids)",
                            "Call"
                        ],
                        [
                            "ContrastiveDataset(speakers, ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "dist_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.train_bsz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ContrastiveCollator()",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_130": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ContrastiveDataset(speakers, ids)",
                            "Call"
                        ],
                        [
                            "ContrastiveDataset(speakers, ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "dist_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.val_bsz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ContrastiveCollator()",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_80": {
                "tensors": {
                    "value": "[x[k] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_92": {
                "tensors": {
                    "value": "[x[k] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tal/asr/transcribe.py": {
        "torch": {
            "load_244": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_185": {
                "variable": {
                    "value": "batch_audio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F.pad(a, (0, max_audio_len - len(a)), 'constant', 0.0) for a in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_186": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, max_audio_len - len(a))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tal/asr/util.py": {
        "torch": {
            "zeros_like_8": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_24": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tal/baseline/reconcile.py": {
        "torch": {
            "load_39": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "wloc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_folder, 'checkpoints', '_ckpt_epoch_28.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "argmax_84": {
                "variable": {
                    "value": "pred_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.model.decode(feat)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cosine_similarity_221": {
                "x1": {
                    "value": "features[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "features[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mode_191": {
                "input": {
                    "value": "torch.argmax(model.model.decode(feat), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_191": {
                "input": {
                    "value": "model.model.decode(feat)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tal/baseline/speaker_system.py": {
        "torch": {
            "device_count_31": {
                "variable": {
                    "value": "self.num_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_38": {
                "variable": {
                    "value": "self.ce_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConcatDataset_167": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_170": {
                "variable": {
                    "value": "dist_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_139": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lamb(self.model.parameters(), lr=scaled_lr)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda e: max(1 - e / total_steps, scaled_lr / 1000)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_171": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.utils.data.ConcatDataset(dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "dist_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.train_bsz if split == 'train' else self.val_bsz",
                    "type": "IfExp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "SDUtteranceCollater(self.pad_speaker)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_37": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_103": {
                "tensors": {
                    "value": "[x[k] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tal/baseline/train.py": {
        "torch": {
            "device_count_27": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_49": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "tal/diarization/features/wav2vec/__init__.py": {
        "torch": {
            "load_59": {
                "variable": {
                    "value": "cp",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_path, WAV2VEC_FILENAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tal/diarization/features/wav2vec/extract_features_callhome.py": {
        "torch": {
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tal/diarization/features/wav2vec/extract_features_tal.py": {
        "torch": {
            "no_grad_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tal/diarization/uisrnn/loss_func.py": {
        "torch": {
            "sum_27": {
                "variable": {
                    "value": "non_zero_entry_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "streched_tensor[:, 0] != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "mm_28": {
                "variable": {
                    "value": "weighted_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((input_tensor - target_tensor) ** 2).view(-1, observation_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.diag(weight.float().view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_30": {
                "input": {
                    "value": "weight.float().view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_66": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "variable"
                        ]
                    ]
                }
            },
            "mean_31": {
                "input": {
                    "value": "weighted_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(((input_tensor - target_tensor) ** 2).view(-1, observation_dim), torch.diag(weight.float().view(-1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_50": {
                "input": {
                    "value": "sigma2",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tal/diarization/uisrnn/train.py": {
        "torch": {
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tal/diarization/uisrnn/train_large.py": {
        "torch": {
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tal/diarization/uisrnn/uisrnn.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self.linear_mean1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.linear_mean2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "observation_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_77": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and args.enable_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "self.rnn_init_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(args.rnn_depth, 1, args.rnn_hidden_size).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "variable": {
                    "value": "self.sigma2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sigma2 * torch.ones(self.observation_dim).to(self.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_142": {
                "variable": {
                    "value": "var_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_144": {
                "variable": {
                    "value": "self.rnn_init_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(var_dict['rnn_init_hidden']).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_150": {
                "variable": {
                    "value": "self.sigma2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(var_dict['sigma2']).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_27": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_29": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_36": {
                "variable": {
                    "value": "(output_seq, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_120": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': self.rnn_model.parameters()}, {'params': self.rnn_init_hidden}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_128": {
                "obj": {
                    "value": "{'rnn_state_dict': self.rnn_model.state_dict(), 'rnn_init_hidden': self.rnn_init_hidden.detach().cpu().numpy(), 'transition_bias': self.transition_bias, 'transition_bias_denominator': self.transition_bias_denominator, 'crp_alpha': self.crp_alpha, 'sigma2': self.sigma2.detach().cpu().numpy()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cumsum_256": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_mean2(F.relu(self.linear_mean1(output_seq)))",
                            "Call"
                        ],
                        [
                            "torch.cumsum(mean, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.diag(1.0 / torch.arange(1, mean_size[0] + 1).float().to(self.device)), mean.view(mean_size[0], -1))",
                            "Call"
                        ],
                        [
                            "mean.view(mean_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_258": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(1.0 / torch.arange(1, mean_size[0] + 1).float().to(self.device))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "mean.view(mean_size[0], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_273": {
                "variable": {
                    "value": "num_non_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(weight != 0).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_273": {
                "variable": {
                    "value": "num_non_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_38": {
                "input": {
                    "value": "self.linear_mean1(output_seq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "args.rnn_depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.rnn_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_145": {
                "ndarray": {
                    "value": "var_dict['rnn_init_hidden']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "ndarray": {
                    "value": "var_dict['sigma2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__283": {
                "parameters": {
                    "value": "self.rnn_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.grad_max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_90": {
                "*size": {
                    "value": "self.observation_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_259": {
                "input": {
                    "value": "1.0 / torch.arange(1, mean_size[0] + 1).float().to(self.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_425": {
                "variable": {
                    "value": "init_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_522": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_517": {
                "ndarray": {
                    "value": "test_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(test_sequence, (args.test_iteration, 1))",
                            "Call"
                        ],
                        [
                            "autograd.Variable(torch.from_numpy(test_sequence).float()).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_260": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "mean_size[0] + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_426": {
                "*size": {
                    "value": "self.observation_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_402": {
                "input": {
                    "value": "new_beam_state.mean_set[cluster]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_431": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_mean2(F.relu(self.linear_mean1(output_seq)))",
                            "Call"
                        ],
                        [
                            "torch.cumsum(mean, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.diag(1.0 / torch.arange(1, mean_size[0] + 1).float().to(self.device)), mean.view(mean_size[0], -1))",
                            "Call"
                        ],
                        [
                            "mean.view(mean_size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tal/diarization/uisrnn/utils.py": {
        "torch": {
            "pack_padded_sequence_247": {
                "variable": {
                    "value": "packed_rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((sorted_seq_lengths[0], num_clusters, observation_dim))",
                            "Call"
                        ],
                        [
                            "np.zeros((sorted_seq_lengths[mini_batch[0]], batch_size, observation_dim))",
                            "Call"
                        ],
                        [
                            "autograd.Variable(torch.from_numpy(rnn_input).float()).to(device)",
                            "Call"
                        ],
                        [
                            "autograd.Variable(torch.from_numpy(rnn_input).float()).to(device)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sort(seq_lengths)[::-1]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_262": {
                "variable": {
                    "value": "packed_rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((sorted_seq_lengths[0], num_clusters, observation_dim))",
                            "Call"
                        ],
                        [
                            "np.zeros((sorted_seq_lengths[mini_batch[0]], batch_size, observation_dim))",
                            "Call"
                        ],
                        [
                            "autograd.Variable(torch.from_numpy(rnn_input).float()).to(device)",
                            "Call"
                        ],
                        [
                            "autograd.Variable(torch.from_numpy(rnn_input).float()).to(device)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_seq_lengths[mini_batch]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_246": {
                "ndarray": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((sorted_seq_lengths[0], num_clusters, observation_dim))",
                            "Call"
                        ],
                        [
                            "np.zeros((sorted_seq_lengths[mini_batch[0]], batch_size, observation_dim))",
                            "Call"
                        ],
                        [
                            "autograd.Variable(torch.from_numpy(rnn_input).float()).to(device)",
                            "Call"
                        ],
                        [
                            "autograd.Variable(torch.from_numpy(rnn_input).float()).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_261": {
                "ndarray": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((sorted_seq_lengths[0], num_clusters, observation_dim))",
                            "Call"
                        ],
                        [
                            "np.zeros((sorted_seq_lengths[mini_batch[0]], batch_size, observation_dim))",
                            "Call"
                        ],
                        [
                            "autograd.Variable(torch.from_numpy(rnn_input).float()).to(device)",
                            "Call"
                        ],
                        [
                            "autograd.Variable(torch.from_numpy(rnn_input).float()).to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tal/modules.py": {
        "torch": {
            "Dropout_43": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_46": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_46": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_47": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_49": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_50": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_47": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tal/optimizers.py": {
        "torch": {
            "mul_146": {
                "input": {
                    "value": "r_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(exp_avg_sq_row / exp_avg_sq_row.mean(dim=-1).unsqueeze(-1)).rsqrt_().unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "c_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_avg_sq_col.unsqueeze(-2).rsqrt()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_250": {
                "variable": {
                    "value": "param_state[slow_param]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "fast.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_40": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_41": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_361": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_363": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_176": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data.float()",
                            "Call"
                        ],
                        [
                            "p.grad.data.float()",
                            "Call"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "state[exp_avg_sq_row]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "state[exp_avg_sq_col]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-2] + grad_shape[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_181": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data.float()",
                            "Call"
                        ],
                        [
                            "p.grad.data.float()",
                            "Call"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rsqrt_215": {
                "input": {
                    "value": "exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad ** 2 + group['eps'][0]",
                            "BinOp"
                        ],
                        [
                            "exp_avg",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "tal/utils/aligned_to_wder_format.py": {
        "torch": {
            "device_75": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "this_ep_features",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ep_sd_features[ep]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_211": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(a, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(a, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_212": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_213": {
                "variable": {
                    "value": "hyp_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_213": {
                "variable": {
                    "value": "hyp_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_307": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_309": {
                "variable": {
                    "value": "this_ep_features",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ep_sd_features[ep]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_361": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(a, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(a, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_362": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_363": {
                "variable": {
                    "value": "hyp_speaker_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_363": {
                "variable": {
                    "value": "hyp_speaker_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_172": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(a, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(a, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_173": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_174": {
                "variable": {
                    "value": "word_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(b, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_174": {
                "variable": {
                    "value": "word_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tal/utils/average_weights.py": {
        "torch": {
            "save_29": {
                "obj": {
                    "value": "{'state_dict': current_state}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.out_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_23": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_paths",
                            "variable"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "tal/utils/eval_transcripts.py": {
        "torch": {}
    },
    "tal/utils/expand_speakers.py": {
        "torch": {
            "load_14": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.in_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cat_23": {
                "variable": {
                    "value": "current_state[model.token_embedding.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedding, new_add)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "current_state[model.lm_head.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedding, new_add)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_27": {
                "obj": {
                    "value": "{'state_dict': current_state}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.out_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_22": {
                "*size": {
                    "value": "(10000, embedding.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tal/vad/__init__.py": {
        "torch": {
            "load_195": {
                "variable": {
                    "value": "sad",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pyannote/pyannote-audio",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "sad_ami",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}