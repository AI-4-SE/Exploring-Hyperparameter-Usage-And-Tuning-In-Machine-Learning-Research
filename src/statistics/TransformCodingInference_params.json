{
    "operations.py": {
        "sklearn": {
            "KMeans_15": {
                "variable": {
                    "value": "kmeans",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "2 ** num_bits",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "ReLuPCA_80": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ConvBNPCA_162": {
                "base_class_0": {
                    "value": "torch.nn.Conv2d",
                    "possible_values": []
                }
            },
            "Round_278": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "svd_29": {
                "variable": {
                    "value": "(u, s, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "possible_values": [
                        [
                            "torch.matmul(im, im.t()) / im.shape[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_185": {
                "variable": {
                    "value": "self.weight.data",
                    "possible_values": []
                },
                "input": {
                    "value": "self.u.t()",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight.data",
                    "possible_values": []
                }
            },
            "matmul_191": {
                "variable": {
                    "value": "self.bias.data",
                    "possible_values": []
                },
                "input": {
                    "value": "self.u.t()",
                    "possible_values": []
                },
                "other": {
                    "value": "self.bias.data",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "u",
                    "possible_values": []
                },
                "data": {
                    "value": "quantize1d_kmeans(u.cpu().detach().numpy(), num_bits=8)",
                    "possible_values": []
                }
            },
            "ReLU6_94": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "mean_108": {
                "variable": {
                    "value": "mn",
                    "possible_values": []
                },
                "input": {
                    "value": "im",
                    "possible_values": [
                        [
                            "featuresReshape(input, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "im - mn",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(input, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "featuresReshape(im, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "im - self.mn",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(input, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "matmul_120": {
                "variable": {
                    "value": "imProj",
                    "possible_values": []
                },
                "input": {
                    "value": "self.u.t()",
                    "possible_values": []
                },
                "other": {
                    "value": "im",
                    "possible_values": [
                        [
                            "featuresReshape(input, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "im - mn",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(input, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "featuresReshape(im, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "im - self.mn",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(input, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "mult",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "add",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_126": {
                "variable": {
                    "value": "dynMax",
                    "possible_values": []
                },
                "input": {
                    "value": "imProj",
                    "possible_values": [
                        [
                            "torch.matmul(self.u.t(), im)",
                            "Call"
                        ],
                        [
                            "imProj * mult + add",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u, imProj)",
                            "Call"
                        ],
                        [
                            "imProj - torch.mean(imProj, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "imProj + mn",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u.t(), im)",
                            "Call"
                        ],
                        [
                            "featuresReshape(im, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "imProj * mult + add",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u, imProj)",
                            "Call"
                        ],
                        [
                            "imProj + self.mn",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_127": {
                "variable": {
                    "value": "dynMin",
                    "possible_values": []
                },
                "input": {
                    "value": "imProj",
                    "possible_values": [
                        [
                            "torch.matmul(self.u.t(), im)",
                            "Call"
                        ],
                        [
                            "imProj * mult + add",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u, imProj)",
                            "Call"
                        ],
                        [
                            "imProj - torch.mean(imProj, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "imProj + mn",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u.t(), im)",
                            "Call"
                        ],
                        [
                            "featuresReshape(im, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "imProj * mult + add",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u, imProj)",
                            "Call"
                        ],
                        [
                            "imProj + self.mn",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_143": {
                "variable": {
                    "value": "imProj",
                    "possible_values": []
                },
                "input": {
                    "value": "self.u",
                    "possible_values": []
                },
                "other": {
                    "value": "imProj",
                    "possible_values": [
                        [
                            "torch.matmul(self.u.t(), im)",
                            "Call"
                        ],
                        [
                            "imProj * mult + add",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u, imProj)",
                            "Call"
                        ],
                        [
                            "imProj - torch.mean(imProj, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "imProj + mn",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u.t(), im)",
                            "Call"
                        ],
                        [
                            "featuresReshape(im, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "imProj * mult + add",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u, imProj)",
                            "Call"
                        ],
                        [
                            "imProj + self.mn",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_148": {
                "variable": {
                    "value": "self.mse",
                    "possible_values": []
                },
                "input": {
                    "value": "(imProj - im) ** 2",
                    "possible_values": []
                }
            },
            "Tensor_188": {
                "variable": {
                    "value": "zeros",
                    "possible_values": []
                }
            },
            "Parameter_189": {
                "variable": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "zeros",
                    "possible_values": [
                        [
                            "torch.Tensor(self.out_channels).zero_().type(self.weight.data.type())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_228": {
                "variable": {
                    "value": "mult",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_229": {
                "variable": {
                    "value": "add",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_234": {
                "variable": {
                    "value": "dynMax",
                    "possible_values": []
                },
                "input": {
                    "value": "imProj",
                    "possible_values": [
                        [
                            "torch.matmul(self.u.t(), im)",
                            "Call"
                        ],
                        [
                            "imProj * mult + add",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u, imProj)",
                            "Call"
                        ],
                        [
                            "imProj - torch.mean(imProj, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "imProj + mn",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u.t(), im)",
                            "Call"
                        ],
                        [
                            "featuresReshape(im, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "imProj * mult + add",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u, imProj)",
                            "Call"
                        ],
                        [
                            "imProj + self.mn",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_235": {
                "variable": {
                    "value": "dynMin",
                    "possible_values": []
                },
                "input": {
                    "value": "imProj",
                    "possible_values": [
                        [
                            "torch.matmul(self.u.t(), im)",
                            "Call"
                        ],
                        [
                            "imProj * mult + add",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u, imProj)",
                            "Call"
                        ],
                        [
                            "imProj - torch.mean(imProj, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "imProj + mn",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u.t(), im)",
                            "Call"
                        ],
                        [
                            "featuresReshape(im, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "imProj * mult + add",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u, imProj)",
                            "Call"
                        ],
                        [
                            "imProj + self.mn",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_252": {
                "variable": {
                    "value": "imProj",
                    "possible_values": []
                },
                "input": {
                    "value": "self.u",
                    "possible_values": []
                },
                "other": {
                    "value": "imProj",
                    "possible_values": [
                        [
                            "torch.matmul(self.u.t(), im)",
                            "Call"
                        ],
                        [
                            "imProj * mult + add",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u, imProj)",
                            "Call"
                        ],
                        [
                            "imProj - torch.mean(imProj, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "imProj + mn",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u.t(), im)",
                            "Call"
                        ],
                        [
                            "featuresReshape(im, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "imProj * mult + add",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u, imProj)",
                            "Call"
                        ],
                        [
                            "imProj + self.mn",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_260": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "input.view(-1, Ct, H, W)",
                            "Call"
                        ],
                        [
                            "input.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, microBlockSz, W, Ct).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, microBlockSz, microBlockSz, Ct).permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "input.t()",
                            "Call"
                        ],
                        [
                            "input.view(-1, Ct, microBlockSz, microBlockSz).permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, H, microBlockSz, Ct).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, H, W, Ct).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(N, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.relu(input)",
                            "Call"
                        ],
                        [
                            "featuresReshapeBack(imProj, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "featuresReshapeBack(imProj, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "eye_24": {
                "n": {
                    "value": "im.shape[0]",
                    "possible_values": []
                }
            },
            "ones_24": {
                "*size": {
                    "value": "im.shape[0]",
                    "possible_values": []
                }
            },
            "matmul_27": {
                "input": {
                    "value": "im",
                    "possible_values": [
                        [
                            "featuresReshape(input, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "im - mn",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(input, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "featuresReshape(im, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "im - self.mn",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(input, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "im.t()",
                    "possible_values": []
                }
            },
            "conv2d_202": {
                "variable": {
                    "value": "im",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "input.view(-1, Ct, H, W)",
                            "Call"
                        ],
                        [
                            "input.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, microBlockSz, W, Ct).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, microBlockSz, microBlockSz, Ct).permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "input.t()",
                            "Call"
                        ],
                        [
                            "input.view(-1, Ct, microBlockSz, microBlockSz).permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, H, microBlockSz, Ct).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, H, W, Ct).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(N, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.relu(input)",
                            "Call"
                        ],
                        [
                            "featuresReshapeBack(imProj, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "featuresReshapeBack(imProj, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "mean_208": {
                "variable": {
                    "value": "self.mn",
                    "possible_values": []
                },
                "input": {
                    "value": "im",
                    "possible_values": [
                        [
                            "featuresReshape(input, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "im - mn",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(input, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "featuresReshape(im, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "im - self.mn",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(input, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "matmul_214": {
                "variable": {
                    "value": "imProj",
                    "possible_values": []
                },
                "input": {
                    "value": "self.u.t()",
                    "possible_values": []
                },
                "other": {
                    "value": "im",
                    "possible_values": [
                        [
                            "featuresReshape(input, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "im - mn",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(input, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "featuresReshape(im, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "im - self.mn",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(input, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_217": {
                "variable": {
                    "value": "im2",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "input.view(-1, Ct, H, W)",
                            "Call"
                        ],
                        [
                            "input.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, microBlockSz, W, Ct).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, microBlockSz, microBlockSz, Ct).permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "input.t()",
                            "Call"
                        ],
                        [
                            "input.view(-1, Ct, microBlockSz, microBlockSz).permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, H, microBlockSz, Ct).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, H, W, Ct).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(N, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.relu(input)",
                            "Call"
                        ],
                        [
                            "featuresReshapeBack(imProj, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "featuresReshapeBack(imProj, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "conv2d_223": {
                "variable": {
                    "value": "im",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "input.view(-1, Ct, H, W)",
                            "Call"
                        ],
                        [
                            "input.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, microBlockSz, W, Ct).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, microBlockSz, microBlockSz, Ct).permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "input.t()",
                            "Call"
                        ],
                        [
                            "input.view(-1, Ct, microBlockSz, microBlockSz).permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, H, microBlockSz, Ct).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, H, W, Ct).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(N, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.relu(input)",
                            "Call"
                        ],
                        [
                            "featuresReshapeBack(imProj, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "F.conv2d(input, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "featuresReshapeBack(imProj, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "mean_146": {
                "input": {
                    "value": "imProj",
                    "possible_values": [
                        [
                            "torch.matmul(self.u.t(), im)",
                            "Call"
                        ],
                        [
                            "imProj * mult + add",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u, imProj)",
                            "Call"
                        ],
                        [
                            "imProj - torch.mean(imProj, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "imProj + mn",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u.t(), im)",
                            "Call"
                        ],
                        [
                            "featuresReshape(im, N, C, H, W, self.microBlockSz, self.channelsDiv)",
                            "Call"
                        ],
                        [
                            "imProj * mult + add",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.u, imProj)",
                            "Call"
                        ],
                        [
                            "imProj + self.mn",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cumsum_34": {
                "input": {
                    "value": "s",
                    "possible_values": [
                        [
                            "s[:cutIdx]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "s",
                    "possible_values": [
                        [
                            "s[:cutIdx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_198": {
                "*size": {
                    "value": "self.channels",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_220": {
                "input": {
                    "value": "torch.abs(imProj - imProj2)",
                    "possible_values": []
                }
            },
            "abs_220": {
                "input": {
                    "value": "imProj - imProj2",
                    "possible_values": []
                }
            }
        }
    },
    "quantizeWeights.py": {
        "sklearn": {
            "KMeans_15": {
                "variable": {
                    "value": "kmeans",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "2 ** num_bits",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_40": {
                "variable": {
                    "value": "np[1].data",
                    "possible_values": []
                },
                "data": {
                    "value": "quantize1d_kmeans(np[1].detach().numpy(), num_bits=num_bits)",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "np[1].data",
                    "possible_values": []
                },
                "data": {
                    "value": "quantize1d_kmeans(np[1].detach().numpy(), num_bits=8)",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "np[1].data",
                    "possible_values": []
                },
                "data": {
                    "value": "quantize1d_kmeans(np[1].detach().numpy(), num_bits=16)",
                    "possible_values": []
                }
            }
        }
    },
    "Models/Inception.py": {
        "torch": {
            "Inception3_22": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.aux_logits": {
                    "value": "aux_logits",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.transform_input": {
                    "value": "transform_input",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Linear_48": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "2048",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "1000",
                                "Constant"
                            ]
                        ]
                    }
                }
            },
            "InceptionA_130": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "InceptionB_162": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "InceptionC_185": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "c7": {
                    "value": "channels_7x7",
                    "possible_values": []
                }
            },
            "InceptionD_224": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "InceptionE_250": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "InceptionAux_292": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_299": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "768",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "1000",
                                "Constant"
                            ]
                        ]
                    }
                }
            },
            "BasicConv2d_320": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_324": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channels",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_325": {
                    "variable": {
                        "value": "self.bn",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "out_channels",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "0.001",
                        "possible_values": []
                    }
                }
            },
            "max_pool2d_83": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "max_pool2d_89": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_117": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "dropout_119": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "avg_pool2d_155": {
                "variable": {
                    "value": "branch_pool",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_pool2d_179": {
                "variable": {
                    "value": "branch_pool",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "avg_pool2d_217": {
                "variable": {
                    "value": "branch_pool",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_pool2d_245": {
                "variable": {
                    "value": "branch_pool",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "branch3x3",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "possible_values": [
                        [
                            "self.branch3x3(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_2(branch3x3)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "branch3x3dbl",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "avg_pool2d_285": {
                "variable": {
                    "value": "branch_pool",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "avg_pool2d_304": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_311": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_ch0, x_ch1, x_ch2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_159": {
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_182": {
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_221": {
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_247": {
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_289": {
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "as_tensor_55": {
                "variable": {
                    "value": "values",
                    "possible_values": []
                },
                "data": {
                    "value": "X.rvs(m.weight.numel())",
                    "possible_values": []
                },
                "dtype": {
                    "value": "m.weight.dtype",
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "input": {
                    "value": "x[:, 0]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "input": {
                    "value": "x[:, 1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_74": {
                "input": {
                    "value": "x[:, 2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "Models/MobileNetV2.py": {
        "torch": {
            "InvertedResidual_22": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": []
                }
            },
            "MobileNetV2_63": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "block": {
                    "value": "InvertedResidual",
                    "possible_values": []
                },
                "Sequential_98": {
                    "variable": {
                        "value": "self.features",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.features",
                        "possible_values": []
                    }
                },
                "Sequential_101": {
                    "variable": {
                        "value": "self.classifier",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Dropout(0.2)",
                        "possible_values": []
                    }
                }
            },
            "Sequential_7": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "possible_values": []
                }
            },
            "Conv2d_8": {
                "in_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_9": {
                "num_features": {
                    "value": "oup",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "oup",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, hidden_dim, 3, stride, 1, groups=hidden_dim, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False)",
                    "possible_values": []
                }
            },
            "Dropout_102": {
                "p": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "self.last_channel",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_115": {
                "f": {
                    "value": "./Models/mobilenet_v2.pth.tar",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "oup",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "oup",
                    "possible_values": []
                }
            }
        }
    },
    "Models/ResNet.py": {
        "torch": {
            "BasicBlock_27": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BatchNorm2d_34": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_38": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(conv1x1(self.inplanes, planes * block.expansion, stride), nn.BatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bottleneck_63": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BatchNorm2d_69": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_72": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_75": {
                    "variable": {
                        "value": "self.bn3",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes * self.expansion",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(conv1x1(self.inplanes, planes * block.expansion, stride), nn.BatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNetImagenet_99": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_106": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "3",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "3",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_108": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "64",
                        "possible_values": []
                    }
                },
                "MaxPool2d_110": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "AdaptiveAvgPool2d_115": {
                    "variable": {
                        "value": "self.avgpool",
                        "possible_values": []
                    },
                    "output_size": {
                        "value": "(1, 1)",
                        "possible_values": []
                    }
                },
                "Linear_116": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "512 * block.expansion",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "1000",
                                "Constant"
                            ]
                        ]
                    }
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                }
            }
        }
    },
    "Models/ResNetAbsorbed.py": {
        "torch": {
            "BasicBlock_27": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BatchNorm2d_34": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "ReLU_35": {
                    "variable": {
                        "value": "self.relu1",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_38": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "ReLU_39": {
                    "variable": {
                        "value": "self.relu2",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(conv1x1(args, self.inplanes, planes * block.expansion, stride), nn.BatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bottleneck_68": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BatchNorm2d_74": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "ReLU_75": {
                    "variable": {
                        "value": "self.relu1",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_77": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "ReLU_78": {
                    "variable": {
                        "value": "self.relu2",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_80": {
                    "variable": {
                        "value": "self.bn3",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes * self.expansion",
                        "possible_values": []
                    }
                },
                "ReLU_81": {
                    "variable": {
                        "value": "self.relu3",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(conv1x1(args, self.inplanes, planes * block.expansion, stride), nn.BatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNetImagenet_114": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BatchNorm2d_123": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "64",
                        "possible_values": []
                    }
                },
                "ReLU_124": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "MaxPool2d_125": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "AdaptiveAvgPool2d_130": {
                    "variable": {
                        "value": "self.avgpool",
                        "possible_values": []
                    },
                    "output_size": {
                        "value": "(1, 1)",
                        "possible_values": []
                    }
                },
                "Linear_131": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "512 * block.expansion",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "1000",
                                "Constant"
                            ]
                        ]
                    }
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(args, self.inplanes, planes * block.expansion, stride)",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "BatchNorm2d_140": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                }
            }
        }
    },
    "absorbe_bn.py": {
        "torch": {
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "zeros",
                    "possible_values": []
                },
                "*size": {
                    "value": "module.out_channels",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "w.device",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "bias",
                    "possible_values": []
                },
                "data": {
                    "value": "zeros",
                    "possible_values": [
                        [
                            "torch.zeros(module.out_channels, dtype=w.dtype, device=w.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "entropy.py": {
        "torch": {
            "bincount_60": {
                "variable": {
                    "value": "counts",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.round(image).long().flatten()",
                    "possible_values": []
                }
            },
            "sum_26": {
                "input": {
                    "value": "pk",
                    "possible_values": [
                        [
                            "pk.float() / torch.sum(pk)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_28": {
                "input": {
                    "value": "pk",
                    "possible_values": [
                        [
                            "pk.float() / torch.sum(pk)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_29": {
                "input": {
                    "value": "vec",
                    "possible_values": [
                        [
                            "-pk * torch.log(pk)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "round_60": {
                "input": {
                    "value": "image",
                    "possible_values": []
                }
            },
            "flatten_60": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "huffman.py": {
        "torch": {
            "round_24": {
                "variable": {
                    "value": "int_img",
                    "possible_values": []
                },
                "input": {
                    "value": "imProj",
                    "possible_values": []
                }
            },
            "flatten_24": {
                "variable": {
                    "value": "int_img",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "bincount_25": {
                "variable": {
                    "value": "counts",
                    "possible_values": []
                },
                "input": {
                    "value": "int_img",
                    "possible_values": [
                        [
                            "torch.round(imProj).long().flatten()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "CrossEntropyLoss_125": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "set_device_90": {
                "device": {
                    "value": "args.gpu[0]",
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_142": {
                "obj": {
                    "value": "model",
                    "possible_values": [
                        [
                            "modelClass(args)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "quantizeWeights(model, args.weightBitwidth, logging)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "possible_values": [
                        [
                            "'./qmodels'",
                            "Constant"
                        ],
                        [
                            "os.path.join(model_path, args.model + '_kmeans%dbit.pt' % args.weightBitwidth)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_144": {
                "f": {
                    "value": "model_path",
                    "possible_values": [
                        [
                            "'./qmodels'",
                            "Constant"
                        ],
                        [
                            "os.path.join(model_path, args.model + '_kmeans%dbit.pt' % args.weightBitwidth)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "no_grad_17": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_73": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "{'net': self.model.state_dict(), 'acc': acc, 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.save + '/ckpt.t7'",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "DataLoader_67": {
                "variable": {
                    "value": "testloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "possible_values": [
                        [
                            "get_dataset(train=False, transform=transform['test'], datasets_path=args.data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_70": {
                "variable": {
                    "value": "sample",
                    "possible_values": []
                },
                "indices": {
                    "value": "np.linspace(rndIdx, rndIdx + args.batch, args.batch + 1, dtype=np.int)[:-1]",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "statloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "get_dataset(train=True, transform=transform['train'], datasets_path=args.data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(np.linspace(rndIdx, rndIdx + args.batch, args.batch + 1, dtype=np.int)[:-1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}