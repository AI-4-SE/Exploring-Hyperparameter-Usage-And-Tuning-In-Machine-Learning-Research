{
    "kmeans_cache.py": {
        "sklearn": {
            "MiniBatchKMeans_39": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_size // args.reduce_factor + 1",
                            "BinOp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pca_cache.py": {
        "sklearn": {
            "IncrementalPCA_34": {
                "variable": {
                    "value": "ipca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mem_keys.shape[1] // args.reduce_factor",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "shape-resnet-50/evaluate_blackbox.py": {
        "torch": {
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "x_val_inner",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.float32(x_val_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_101": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(x_val_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "shape-resnet-50/evaluate_clean.py": {
        "torch": {
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "x_val_inner",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.float32(x_val_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_81": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(x_val_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "shape-resnet-50/evaluate_graybox.py": {
        "torch": {
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "x_val_inner",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.float32(x_val_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_101": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(x_val_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "shape-resnet-50/generate_blackbox_adversarial.py": {
        "torch": {}
    },
    "shape-resnet-50/generate_graybox_adversarial.py": {
        "torch": {
            "DataParallel_19": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_model(model_name, model_save_dir)",
                            "Call"
                        ],
                        [
                            "torchvision.models.resnet50(pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_20": {
                "f": {
                    "value": "model_save_dir + model_name + '.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "shape-resnet-50/generate_whitebox_adversarial.py": {
        "torch": {}
    },
    "shape-resnet-50/make_cache.py": {
        "torch": {
            "DataParallel_43": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.models.resnet50(pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "new_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*x",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_44": {
                "f": {
                    "value": "model_save_dir + model_name + '.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "x_train_1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_x[:625, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "preprocess_input(x_train_1.transpose((0, 3, 1, 2)), data_format='channels_first', mode='torch')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x_train_1).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_88": {
                "variable": {
                    "value": "mem_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_model(x_train_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "x_train_2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_x[625:, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "preprocess_input(x_train_2.transpose((0, 3, 1, 2)), data_format='channels_first', mode='torch')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x_train_2).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_98": {
                "variable": {
                    "value": "mem_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_model(x_train_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "*args": {
                    "value": "*z",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_55": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "shape-resnet-50/save_pretrained_models.py": {
        "torch": {
            "DataParallel_18": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_model(model_C)",
                            "Call"
                        ],
                        [
                            "torchvision.models.resnet50(pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_47": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_save_dir + 'resnet50_sin_in_in.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "shape-resnet-50/utils.py": {
        "torch": {
            "DataParallel_76": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.models.resnet50(pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "self.mem_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.float32(mem_keys)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "self.mem_vals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mem_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mem_vals",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.module.children())",
                            "Call"
                        ],
                        [
                            "list(model.module.children())[:-1]",
                            "Subscript"
                        ],
                        [
                            "list(model.module.children())[:-3]",
                            "Subscript"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "x / torch.norm(x)",
                            "BinOp"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_51": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta * torch.matmul(x, self.mem_keys)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_52": {
                "variable": {
                    "value": "p_mem",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(self.theta * torch.matmul(x, self.mem_keys))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.mem_vals",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_53": {
                "variable": {
                    "value": "p_mem",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(similarities, self.mem_vals)",
                            "Call"
                        ],
                        [
                            "torch.log(p_mem)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.module.children())",
                            "Call"
                        ],
                        [
                            "list(model.module.children())[:-1]",
                            "Subscript"
                        ],
                        [
                            "list(model.module.children())[:-3]",
                            "Subscript"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "x / torch.norm(x)",
                            "BinOp"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "new_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*x",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_77": {
                "f": {
                    "value": "model_save_dir + model_name + '.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_49": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.module.children())",
                            "Call"
                        ],
                        [
                            "list(model.module.children())[:-1]",
                            "Subscript"
                        ],
                        [
                            "list(model.module.children())[:-3]",
                            "Subscript"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "x / torch.norm(x)",
                            "BinOp"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_51": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.module.children())",
                            "Call"
                        ],
                        [
                            "list(model.module.children())[:-1]",
                            "Subscript"
                        ],
                        [
                            "list(model.module.children())[:-3]",
                            "Subscript"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "x / torch.norm(x)",
                            "BinOp"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.mem_keys",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "*args": {
                    "value": "*z",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_88": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}