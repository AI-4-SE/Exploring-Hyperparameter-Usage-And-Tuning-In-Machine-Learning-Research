{
    "finetuning_and_classification/utils_glue.py": {
        "sklearn": {
            "f1_score_637": {
                "variable": {
                    "value": "f1",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                }
            },
            "f1_score_647": {
                "variable": {
                    "value": "f1_macro",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "possible_values": []
                }
            },
            "matthews_corrcoef_666": {
                "y_true": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                }
            }
        }
    },
    "finetuning_and_classification/utils_glue_ardy.py": {
        "sklearn": {
            "f1_score_642": {
                "variable": {
                    "value": "f1",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                }
            },
            "f1_score_652": {
                "variable": {
                    "value": "f1_macro",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "possible_values": []
                }
            },
            "matthews_corrcoef_671": {
                "y_true": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                }
            }
        }
    },
    "finetuning_and_classification/finetune_on_pregenerated.py": {
        "torch": {
            "device_208": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_209": {
                "variable": {
                    "value": "n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_212": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_227": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataLoader_312": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "epoch_dataset",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(epoch_dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(epoch_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "set_device_211": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_229": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataParallel_260": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "BertForPreTraining.from_pretrained(args.bert_model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_309": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "epoch_dataset",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_311": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "epoch_dataset",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_124": {
                "data": {
                    "value": "self.input_ids[item].astype(np.int64)",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "data": {
                    "value": "self.input_masks[item].astype(np.int64)",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "self.segment_ids[item].astype(np.int64)",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "self.lm_label_ids[item].astype(np.int64)",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "self.is_nexts[item].astype(np.int64)",
                    "possible_values": []
                }
            },
            "is_available_208": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "finetuning_and_classification/finetune_on_pregenerated_indobert.py": {
        "torch": {
            "device_217": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_219": {
                "variable": {
                    "value": "n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_222": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_237": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataLoader_331": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "epoch_dataset",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(epoch_dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(epoch_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "set_device_221": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_239": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataParallel_275": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "AutoModel.from_pretrained('indobenchmark/indobert-base-p2')",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_328": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "epoch_dataset",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_330": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "epoch_dataset",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_132": {
                "data": {
                    "value": "self.input_ids[item].astype(np.int64)",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "data": {
                    "value": "self.input_masks[item].astype(np.int64)",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "data": {
                    "value": "self.segment_ids[item].astype(np.int64)",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "data": {
                    "value": "self.lm_label_ids[item].astype(np.int64)",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "data": {
                    "value": "self.is_nexts[item].astype(np.int64)",
                    "possible_values": []
                }
            },
            "is_available_218": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "finetuning_and_classification/finetune_on_pregenerated_ori.py": {
        "torch": {
            "device_194": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_195": {
                "variable": {
                    "value": "n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_198": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_213": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataLoader_292": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "epoch_dataset",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(epoch_dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(epoch_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "save_333": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_197": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_215": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataParallel_246": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "BertForPreTraining.from_pretrained(args.bert_model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_289": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "epoch_dataset",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_291": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "epoch_dataset",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_117": {
                "data": {
                    "value": "self.input_ids[item].astype(np.int64)",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "self.input_masks[item].astype(np.int64)",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "self.segment_ids[item].astype(np.int64)",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "data": {
                    "value": "self.lm_label_ids[item].astype(np.int64)",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "self.is_nexts[item].astype(np.int64)",
                    "possible_values": []
                }
            },
            "is_available_194": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "finetuning_and_classification/run_glue.py": {
        "torch": {
            "DataLoader_72": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "tensor_294": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_295": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_296": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_302": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "manual_seed_60": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "tensor_298": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "device_400": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_401": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_404": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_444": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "manual_seed_all_62": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_71": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": []
                }
            },
            "DistributedSampler_71": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": []
                }
            },
            "tensor_300": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "set_device_403": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "DataParallel_448": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_474": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "SequentialSampler_191": {
                "data_source": {
                    "value": "eval_dataset",
                    "possible_values": []
                }
            },
            "DistributedSampler_191": {
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": []
                }
            },
            "save_291": {
                "obj": {
                    "value": "features",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__130": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__133": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "is_available_400": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "finetuning_and_classification/run_glue_ardy.py": {
        "torch": {
            "DataLoader_72": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "DataLoader_252": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "tensor_353": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_354": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_355": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_361": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "manual_seed_60": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataLoader_190": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "tensor_357": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "device_459": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_460": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_463": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_503": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "manual_seed_all_62": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_71": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": []
                }
            },
            "DistributedSampler_71": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": []
                }
            },
            "SequentialSampler_251": {
                "data_source": {
                    "value": "eval_dataset",
                    "possible_values": []
                }
            },
            "DistributedSampler_251": {
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": []
                }
            },
            "tensor_359": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "set_device_462": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "DataParallel_507": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_533": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "SequentialSampler_189": {
                "data_source": {
                    "value": "eval_dataset",
                    "possible_values": []
                }
            },
            "DistributedSampler_189": {
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": []
                }
            },
            "no_grad_266": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_350": {
                "obj": {
                    "value": "features",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__130": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__133": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "is_available_459": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "finetuning_and_classification/run_mlm_no_trainer.py": {
        "torch": {
            "DataLoader_427": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "tokenized_datasets['train']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "data_collator",
                    "possible_values": [
                        [
                            "DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm_probability=args.mlm_probability)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.per_device_train_batch_size",
                    "possible_values": []
                }
            },
            "DataLoader_430": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "tokenized_datasets['validation']",
                            "Subscript"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "data_collator",
                    "possible_values": [
                        [
                            "DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm_probability=args.mlm_probability)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.per_device_eval_batch_size",
                    "possible_values": []
                }
            },
            "cat_509": {
                "variable": {
                    "value": "losses",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(losses)",
                            "Call"
                        ],
                        [
                            "losses[:len(eval_dataset)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_503": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mean_512": {
                "input": {
                    "value": "losses",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(losses)",
                            "Call"
                        ],
                        [
                            "losses[:len(eval_dataset)]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}