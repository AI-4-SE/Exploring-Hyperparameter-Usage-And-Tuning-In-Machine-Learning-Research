{
    "data_loader.py": {
        "torch": {
            "DataLoader_50": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(root=train_dir)",
                            "Call"
                        ],
                        [
                            "OmniglotTrain(train_dataset, num_train, augment)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(root=valid_dir)",
                            "Call"
                        ],
                        [
                            "OmniglotTest(valid_dataset, trials=trials, way=way, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "way",
                    "type": "variable",
                    "possible_values": [
                        [
                            "way",
                            "Method Argument"
                        ],
                        [
                            "way",
                            "Method Argument"
                        ],
                        [
                            "way",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(root=test_dir)",
                            "Call"
                        ],
                        [
                            "OmniglotTest(test_dataset, trials=trials, way=way, seed=seed)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "way",
                    "type": "variable",
                    "possible_values": [
                        [
                            "way",
                            "Method Argument"
                        ],
                        [
                            "way",
                            "Method Argument"
                        ],
                        [
                            "way",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([label], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "config.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "config.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "9216",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2(out), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv3(out), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_70": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_102": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h1 - h2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_64": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_65": {
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_66": {
                "input": {
                    "value": "self.conv3(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test_imgs.py": {
        "torch": {
            "load_13": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "Adam_114": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0003",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "6e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_331": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.ckpt_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.ckpt_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_245": {
                "variable": {
                    "value": "log_probas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.model(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.model(x1, x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_277": {
                "variable": {
                    "value": "log_probas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.model(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.model(x1, x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_316": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.ckpt_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.ckpt_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_200": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.model(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.model(x1, x2)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}