{
    "coling-lgbm.py": {
        "sklearn": {
            "StandardScaler_47": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KFold_139": {
                "variable": {
                    "value": "skfolds",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_val_score_174": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "stacker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lgb.LGBMClassifier(max_depth=3, metric='multi_logloss', n_estimators=75, num_leaves=10, boosting_type='gbdt', learning_rate=0.1, feature_fraction=0.45, colsample_bytree=0.45, bagging_fraction=0.8, bagging_freq=5, reg_lambda=0.2)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([F_train[features].as_matrix(), oofs])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "train_cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df_all",
                            "variable"
                        ],
                        [
                            "train_cv.drop('comment_text', axis=1)",
                            "Call"
                        ],
                        [
                            "np.argmax(train_cv.values, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "n_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "scoring": {
                    "value": "f1_weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "coling-oof.py": {
        "sklearn": {
            "f1_score_265": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df_dev[classes].values",
                            "Attribute"
                        ],
                        [
                            "df_dev[classes].values",
                            "Attribute"
                        ],
                        [
                            "df_dev[classes].values",
                            "Attribute"
                        ],
                        [
                            "y_val",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_val_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "approaches['rnn'](df_train, df_dev)",
                            "Call"
                        ],
                        [
                            "approaches['tfidf'](df_train, df_dev, df_all)",
                            "Call"
                        ],
                        [
                            "approaches['char'](df_train, df_dev, df_all)",
                            "Call"
                        ],
                        [
                            "approaches['logreg'](df_train, df_dev)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_val_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray([[1, 0, 0] if x == 0 else [0, 1, 0] if x == 1 else [0, 0, 1] for x in y_val_pred])",
                            "Call"
                        ],
                        [
                            "nb.predict_proba(x_val)",
                            "Call"
                        ],
                        [
                            "model.predict(x_val, verbose=1, batch_size=32)",
                            "Call"
                        ],
                        [
                            "nb.predict(x_val)",
                            "Call"
                        ],
                        [
                            "nb.predict_proba(x_val)",
                            "Call"
                        ],
                        [
                            "nb.predict_proba(x_val)",
                            "Call"
                        ],
                        [
                            "y_val_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_276": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "smooth_idf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "max_df": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "english",
                    "type": "str",
                    "possible_values": []
                }
            },
            "OneVsRestClassifier_280": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LogisticRegression(solver='sag', class_weight='balanced')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_346": {
                "variable": {
                    "value": "pos_vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "sublinear_tf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "strip_accents": {
                    "value": "unicode",
                    "type": "str",
                    "possible_values": []
                },
                "analyzer": {
                    "value": "char",
                    "type": "str",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "OneVsRestClassifier_358": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LogisticRegression(solver='sag')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_368": {
                "variable": {
                    "value": "char_vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "sublinear_tf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "strip_accents": {
                    "value": "unicode",
                    "type": "str",
                    "possible_values": []
                },
                "analyzer": {
                    "value": "char",
                    "type": "str",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "english",
                    "type": "str",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(2, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_features": {
                    "value": "50000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "OneVsRestClassifier_381": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LogisticRegression(solver='sag', class_weight='balanced')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_501": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((window_length, n_features))",
                            "Call"
                        ],
                        [
                            "np.zeros((len(df), window_length, n_features), dtype='float32')",
                            "Call"
                        ],
                        [
                            "SpatialDropout1D(0.1)(x)",
                            "Call"
                        ],
                        [
                            "Bidirectional(CuDNNGRU(num_filters, return_sequences=True))(inp)",
                            "Call"
                        ],
                        [
                            "Dense(len(classes), activation='softmax')(conc)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "np.concatenate((num_of_words, avg_length, ratio_capitalized, num_repeated_mark, num_repeated_question, num_dot, num_negations, num_repeated_dot, count_smile1, count_smile2, count_lol, count_sad1, count_sad2, count_neutralFace, sentiment, num_http, num_comma, num_botsign, num_bot, num_heart, num_laugh, num_muslim, num_star, num_whatsapp, num_tongue, num_angry, num_blink, num_thumb, num_sad, num_cool, num_blink, num_clap, num_exact, num_surprise, num_think, num_flush, num_pray, num_rose), axis=1)",
                            "Call"
                        ],
                        [
                            "scaler.transform(x)",
                            "Call"
                        ],
                        [
                            "normalize(x, norm='l2', axis=0, copy=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxAbsScaler_509": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OneVsRestClassifier_515": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LogisticRegression(solver='sag', class_weight='balanced')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KFold_542": {
                "variable": {
                    "value": "skfolds",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "classification_report_267": {
                "y_true": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df_dev[classes].values",
                            "Attribute"
                        ],
                        [
                            "df_dev[classes].values",
                            "Attribute"
                        ],
                        [
                            "df_dev[classes].values",
                            "Attribute"
                        ],
                        [
                            "y_val",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_val_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "approaches['rnn'](df_train, df_dev)",
                            "Call"
                        ],
                        [
                            "approaches['tfidf'](df_train, df_dev, df_all)",
                            "Call"
                        ],
                        [
                            "approaches['char'](df_train, df_dev, df_all)",
                            "Call"
                        ],
                        [
                            "approaches['logreg'](df_train, df_dev)",
                            "Call"
                        ],
                        [
                            "np.argmax(y_val_pred, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray([[1, 0, 0] if x == 0 else [0, 1, 0] if x == 1 else [0, 0, 1] for x in y_val_pred])",
                            "Call"
                        ],
                        [
                            "nb.predict_proba(x_val)",
                            "Call"
                        ],
                        [
                            "model.predict(x_val, verbose=1, batch_size=32)",
                            "Call"
                        ],
                        [
                            "nb.predict(x_val)",
                            "Call"
                        ],
                        [
                            "nb.predict_proba(x_val)",
                            "Call"
                        ],
                        [
                            "nb.predict_proba(x_val)",
                            "Call"
                        ],
                        [
                            "y_val_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target_names": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['OAG', 'NAG', 'CAG']",
                            "List"
                        ]
                    ]
                }
            },
            "confusion_matrix_268": {
                "y_true": {
                    "value": "y_val.argmax(axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_val_pred.argmax(axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogisticRegression_280": {
                "solver": {
                    "value": "sag",
                    "type": "str",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "balanced",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LogisticRegression_358": {
                "solver": {
                    "value": "sag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LogisticRegression_381": {
                "solver": {
                    "value": "sag",
                    "type": "str",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "balanced",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LogisticRegression_515": {
                "solver": {
                    "value": "sag",
                    "type": "str",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "balanced",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "GPUOptions_84": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "gpu_fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_248": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((window_length, n_features))",
                            "Call"
                        ],
                        [
                            "np.zeros((len(df), window_length, n_features), dtype='float32')",
                            "Call"
                        ],
                        [
                            "SpatialDropout1D(0.1)(x)",
                            "Call"
                        ],
                        [
                            "Bidirectional(CuDNNGRU(num_filters, return_sequences=True))(inp)",
                            "Call"
                        ],
                        [
                            "Dense(len(classes), activation='softmax')(conc)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "np.concatenate((num_of_words, avg_length, ratio_capitalized, num_repeated_mark, num_repeated_question, num_dot, num_negations, num_repeated_dot, count_smile1, count_smile2, count_lol, count_sad1, count_sad2, count_neutralFace, sentiment, num_http, num_comma, num_botsign, num_bot, num_heart, num_laugh, num_muslim, num_star, num_whatsapp, num_tongue, num_angry, num_blink, num_thumb, num_sad, num_cool, num_blink, num_clap, num_exact, num_surprise, num_think, num_flush, num_pray, num_rose), axis=1)",
                            "Call"
                        ],
                        [
                            "scaler.transform(x)",
                            "Call"
                        ],
                        [
                            "normalize(x, norm='l2', axis=0, copy=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_249": {
                "variable": {
                    "value": "k_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((window_length, n_features))",
                            "Call"
                        ],
                        [
                            "np.zeros((len(df), window_length, n_features), dtype='float32')",
                            "Call"
                        ],
                        [
                            "SpatialDropout1D(0.1)(x)",
                            "Call"
                        ],
                        [
                            "Bidirectional(CuDNNGRU(num_filters, return_sequences=True))(inp)",
                            "Call"
                        ],
                        [
                            "Dense(len(classes), activation='softmax')(conc)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "np.concatenate((num_of_words, avg_length, ratio_capitalized, num_repeated_mark, num_repeated_question, num_dot, num_negations, num_repeated_dot, count_smile1, count_smile2, count_lol, count_sad1, count_sad2, count_neutralFace, sentiment, num_http, num_comma, num_botsign, num_bot, num_heart, num_laugh, num_muslim, num_star, num_whatsapp, num_tongue, num_angry, num_blink, num_thumb, num_sad, num_cool, num_blink, num_clap, num_exact, num_surprise, num_think, num_flush, num_pray, num_rose), axis=1)",
                            "Call"
                        ],
                        [
                            "scaler.transform(x)",
                            "Call"
                        ],
                        [
                            "normalize(x, norm='l2', axis=0, copy=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_87": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options, intra_op_parallelism_threads=num_threads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_90": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_250": {
                "tensor": {
                    "value": "k_max[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 2 * num_filters * top_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConfigProto_87": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=gpu_fraction)",
                            "Call"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "num_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.environ.get('OMP_NUM_THREADS')",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_90": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=gpu_fraction)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}