{
    "experiment/tune_hyperparam.py": {
        "sklearn": {
            "ParameterGrid_11": {
                "param_grid": {
                    "value": "tune_params",
                    "possible_values": []
                }
            }
        }
    },
    "agents/agem.py": {
        "torch": {
            "DataLoader_23": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "dataset_transform(x_train, y_train, transform=transforms_match[self.data])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_47": {
                "variable": {
                    "value": "(_, pred_label)",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "self.forward(batch_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_73": {
                "input": {
                    "value": "g * g_r",
                    "possible_values": []
                }
            },
            "sum_75": {
                "input": {
                    "value": "g_r ** 2",
                    "possible_values": []
                }
            }
        }
    },
    "agents/base.py": {
        "torch": {
            "ContinualLearner_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.params": {
                    "value": "params",
                    "possible_values": [
                        [
                            "[p for p in self.model.parameters() if p.requires_grad and p.grad is not None]",
                            "ListComp"
                        ]
                    ]
                },
                "self.model": {
                    "value": "model",
                    "possible_values": []
                },
                "self.opt": {
                    "value": "opt",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_95": {
                "variable": {
                    "value": "ce",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                }
            },
            "TensorDataset_68": {
                "variable": {
                    "value": "rv_dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "mem_x",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "rv_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "rv_dataset",
                    "possible_values": [
                        [
                            "TensorDataset(mem_x, mem_y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.params.eps_mem_batch",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "log_softmax_103": {
                "variable": {
                    "value": "old_ss",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[:, self.old_labels]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_104": {
                "variable": {
                    "value": "new_ss",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[:, self.new_labels]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "ss",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[old_ss, new_ss]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "nll_loss_108": {
                "input": {
                    "value": "ss",
                    "possible_values": [
                        [
                            "torch.cat([old_ss, new_ss], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "labels.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_139": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_164": {
                "variable": {
                    "value": "means",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[exemplar_means[cls] for cls in self.old_labels]",
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "means",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[means] * batch_x.size(0)",
                    "possible_values": []
                }
            },
            "max_179": {
                "variable": {
                    "value": "(_, pred_label)",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "self.model.forward(batch_x)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.model.forward(batch_x).unsqueeze(1), self.model.forward(self.transform(batch_x)).unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.model.forward(batch_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_79": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.model.forward(batch_x).unsqueeze(1), self.model.forward(self.transform(batch_x)).unsqueeze(1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "normal_136": {
                "mean": {
                    "value": "0",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "possible_values": []
                },
                "size": {
                    "value": "tuple(self.model.features(x.unsqueeze(0)).detach().size())",
                    "possible_values": []
                }
            }
        }
    },
    "agents/cndpm.py": {
        "torch": {
            "DataLoader_19": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "dataset_transform(x_train, y_train, transform=transforms_match[self.data])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "agents/ewc_pp.py": {
        "torch": {
            "DataLoader_24": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "dataset_transform(x_train, y_train, transform=transforms_match[self.data])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_54": {
                "variable": {
                    "value": "(_, pred_label)",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.forward(batch_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_77": {
                "input": {
                    "value": "m",
                    "possible_values": []
                }
            },
            "min_78": {
                "input": {
                    "value": "m",
                    "possible_values": []
                }
            }
        }
    },
    "agents/exp_replay.py": {
        "torch": {
            "DataLoader_22": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "dataset_transform(x_train, y_train, transform=transforms_match[self.data])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_48": {
                "variable": {
                    "value": "(_, pred_label)",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "self.model.forward(batch_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_73": {
                "variable": {
                    "value": "(_, pred_label)",
                    "possible_values": []
                },
                "input": {
                    "value": "mem_logits",
                    "possible_values": [
                        [
                            "self.model.forward(mem_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_82": {
                "variable": {
                    "value": "combined_batch",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mem_x, batch_x)",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "combined_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mem_y, batch_y)",
                    "possible_values": []
                }
            }
        }
    },
    "agents/gdumb.py": {
        "torch": {
            "DataLoader_37": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "dataset_transform(x_train, y_train, transform=transforms_match[self.data])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "stack_59": {
                "variable": {
                    "value": "mem_x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mem_x",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "mem_x + self.mem_img[i]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(mem_x)",
                            "Call"
                        ],
                        [
                            "maybe_cuda(mem_x[idx], self.cuda)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__82": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.params.clip",
                    "possible_values": []
                }
            }
        }
    },
    "agents/icarl.py": {
        "torch": {
            "DataLoader_27": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "dataset_transform(x_train, y_train, transform=transforms_match[self.data])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_62": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[:, :all_cls_num]",
                    "possible_values": []
                },
                "target": {
                    "value": "target_labels",
                    "possible_values": [
                        [
                            "utils.ohe_label(train_y_copy, all_cls_num, device=train_y_copy.device).float()",
                            "Call"
                        ],
                        [
                            "torch.cat([target_labels, torch.zeros_like(target_labels)])",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "sum_62": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_62": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "batch_x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[train_x, mem_x]",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "target_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_labels, torch.zeros_like(target_labels)]",
                    "possible_values": []
                }
            },
            "sigmoid_59": {
                "variable": {
                    "value": "q",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prev_model.forward(batch_x)",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "input": {
                    "value": "target_labels",
                    "possible_values": [
                        [
                            "utils.ohe_label(train_y_copy, all_cls_num, device=train_y_copy.device).float()",
                            "Call"
                        ],
                        [
                            "torch.cat([target_labels, torch.zeros_like(target_labels)])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "agents/lwf.py": {
        "torch": {
            "DataLoader_19": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "dataset_transform(x_train, y_train, transform=transforms_match[self.data])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_40": {
                "variable": {
                    "value": "(_, pred_label)",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "self.forward(batch_x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "agents/scr.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.transform",
                    "possible_values": []
                },
                "*args": {
                    "value": "RandomResizedCrop(size=(input_size_match[self.params.data][1], input_size_match[self.params.data][2]), scale=(0.2, 1.0))",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "dataset_transform(x_train, y_train, transform=transforms_match[self.data])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "combined_batch",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mem_x, batch_x)",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "combined_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mem_y, batch_y)",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.model.forward(combined_batch).unsqueeze(1), self.model.forward(combined_batch_aug).unsqueeze(1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "continuum/data_utils.py": {
        "torch": {
            "dataset_transform_38": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.transform(self.x[idx])",
                            "Call"
                        ],
                        [
                            "self.x[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "from_numpy_41": {
                    "variable": {
                        "value": "self.y",
                        "possible_values": []
                    },
                    "ndarray": {
                        "value": "y",
                        "possible_values": []
                    }
                },
                "self.transform": {
                    "value": "transform",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_25": {
                "variable": {
                    "value": "idx",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "possible_values": [
                        [
                            "dataset_transform(x_test, y_test, transform=transforms_match[params.data])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params.test_batch",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "general_main.py": {
        "torch": {
            "is_available_190": {
                "variable": {
                    "value": "args.cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            }
        }
    },
    "main_config.py": {
        "torch": {
            "is_available_16": {
                "variable": {
                    "value": "genereal_params[cuda]",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "final_params.seed",
                    "possible_values": []
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "final_params.seed",
                    "possible_values": []
                }
            }
        }
    },
    "main_tune.py": {
        "torch": {
            "is_available_18": {
                "variable": {
                    "value": "genereal_params[cuda]",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "final_default_params.seed",
                    "possible_values": []
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "final_default_params.seed",
                    "possible_values": []
                }
            }
        }
    },
    "models/ndpm/classifier.py": {
        "torch": {
            "BasicBlock_67": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_84": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(conv1x1(nf_in, nf_out, stride), norm_layer(nf_out))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.upsample": {
                    "value": "upsample",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "NLLLoss_14": {
                "variable": {
                    "value": "self.ce_loss",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "log_softmax_27": {
                "variable": {
                    "value": "chilled_log_softmax",
                    "possible_values": []
                },
                "input": {
                    "value": "log_softmax / self.params.classifier_chill",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_114": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_122": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.layer0",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, nf * 1, kernel_size=3, stride=1, padding=1, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.predict",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(nf_cat * 8, num_classes)",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "h1_cat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[0], h1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "h2_cat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[1], h2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "h3_cat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[2], h3]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "h4_cat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[3], h4]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "avg_pool2d_232": {
                "variable": {
                    "value": "h5",
                    "possible_values": []
                },
                "input": {
                    "value": "h5",
                    "possible_values": [
                        [
                            "self.layer4(h4)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h5, h5.size(2)).view(h5.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.layer4(h4_cat)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h5, h5.size(2)).view(h5.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "h5.size(2)",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "h5_cat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[4], h5]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_46": {
                "tensors": {
                    "value": "[dummy_pred] + preds",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_55": {
                "variable": {
                    "value": "chilled_log_softmax",
                    "possible_values": []
                },
                "input": {
                    "value": "log_softmax / self.params.classifier_chill",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_64": {
                "tensors": {
                    "value": "loss_preds",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(nf_in, nf_out, stride)",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "avg_pool2d_211": {
                "variable": {
                    "value": "h5",
                    "possible_values": []
                },
                "input": {
                    "value": "h5",
                    "possible_values": [
                        [
                            "self.layer4(h4)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h5, h5.size(2)).view(h5.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.layer4(h4_cat)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h5, h5.size(2)).view(h5.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "h5.size(2)",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf * 1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_166": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "in_features": {
                    "value": "nf_cat * 8",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "n_classes[params.data]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "LogSoftmax_178": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "models/ndpm/component.py": {
        "torch": {
            "Component_10": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.params": {
                    "value": "params",
                    "possible_values": []
                },
                "self.experts": {
                    "value": "experts",
                    "possible_values": []
                },
                "self.optimizer": {
                    "value": "NotImplemented",
                    "possible_values": []
                },
                "self.lr_scheduler": {
                    "value": "NotImplemented",
                    "possible_values": []
                }
            },
            "stack_84": {
                "tensors": {
                    "value": "nll",
                    "possible_values": [
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_106": {
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[expert.g.nll(x, y, step) for expert in self.experts]",
                            "ListComp"
                        ],
                        [
                            "[expert.d(x) for expert in self.experts]",
                            "ListComp"
                        ],
                        [
                            "[expert.d.nll(x, y, step) for expert in self.experts]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_121": {
                "tensors": {
                    "value": "nll",
                    "possible_values": [
                        [
                            "outputs",
                            "Name"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clip_grad_value__31": {
                "parameters": {
                    "value": "group['params']",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "clip_value",
                    "possible_values": []
                }
            },
            "clip_grad_norm__35": {
                "parameters": {
                    "value": "group['params']",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_norm",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "norm_type",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "norm_60": {
                "input": {
                    "value": "param",
                    "possible_values": [
                        [
                            "self.parameters()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/ndpm/expert.py": {
        "torch": {
            "Expert_10": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.experts": {
                    "value": "experts",
                    "possible_values": [
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/ndpm/loss.py": {
        "torch": {
            "binary_cross_entropy_37": {
                "input": {
                    "value": "p",
                    "possible_values": [
                        [
                            "p.expand(*p_exp)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(cdf2) - torch.sigmoid(cdf1) + 1e-12",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.expand(*x_exp)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "sigmoid_46": {
                "input": {
                    "value": "cdf1",
                    "possible_values": [
                        [
                            "x_centered / scale",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/ndpm/ndpm.py": {
        "torch": {
            "Ndpm_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.params": {
                    "value": "params",
                    "possible_values": []
                },
                "ModuleList_15": {
                    "variable": {
                        "value": "self.experts",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[Expert(params)]",
                        "possible_values": []
                    }
                }
            },
            "stack_112": {
                "variable": {
                    "value": "stacked_stm_x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.stm_x",
                    "possible_values": []
                }
            },
            "stack_113": {
                "variable": {
                    "value": "stacked_stm_y",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.stm_y",
                    "possible_values": []
                }
            },
            "randperm_114": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "n": {
                    "value": "stacked_stm_x.size(0)",
                    "possible_values": []
                }
            },
            "TensorDataset_116": {
                "variable": {
                    "value": "dream_dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "stacked_stm_x[indices[:train_size]]",
                    "possible_values": []
                }
            },
            "TensorDataset_99": {
                "variable": {
                    "value": "dream_dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.stack(self.stm_x)",
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "logsumexp_32": {
                "input": {
                    "value": "log_prior",
                    "possible_values": [
                        [
                            "-self.prior.nl_prior()[1:]",
                            "UnaryOp"
                        ],
                        [
                            "log_prior - torch.logsumexp(log_prior, dim=0)",
                            "BinOp"
                        ],
                        [
                            "log_prior.unsqueeze(0).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "exp_66": {
                "variable": {
                    "value": "to_expert",
                    "possible_values": []
                },
                "input": {
                    "value": "-nl_joint + min_joint",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "dataset": {
                    "value": "dream_dataset",
                    "possible_values": [
                        [
                            "TensorDataset(torch.stack(self.stm_x), torch.stack(self.stm_y))",
                            "Call"
                        ],
                        [
                            "TensorDataset(stacked_stm_x[indices[:train_size]], stacked_stm_y[indices[:train_size]])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "MODELS_NDPM_NDPM_SLEEP_BATCH_SIZE",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "MODELS_NDPM_NDPM_SLEEP_NUM_WORKERS",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomSampler(dream_dataset, replacement=True, num_samples=MODELS_NDPM_NDPM_SLEEP_STEP_G * MODELS_NDPM_NDPM_SLEEP_BATCH_SIZE)",
                    "possible_values": []
                }
            },
            "DataLoader_153": {
                "dataset": {
                    "value": "dream_dataset",
                    "possible_values": [
                        [
                            "TensorDataset(torch.stack(self.stm_x), torch.stack(self.stm_y))",
                            "Call"
                        ],
                        [
                            "TensorDataset(stacked_stm_x[indices[:train_size]], stacked_stm_y[indices[:train_size]])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "MODELS_NDPM_NDPM_SLEEP_BATCH_SIZE",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "MODELS_NDPM_NDPM_SLEEP_NUM_WORKERS",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomSampler(dream_dataset, replacement=True, num_samples=MODELS_NDPM_NDPM_SLEEP_STEP_D * MODELS_NDPM_NDPM_SLEEP_BATCH_SIZE)",
                    "possible_values": []
                }
            },
            "unbind_48": {
                "input": {
                    "value": "x.cpu()",
                    "possible_values": []
                }
            },
            "unbind_49": {
                "input": {
                    "value": "y.cpu()",
                    "possible_values": []
                }
            },
            "argmin_58": {
                "input": {
                    "value": "nl_joint",
                    "possible_values": [
                        [
                            "nll + nl_prior.unsqueeze(0).expand(nll.size(0), -1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unbind_60": {
                "input": {
                    "value": "x[to_stm].cpu()",
                    "possible_values": []
                }
            },
            "unbind_61": {
                "input": {
                    "value": "y[to_stm].cpu()",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "stack_100": {
                "tensors": {
                    "value": "self.stm_y",
                    "possible_values": []
                }
            },
            "RandomSampler_126": {
                "data_source": {
                    "value": "dream_dataset",
                    "possible_values": [
                        [
                            "TensorDataset(torch.stack(self.stm_x), torch.stack(self.stm_y))",
                            "Call"
                        ],
                        [
                            "TensorDataset(stacked_stm_x[indices[:train_size]], stacked_stm_y[indices[:train_size]])",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "MODELS_NDPM_NDPM_SLEEP_STEP_G * MODELS_NDPM_NDPM_SLEEP_BATCH_SIZE",
                    "possible_values": []
                }
            },
            "RandomSampler_157": {
                "data_source": {
                    "value": "dream_dataset",
                    "possible_values": [
                        [
                            "TensorDataset(torch.stack(self.stm_x), torch.stack(self.stm_y))",
                            "Call"
                        ],
                        [
                            "TensorDataset(stacked_stm_x[indices[:train_size]], stacked_stm_y[indices[:train_size]])",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "MODELS_NDPM_NDPM_SLEEP_STEP_D * MODELS_NDPM_NDPM_SLEEP_BATCH_SIZE",
                    "possible_values": []
                }
            }
        }
    },
    "models/ndpm/priors.py": {
        "torch": {
            "cat_32": {
                "variable": {
                    "value": "self.log_counts",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.log_counts, maybe_cuda(torch.zeros(1))]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "logsumexp_45": {
                "variable": {
                    "value": "self.log_counts",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([self.log_counts, usage.log()], dim=1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "logsumexp_50": {
                "variable": {
                    "value": "self.log_counts[index]",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([self.log_counts[index], maybe_cuda(torch.tensor(usage)).float().log()], dim=0)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "logsumexp_58": {
                "input": {
                    "value": "self.log_counts",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_45": {
                "tensors": {
                    "value": "[self.log_counts, usage.log()]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_50": {
                "tensors": {
                    "value": "[self.log_counts[index], maybe_cuda(torch.tensor(usage)).float().log()]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "params.log_alpha",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "usage",
                    "possible_values": []
                }
            }
        }
    },
    "models/ndpm/utils.py": {
        "torch": {
            "Lambda_4": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            }
        }
    },
    "models/ndpm/vae.py": {
        "torch": {
            "zeros_like_82": {
                "variable": {
                    "value": "zeros",
                    "possible_values": []
                },
                "input": {
                    "value": "q_mean",
                    "possible_values": []
                }
            },
            "randn_like_98": {
                "variable": {
                    "value": "unit_normal",
                    "possible_values": []
                },
                "input": {
                    "value": "z_std",
                    "possible_values": [
                        [
                            "(z_log_var * 0.5).exp()",
                            "Call"
                        ],
                        [
                            "z_std.unsqueeze(1).expand(-1, num_samples, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_215": {
                "variable": {
                    "value": "self.enc1",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(x_c, h1_dim, 3, 1, 1)",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "self.enc2",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(h1_cat_dim, h2_dim, 3, 1, 1)",
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "self.enc3",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(feature_volume, fc_dim)",
                    "possible_values": []
                }
            },
            "Linear_230": {
                "variable": {
                    "value": "self.enc_z_mean",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_cat_dim",
                    "possible_values": [
                        [
                            "4 * nf_cat",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "MODELS_NDPM_VAE_Z_DIM",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.enc_z_log_var",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_cat_dim",
                    "possible_values": [
                        [
                            "4 * nf_cat",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "MODELS_NDPM_VAE_Z_DIM",
                    "possible_values": []
                }
            },
            "Sequential_233": {
                "variable": {
                    "value": "self.dec_z",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(MODELS_NDPM_VAE_Z_DIM, 4 * nf_base)",
                    "possible_values": []
                }
            },
            "Sequential_237": {
                "variable": {
                    "value": "self.dec3",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(4 * nf_base, x_h // 4 * (x_w // 4) * 2 * nf_base)",
                    "possible_values": []
                }
            },
            "Sequential_243": {
                "variable": {
                    "value": "self.dec2",
                    "possible_values": []
                },
                "*args": {
                    "value": "Lambda(lambda x: x.view(x.size(0), 2 * nf_base, x_h // 4, x_w // 4))",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_251": {
                "variable": {
                    "value": "self.dec1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1 * nf_base",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "x_c",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "h1_cat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[0], h1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "h2_cat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[1], h2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "h3_cat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[2], h3]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_164": {
                "variable": {
                    "value": "x_mean",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logit",
                    "possible_values": [
                        [
                            "vae.decode(z, as_logit=True)",
                            "Call"
                        ],
                        [
                            "x_logits",
                            "Name"
                        ],
                        [
                            "self.dec1(h1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_179": {
                "tensors": {
                    "value": "loss_vaes",
                    "possible_values": [
                        [
                            "[dummy_nll]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.log_var_param",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones([x_c]) * MODELS_NDPM_VAE_X_LOG_VAR_PARAM",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "randn_56": {
                "*size": {
                    "value": "n",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "MODELS_NDPM_VAE_Z_DIM",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "in_channels": {
                    "value": "x_c",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h1_dim",
                    "possible_values": [
                        [
                            "1 * nf",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "MaxPool2d_217": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ReLU_218": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_221": {
                "in_channels": {
                    "value": "h1_cat_dim",
                    "possible_values": [
                        [
                            "1 * nf_cat",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "h2_dim",
                    "possible_values": [
                        [
                            "2 * nf",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "MaxPool2d_222": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ReLU_223": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "in_features": {
                    "value": "feature_volume",
                    "possible_values": [
                        [
                            "x_h // 4 * (x_w // 4) * h2_cat_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc_dim",
                    "possible_values": [
                        [
                            "4 * nf",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_228": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_234": {
                "in_features": {
                    "value": "MODELS_NDPM_VAE_Z_DIM",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * nf_base",
                    "possible_values": []
                }
            },
            "ReLU_235": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_238": {
                "in_features": {
                    "value": "4 * nf_base",
                    "possible_values": []
                },
                "out_features": {
                    "value": "x_h // 4 * (x_w // 4) * 2 * nf_base",
                    "possible_values": []
                }
            },
            "ReLU_241": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_247": {
                "in_channels": {
                    "value": "2 * nf_base",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * nf_base",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_249": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sigmoid_297": {
                "input": {
                    "value": "x_logit",
                    "possible_values": [
                        [
                            "vae.decode(z, as_logit=True)",
                            "Call"
                        ],
                        [
                            "x_logits",
                            "Name"
                        ],
                        [
                            "self.dec1(h1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_22": {
                "*size": {
                    "value": "[x_c]",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "[x_c]",
                    "possible_values": []
                }
            }
        }
    },
    "models/pretrained.py": {
        "torch": {
            "Linear_6": {
                "variable": {
                    "value": "classifier.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "BasicBlock_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BatchNorm2d_20": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_22": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Sequential_24": {
                    "variable": {
                        "value": "self.shortcut",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "Bottleneck_39": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_44": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_45": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Conv2d_46": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "strides",
                                "Name"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_48": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Conv2d_49": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.expansion * planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_51": {
                    "variable": {
                        "value": "self.bn3",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "self.expansion * planes",
                        "possible_values": []
                    }
                },
                "Sequential_53": {
                    "variable": {
                        "value": "self.shortcut",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "ResNet_69": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_planes": {
                    "value": "nf",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "BatchNorm2d_74": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "nf * 1",
                        "possible_values": []
                    }
                },
                "Linear_79": {
                    "variable": {
                        "value": "self.linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "nf * 8 * block.expansion",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "bias",
                        "possible_values": [
                            [
                                "True",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ],
                            [
                                "True",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "SupConResNet_140": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_92": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "possible_values": []
                }
            },
            "avg_pool2d_97": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "relu(out)",
                            "Call"
                        ],
                        [
                            "relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.shortcut",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.shortcut",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.head",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "possible_values": [
                        [
                            "160",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_dim",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_162": {
                "variable": {
                    "value": "feat",
                    "possible_values": []
                },
                "input": {
                    "value": "self.head(feat)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "normalize_164": {
                "variable": {
                    "value": "feat",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "possible_values": [
                        [
                            "self.encoder.features(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(self.head(feat), dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(feat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.head",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_in, dim_in)",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "dim_in",
                    "possible_values": [
                        [
                            "160",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_in",
                    "possible_values": [
                        [
                            "160",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_150": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "in_features": {
                    "value": "dim_in",
                    "possible_values": [
                        [
                            "160",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_dim",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/buffer/aser_retrieve.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "utils/buffer/aser_update.py": {
        "torch": {
            "cat_68": {
                "variable": {
                    "value": "eval_x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eval_x, minority_batch_x)",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "eval_y",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eval_y, minority_batch_y)",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "cand_x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cand_x, cur_x)",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "cand_y",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cand_y, cur_y)",
                    "possible_values": []
                }
            },
            "arange_32": {
                "variable": {
                    "value": "ind",
                    "possible_values": []
                },
                "start": {
                    "value": "buffer.current_index",
                    "possible_values": []
                },
                "end": {
                    "value": "buffer.current_index + x_fit.size(0)",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "utils/buffer/aser_utils.py": {
        "torch": {
            "zeros_25": {
                "variable": {
                    "value": "sv_matrix",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_eval, n_cand)",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_39": {
                "variable": {
                    "value": "indicator_next",
                    "possible_values": []
                },
                "input": {
                    "value": "indicator",
                    "possible_values": [
                        [
                            "(el_vec == cl).float()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_55": {
                "variable": {
                    "value": "row_ind",
                    "possible_values": []
                },
                "start": {
                    "value": "n_eval",
                    "possible_values": [
                        [
                            "eval_x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "repeat_interleave_56": {
                "variable": {
                    "value": "row_mat",
                    "possible_values": []
                },
                "input": {
                    "value": "row_ind",
                    "possible_values": [
                        [
                            "torch.arange(n_eval, device=device)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "n_cand",
                    "possible_values": [
                        [
                            "cand_x.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "row_mat",
                    "possible_values": []
                },
                "input": {
                    "value": "[n_eval, n_cand]",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "threshold",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "total_x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eval_x, cand_x)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "arange_43": {
                "start": {
                    "value": "n_cand",
                    "possible_values": [
                        [
                            "cand_x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/buffer/buffer.py": {
        "torch": {
            "Buffer_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.params": {
                    "value": "params",
                    "possible_values": []
                },
                "self.model": {
                    "value": "model",
                    "possible_values": []
                }
            }
        }
    },
    "utils/buffer/buffer_utils.py": {
        "torch": {
            "from_numpy_17": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.choice(valid_indices, num_retrieve, replace=False)",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "data": {
                    "value": "select",
                    "possible_values": [
                        [
                            "[None] * len(cur_y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "sample_ind",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "mm_54": {
                "input": {
                    "value": "x1",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x2.t()",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "cls.class_num_cache",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_class",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randperm_110": {
                "variable": {
                    "value": "perm_ind",
                    "possible_values": []
                },
                "n": {
                    "value": "len(valid_ind)",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_113": {
                "variable": {
                    "value": "sample_ind",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sample_ind, ind)",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "list(valid_ind)",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            }
        }
    },
    "utils/buffer/gss_greedy_update.py": {
        "torch": {
            "cross_entropy_76": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "buffer.model.forward(batch_x)",
                    "possible_values": []
                },
                "target": {
                    "value": "batch_y",
                    "possible_values": [
                        [
                            "buffer.buffer_label[random_batch_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_92": {
                "variable": {
                    "value": "shuffeled_inds",
                    "possible_values": []
                },
                "n": {
                    "value": "buffer.current_index",
                    "possible_values": []
                }
            },
            "cross_entropy_99": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "buffer.model.forward(batch_x)",
                    "possible_values": []
                },
                "target": {
                    "value": "batch_y",
                    "possible_values": [
                        [
                            "buffer.buffer_label[random_batch_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_entropy_117": {
                "variable": {
                    "value": "ptloss",
                    "possible_values": []
                },
                "input": {
                    "value": "buffer.model.forward(x.unsqueeze(0))",
                    "possible_values": []
                },
                "target": {
                    "value": "y.unsqueeze(0)",
                    "possible_values": []
                }
            },
            "multinomial_30": {
                "variable": {
                    "value": "index",
                    "possible_values": []
                },
                "input": {
                    "value": "buffer_sim",
                    "possible_values": [
                        [
                            "(buffer_score - torch.min(buffer_score)) / (torch.max(buffer_score) - torch.min(buffer_score) + 0.01)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "x.size(0)",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "multinomial_38": {
                "variable": {
                    "value": "outcome",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((scaled_batch_item_sim, buffer_repl_batch_sim), dim=1)",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "arange_41": {
                "variable": {
                    "value": "added_indx",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_item_sim.size(0)",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "num_mem_subs",
                    "possible_values": [
                        [
                            "min(self.mem_strength, buffer.current_index // gss_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "sum(grad_dims)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "batch_x.size(0)",
                    "possible_values": []
                }
            },
            "cat_38": {
                "tensors": {
                    "value": "(scaled_batch_item_sim, buffer_repl_batch_sim)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "x.size(0)",
                    "possible_values": []
                }
            },
            "min_27": {
                "input": {
                    "value": "buffer_score",
                    "possible_values": [
                        [
                            "self.buffer_score[:buffer.current_index].cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_28": {
                "input": {
                    "value": "buffer_score",
                    "possible_values": [
                        [
                            "self.buffer_score[:buffer.current_index].cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "min_28": {
                "input": {
                    "value": "buffer_score",
                    "possible_values": [
                        [
                            "self.buffer_score[:buffer.current_index].cpu()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/buffer/mem_match.py": {
        "torch": {
            "tensor_13": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            }
        }
    },
    "utils/buffer/mir_retrieve.py": {
        "torch": {
            "zeros_like_59": {
                "variable": {
                    "value": "param.grad",
                    "possible_values": []
                },
                "input": {
                    "value": "param.data",
                    "possible_values": []
                }
            },
            "cross_entropy_26": {
                "variable": {
                    "value": "pre_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_pre",
                    "possible_values": [
                        [
                            "buffer.model.forward(sub_x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sub_y",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "cross_entropy_27": {
                "variable": {
                    "value": "post_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_post",
                    "possible_values": [
                        [
                            "model_temp.forward(sub_x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "sub_y",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "utils/buffer/reservoir_update.py": {
        "torch": {}
    },
    "utils/buffer/sc_retrieve.py": {
        "torch": {
            "tensor_15": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                }
            }
        }
    },
    "utils/io.py": {
        "torch": {
            "save_44": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "{'opt': opt, 'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "possible_values": []
                }
            }
        }
    },
    "utils/kd_manager.py": {
        "torch": {
            "log_softmax_7": {
                "variable": {
                    "value": "log_scores_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "scores / T",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_8": {
                "variable": {
                    "value": "targets_norm",
                    "possible_values": []
                },
                "input": {
                    "value": "target_scores / T",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "utils/loss.py": {
        "torch": {
            "SupConLoss_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.temperature": {
                    "value": "temperature",
                    "possible_values": [
                        [
                            "0.07",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.contrast_mode": {
                    "value": "contrast_mode",
                    "possible_values": [
                        [
                            "'all'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_56": {
                "variable": {
                    "value": "contrast_feature",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.unbind(features, dim=1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "div_67": {
                "variable": {
                    "value": "anchor_dot_contrast",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(anchor_feature, contrast_feature.T)",
                    "possible_values": []
                },
                "other": {
                    "value": "self.temperature",
                    "possible_values": []
                }
            },
            "max_71": {
                "variable": {
                    "value": "(logits_max, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_dot_contrast",
                    "possible_values": [
                        [
                            "torch.div(torch.matmul(anchor_feature, contrast_feature.T), self.temperature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "scatter_77": {
                "variable": {
                    "value": "logits_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(mask)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(batch_size * anchor_count).view(-1, 1).to(device)",
                    "possible_values": []
                },
                "src": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "device_32": {
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "device_34": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "eye_46": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "features.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "unbind_56": {
                "input": {
                    "value": "features",
                    "possible_values": [
                        [
                            "features.view(features.shape[0], features.shape[1], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "matmul_68": {
                "input": {
                    "value": "anchor_feature",
                    "possible_values": [
                        [
                            "features[:, 0]",
                            "Subscript"
                        ],
                        [
                            "contrast_feature",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "contrast_feature.T",
                    "possible_values": []
                }
            },
            "ones_like_78": {
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.eye(batch_size, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "mask.float().to(device)",
                            "Call"
                        ],
                        [
                            "torch.eq(labels, labels.T).float().to(device)",
                            "Call"
                        ],
                        [
                            "mask.repeat(anchor_count, contrast_count)",
                            "Call"
                        ],
                        [
                            "mask * logits_mask",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_80": {
                "start": {
                    "value": "batch_size * anchor_count",
                    "possible_values": []
                }
            },
            "exp_86": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "anchor_dot_contrast - logits_max.detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_87": {
                "input": {
                    "value": "exp_logits.sum(1, keepdim=True)",
                    "possible_values": []
                }
            },
            "eq_51": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "labels.contiguous().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "labels.T",
                    "possible_values": []
                }
            }
        }
    },
    "utils/setup_elements.py": {
        "torch": {
            "SGD_73": {
                "variable": {
                    "value": "optim",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "possible_values": []
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "optim",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "model.linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2560",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "possible_values": [
                        [
                            "n_classes[params.data]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "model.linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "640",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "possible_values": [
                        [
                            "n_classes[params.data]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "zeros_101": {
                "variable": {
                    "value": "zero_tensor",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_labels, dim)",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "model_features",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "deep_features_",
                    "possible_values": []
                },
                "tensors": {
                    "value": "deep_features_list",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "squeeze_80": {
                "variable": {
                    "value": "batch_deep_features_",
                    "possible_values": []
                },
                "input": {
                    "value": "model_features(batch_x)",
                    "possible_values": []
                }
            }
        }
    }
}