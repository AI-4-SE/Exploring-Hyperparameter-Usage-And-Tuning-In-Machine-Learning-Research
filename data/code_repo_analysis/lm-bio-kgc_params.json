{
    "script/compute_kge_scores.py": {
        "sklearn": {
            "cosine_similarity_79": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "text_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(text_emb_file).numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_67": {
                "variable": {
                    "value": "seen",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sorted(train_nodes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "unseen",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sorted(unseen_nodes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "text_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "text_emb_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text_emb_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cosine_similarity(text_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(similarity).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_149": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.resdir, 'checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "meshgrid_87": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "unseen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(sorted(unseen_nodes)))",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "seen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(sorted(train_nodes)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_88": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_89": {
                "variable": {
                    "value": "ent_emb[unseen, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(similarity[idx], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ent_emb[seen, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_128": {
                "variable": {
                    "value": "split_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.subgraph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_177": {
                "obj": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'valid': dict(valid_scores), 'test': dict(test_scores)}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.resdir, savename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_45": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_98": {
                "variable": {
                    "value": "most_similar_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity[unseen, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_122": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "triples[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "triples.items()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "script/evaluate_router.py": {
        "sklearn": {
            "accuracy_score_592": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((labels['test']['head'], labels['test']['tail']))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "np.array(predicted)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_599": {
                "variable": {
                    "value": "report",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((labels['test']['head'], labels['test']['tail']))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "np.array(predicted)",
                            "Call"
                        ]
                    ]
                }
            },
            "LogisticRegression_490": {
                "variable": {
                    "value": "clf[head]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "kwargs",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "LogisticRegression_491": {
                "variable": {
                    "value": "clf[tail]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "kwargs",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "MLPClassifier_507": {
                "variable": {
                    "value": "clf[head]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "kwargs",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "MLPClassifier_508": {
                "variable": {
                    "value": "clf[tail]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "kwargs",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "cross_val_score_524": {
                "estimator": {
                    "value": "clf[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['valid'][train_idx[key]]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels['valid'][key][train_idx[key]]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "cat_334": {
                "variable": {
                    "value": "valid_metrics",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[metrics[model_name]['valid'][args.metric].unsqueeze(1) for model_name in args.model_names]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_336": {
                "variable": {
                    "value": "best_model_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_metrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([metrics[model_name]['valid'][args.metric].unsqueeze(1) for model_name in args.model_names], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "test_metrics",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[metrics[model_name]['test'][args.metric].unsqueeze(1) for model_name in args.model_names]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_343": {
                "variable": {
                    "value": "best_model_test",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_metrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([metrics[model_name]['test'][args.metric].unsqueeze(1) for model_name in args.model_names], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_259": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_260": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_272": {
                "variable": {
                    "value": "split_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.subgraph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_299": {
                "variable": {
                    "value": "valid[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "valid[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_300": {
                "variable": {
                    "value": "test[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_316": {
                "variable": {
                    "value": "scores[model_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "scores_fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(args.model_names, args.scores_fnames)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_616": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[metrics[model_name]['test'][metric].unsqueeze(1) for model_name in args.model_names]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "[neg_head, neg_tail]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "std_337": {
                "input": {
                    "value": "valid_metrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([metrics[model_name]['valid'][args.metric].unsqueeze(1) for model_name in args.model_names], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_344": {
                "input": {
                    "value": "test_metrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([metrics[model_name]['test'][args.metric].unsqueeze(1) for model_name in args.model_names], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_419": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(pos_scores, dim=1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_157": {
                "tensors": {
                    "value": "[neg_head, neg_tail]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_tensor_405": {
                "obj": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "triples.items()",
                            "Call"
                        ],
                        [
                            "metrics[model_name]['test'][args.metric].mean().item()",
                            "Call"
                        ],
                        [
                            "metrics_router.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_555": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "softmax(np.concatenate(proba, axis=0)[:, :-1], axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(proba)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_584": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_head, pos_tail]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_585": {
                "variable": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[neg_head, neg_tail]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_547": {
                "tensors": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "triples.items()",
                            "Call"
                        ],
                        [
                            "metrics[model_name]['test'][args.metric].mean().item()",
                            "Call"
                        ],
                        [
                            "metrics_router.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_547": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_618": {
                "start": {
                    "value": "values.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "script/compute_entity_encodings.py": {
        "torch": {
            "device_41": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.arange(len(names))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_62": {
                "variable": {
                    "value": "saved",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.result_dir, 'best_model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_98": {
                "obj": {
                    "value": "encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(encodings)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "savename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.result_dir, f'entity-encodings{desc}{suffix}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_76": {
                "start": {
                    "value": "len(names)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "script/create_hetionet_dataset.py": {
        "torch": {
            "save_177": {
                "obj": {
                    "value": "split_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'num_nodes': len(info), 'entity_dict': entity_dict, 'train': {'head': train[:, 0], 'tail': train[:, 1], 'relation': relations[train_idx], 'head_type': head_type[train_idx].tolist(), 'tail_type': tail_type[train_idx].tolist()}, 'valid': {'head': valid[:, 0], 'tail': valid[:, 1], 'relation': relations[valid_idx], 'head_type': head_type[valid_idx].tolist(), 'tail_type': tail_type[valid_idx].tolist()}, 'test': {'head': test[:, 0], 'tail': test[:, 1], 'relation': relations[test_idx], 'head_type': head_type[test_idx].tolist(), 'tail_type': tail_type[test_idx].tolist()}}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.outdir, savename)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "script/create_msi_dataset.py": {
        "torch": {
            "save_178": {
                "obj": {
                    "value": "split_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'num_nodes': len(info), 'entity_dict': entity_dict, 'train': {'head': train[:, 0], 'tail': train[:, 1], 'relation': relations[train_idx], 'head_type': head_type[train_idx].tolist(), 'tail_type': tail_type[train_idx].tolist()}, 'valid': {'head': valid[:, 0], 'tail': valid[:, 1], 'relation': relations[valid_idx], 'head_type': head_type[valid_idx].tolist(), 'tail_type': tail_type[valid_idx].tolist()}, 'test': {'head': test[:, 0], 'tail': test[:, 1], 'relation': relations[test_idx], 'head_type': head_type[test_idx].tolist(), 'tail_type': tail_type[test_idx].tolist()}}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.outdir, savename)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "script/create_repodb_dataset.py": {
        "torch": {
            "save_160": {
                "obj": {
                    "value": "split_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'num_nodes': len(info), 'entity_dict': entity_dict, 'train': {'head': train[:, 0], 'tail': train[:, 1], 'relation': np.zeros(len(train)).astype(int), 'head_type': ['drug'] * len(train), 'tail_type': ['disease'] * len(train)}, 'valid': {'head': valid[:, 0], 'tail': valid[:, 1], 'relation': np.zeros(len(valid)).astype(int), 'head_type': ['drug'] * len(valid), 'tail_type': ['disease'] * len(valid)}, 'test': {'head': test[:, 0], 'tail': test[:, 1], 'relation': np.zeros(len(test)).astype(int), 'head_type': ['drug'] * len(test), 'tail_type': ['disease'] * len(test)}}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.outdir, savename)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "script/evaluate_adaptive_weighting.py": {
        "torch": {
            "MarginRankingLoss_222": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_381": {
                "variable": {
                    "value": "scores1",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.scores_fname1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_385": {
                "variable": {
                    "value": "scores2",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.scores_fname2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_404": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AveragingDataset(train_triples, scores['model1']['train'], scores['model2']['train'], info_file, num_nodes, negative_samples=args.negative_samples, tokens_fname=args.tokens_file)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "AveragingDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_425": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_470": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AveragingDataset(test_triples, scores['model1']['test'], scores['model2']['test'], info_file, num_nodes, negative_samples=500, tokens_fname=args.tokens_file)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "AveragingDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_92": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.dropouts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_features(triples, info_file, num_nodes, tokens_fname=tokens_fname)",
                            "Call"
                        ],
                        [
                            "np.concatenate((features, y_pos1, y_pos2), axis=1)",
                            "Call"
                        ],
                        [
                            "features / (np.std(features, axis=0, keepdims=True) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([elem['features'] for elem in data])",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_193": {
                "variable": {
                    "value": "pos1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[elem['pos1'] for elem in data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "pos2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[elem['pos2'] for elem in data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "neg1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[elem['neg1'] for elem in data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "neg2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[elem['neg2'] for elem in data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[elem['features'] for elem in data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Softmax_208": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_233": {
                "variable": {
                    "value": "(weight1, weight2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch.features)",
                            "Call"
                        ],
                        [
                            "model(batch.features)",
                            "Call"
                        ],
                        [
                            "torch.cat(weights_list)",
                            "Call"
                        ],
                        [
                            "torch.cat([weights[head_idx], weights[tail_idx]])",
                            "Call"
                        ],
                        [
                            "evaluate(model, loader, device=device, return_weights=True)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_238": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight1 * batch.pos1 + weight2 * batch.pos2",
                            "BinOp"
                        ],
                        [
                            "weight1 * batch.pos1 + weight2 * batch.pos2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "chunk_275": {
                "variable": {
                    "value": "(weight1, weight2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch.features)",
                            "Call"
                        ],
                        [
                            "model(batch.features)",
                            "Call"
                        ],
                        [
                            "torch.cat(weights_list)",
                            "Call"
                        ],
                        [
                            "torch.cat([weights[head_idx], weights[tail_idx]])",
                            "Call"
                        ],
                        [
                            "evaluate(model, loader, device=device, return_weights=True)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_289": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metrics.items()",
                            "Call"
                        ],
                        [
                            "metrics_batch.items()",
                            "Call"
                        ],
                        [
                            "valid_triples.items()",
                            "Call"
                        ],
                        [
                            "scores[method]['valid'].items()",
                            "Call"
                        ],
                        [
                            "test_metrics.items()",
                            "Call"
                        ],
                        [
                            "metrics.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_293": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_294": {
                "variable": {
                    "value": "head_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_295": {
                "variable": {
                    "value": "tail_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weights[head_idx], weights[tail_idx]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_330": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_331": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_343": {
                "variable": {
                    "value": "split_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.subgraph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_416": {
                "variable": {
                    "value": "eval_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AveragingDataset(eval_triples, scores['model1']['eval'], scores['model2']['eval'], info_file, num_nodes, negative_samples=500, tokens_fname=args.tokens_file)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "AveragingDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "dropout(x)",
                            "Call"
                        ],
                        [
                            "self.lins[-1](x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_94": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset.features.size(1)",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_95": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.lins[:-1], self.dropouts)",
                            "Call"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_172": {
                "n": {
                    "value": "self.total_negatives",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_98": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.lins[:-1], self.dropouts)",
                            "Call"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "script/features.py": {
        "torch": {
            "load_55": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "tokens_fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_64": {
                "obj": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arr.cpu()",
                            "Call"
                        ],
                        [
                            "arr",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "script/kge_util.py": {
        "torch": {
            "DataLoader_44": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.arange(len(head_all))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_45": {
                "variable": {
                    "value": "head_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head_all.unsqueeze(1), head_neg_all]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.arange(len(tail_all))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_78": {
                "variable": {
                    "value": "tail_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tail_all.unsqueeze(1), tail_neg_all]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_132": {
                "variable": {
                    "value": "(re_head, im_head)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(ent_emb, dim=0, index=head_part.view(-1)).view(batch_size, negative_sample_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(ent_emb, dim=0, index=head_part).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_133": {
                "variable": {
                    "value": "(re_tail, im_tail)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(ent_emb, dim=0, index=tail_part).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(ent_emb, dim=0, index=tail_part.view(-1)).view(batch_size, negative_sample_size, -1)",
                            "Call"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_135": {
                "variable": {
                    "value": "embedding_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([(gamma + epsilon) / hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_142": {
                "variable": {
                    "value": "re_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phase_relation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relation / (embedding_range.item() / pi)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_143": {
                "variable": {
                    "value": "im_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phase_relation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relation / (embedding_range.item() / pi)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_156": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[re_score, im_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_174": {
                "variable": {
                    "value": "(re_head, im_head)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(ent_emb, dim=0, index=head_part.view(-1)).view(batch_size, negative_sample_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(ent_emb, dim=0, index=head_part).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_175": {
                "variable": {
                    "value": "(re_relation, im_relation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(rel_emb, dim=0, index=relation_all[batch]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rel_emb, dim=0, index=relation_all[batch]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "relation",
                            "Method Argument"
                        ],
                        [
                            "relation",
                            "Method Argument"
                        ],
                        [
                            "relation",
                            "Method Argument"
                        ],
                        [
                            "relation",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_176": {
                "variable": {
                    "value": "(re_tail, im_tail)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(ent_emb, dim=0, index=tail_part).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(ent_emb, dim=0, index=tail_part.view(-1)).view(batch_size, negative_sample_size, -1)",
                            "Call"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_51": {
                "variable": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ent_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ent_emb",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "head_part.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_56": {
                "variable": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_emb",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "relation_all[batch]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "triples['relation']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_56": {
                "variable": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_61": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ent_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ent_emb",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tail_part",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tail_all[batch]",
                            "Subscript"
                        ],
                        [
                            "tail_cat[batch]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_61": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_84": {
                "variable": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ent_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ent_emb",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "head_part",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head_cat[batch]",
                            "Subscript"
                        ],
                        [
                            "head_all[batch]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_89": {
                "variable": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_emb",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "relation_all[batch]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "triples['relation']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_89": {
                "variable": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_94": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ent_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ent_emb",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tail_part.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "scores[metrics][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores['metrics'][key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_44": {
                "start": {
                    "value": "len(head_all)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_77": {
                "start": {
                    "value": "len(tail_all)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "scores[scores][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores['scores'][key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_198": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scorefn(head, relation, tail, 'head-batch')",
                            "Call"
                        ],
                        [
                            "scorefn(head, relation, tail, 'tail-batch')",
                            "Call"
                        ],
                        [
                            "torch.stack([re_score, im_score], dim=0)",
                            "Call"
                        ],
                        [
                            "score.norm(dim=0)",
                            "Call"
                        ],
                        [
                            "gamma - score.sum(dim=2)",
                            "BinOp"
                        ],
                        [
                            "re_head * re_score + im_head * im_score",
                            "BinOp"
                        ],
                        [
                            "re_score * re_tail + im_score * im_tail",
                            "BinOp"
                        ],
                        [
                            "score.sum(dim=2)",
                            "Call"
                        ],
                        [
                            "head + (relation - tail)",
                            "BinOp"
                        ],
                        [
                            "head + relation - tail",
                            "BinOp"
                        ],
                        [
                            "gamma - torch.norm(score, p=1, dim=2)",
                            "BinOp"
                        ],
                        [
                            "head * (relation * tail)",
                            "BinOp"
                        ],
                        [
                            "head * relation * tail",
                            "BinOp"
                        ],
                        [
                            "score.sum(dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "script/pretokenize.py": {
        "torch": {
            "save_95": {
                "obj": {
                    "value": "tokenized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "savename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('tokenized', f'tokens-{args.dataset}-{args.model}{rel}{use_desc}{sep}{split}.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/kge/dataloader.py": {
        "torch": {
            "sqrt_35": {
                "variable": {
                    "value": "subsampling_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / torch.Tensor([subsampling_weight])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_50": {
                "variable": {
                    "value": "positive_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_[0] for _ in data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_51": {
                "variable": {
                    "value": "negative_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_[1] for _ in data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "subsample_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_[2] for _ in data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_95": {
                "variable": {
                    "value": "positive_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_[0] for _ in data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_96": {
                "variable": {
                    "value": "negative_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_[1] for _ in data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_39": {
                "variable": {
                    "value": "negative_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.entity_dict[head_type][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "high": {
                    "value": "self.entity_dict[head_type][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.negative_sample_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_41": {
                "variable": {
                    "value": "negative_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.entity_dict[tail_type][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "high": {
                    "value": "self.entity_dict[tail_type][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.negative_sample_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "negative_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor([head + self.entity_dict[head_type][0]]), torch.from_numpy(self.triples['head_neg'][idx] + self.entity_dict[head_type][0])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "negative_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor([head + self.entity_dict[head_type][0]]), torch.randint(self.entity_dict[head_type][0], self.entity_dict[head_type][1], size=(self.neg_size,))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "negative_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor([tail + self.entity_dict[tail_type][0]]), torch.from_numpy(self.triples['tail_neg'][idx] + self.entity_dict[tail_type][0])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "negative_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor([tail + self.entity_dict[tail_type][0]]), torch.randint(self.entity_dict[tail_type][0], self.entity_dict[tail_type][1], size=(self.neg_size,))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "ndarray": {
                    "value": "self.triples['head_neg'][idx] + self.entity_dict[head_type][0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randint_82": {
                "low": {
                    "value": "self.entity_dict[head_type][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "high": {
                    "value": "self.entity_dict[head_type][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.neg_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "ndarray": {
                    "value": "self.triples['tail_neg'][idx] + self.entity_dict[tail_type][0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randint_89": {
                "low": {
                    "value": "self.entity_dict[tail_type][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "high": {
                    "value": "self.entity_dict[tail_type][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.neg_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/kge/model.py": {
        "torch": {
            "Parameter_32": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([gamma])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.embedding_range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([(self.gamma.item() + self.epsilon) / hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.relation_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nrelation, self.relation_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_193": {
                "variable": {
                    "value": "(re_head, im_head)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=sample[:, 0]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=head_part.view(-1)).view(batch_size, negative_sample_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=head_part[:, 0]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_194": {
                "variable": {
                    "value": "(re_relation, im_relation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.relation_embedding, dim=0, index=sample[:, 1]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.relation_embedding, dim=0, index=tail_part[:, 1]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.relation_embedding, dim=0, index=head_part[:, 1]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "relation",
                            "Method Argument"
                        ],
                        [
                            "relation",
                            "Method Argument"
                        ],
                        [
                            "relation",
                            "Method Argument"
                        ],
                        [
                            "relation",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_195": {
                "variable": {
                    "value": "(re_tail, im_tail)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=sample[:, 2]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=tail_part[:, 2]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=tail_part.view(-1)).view(batch_size, negative_sample_size, -1)",
                            "Call"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_212": {
                "variable": {
                    "value": "(re_head, im_head)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=sample[:, 0]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=head_part.view(-1)).view(batch_size, negative_sample_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=head_part[:, 0]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_213": {
                "variable": {
                    "value": "(re_tail, im_tail)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=sample[:, 2]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=tail_part[:, 2]).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=tail_part.view(-1)).view(batch_size, negative_sample_size, -1)",
                            "Call"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_219": {
                "variable": {
                    "value": "re_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phase_relation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relation / (self.embedding_range.item() / pi)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_220": {
                "variable": {
                    "value": "im_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phase_relation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relation / (self.embedding_range.item() / pi)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_233": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[re_score, im_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_330": {
                "variable": {
                    "value": "test_dataloader_head",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TestDataset(test_triples, args, 'head-batch', random_sampling, entity_dict)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "max(1, args.cpu_num // 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "TestDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_343": {
                "variable": {
                    "value": "test_dataloader_tail",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TestDataset(test_triples, args, 'tail-batch', random_sampling, entity_dict)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "max(1, args.cpu_num // 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "TestDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_398": {
                "variable": {
                    "value": "positives",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(zip(triples['head'], triples['relation'], triples['tail']))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_405": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "positives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(list(zip(triples['head'], triples['relation'], triples['tail'])))",
                            "Call"
                        ],
                        [
                            "positives.cuda()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_410": {
                "variable": {
                    "value": "y_pred_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(y_pred_pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_461": {
                "variable": {
                    "value": "y_pred_neg_head",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred_neg_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(y_pred_neg_head)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_462": {
                "variable": {
                    "value": "y_pred_neg_tail",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred_neg_tail",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(y_pred_neg_tail)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_463": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_pred_pos, y_pred_pos]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_464": {
                "variable": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_pred_neg_head, y_pred_neg_tail]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.load(init_embedding, map_location='cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nentity, self.entity_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_91": {
                "variable": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sample[:, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_97": {
                "variable": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.relation_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sample[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_97": {
                "variable": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_103": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sample[:, 2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sample",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_103": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_250": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "margin": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsigmoid_274": {
                "variable": {
                    "value": "positive_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positive_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(positive_sample)",
                            "Call"
                        ],
                        [
                            "model(positive_sample)",
                            "Call"
                        ],
                        [
                            "F.logsigmoid(positive_score).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_274": {
                "variable": {
                    "value": "positive_score",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_426": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.tensor(neg_nodes)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_441": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.tensor(neg_nodes)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "nrelation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nrelation",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.relation_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_114": {
                "variable": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "head_part.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_121": {
                "variable": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.relation_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tail_part[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_121": {
                "variable": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_128": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tail_part[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_128": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_180": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_func[self.model_name](head, relation, tail, mode)",
                            "Call"
                        ],
                        [
                            "head + (relation - tail)",
                            "BinOp"
                        ],
                        [
                            "head + relation - tail",
                            "BinOp"
                        ],
                        [
                            "self.gamma.item() - torch.norm(score, p=1, dim=2)",
                            "BinOp"
                        ],
                        [
                            "head * (relation * tail)",
                            "BinOp"
                        ],
                        [
                            "head * relation * tail",
                            "BinOp"
                        ],
                        [
                            "score.sum(dim=2)",
                            "Call"
                        ],
                        [
                            "re_head * re_score + im_head * im_score",
                            "BinOp"
                        ],
                        [
                            "re_score * re_tail + im_score * im_tail",
                            "BinOp"
                        ],
                        [
                            "score.sum(dim=2)",
                            "Call"
                        ],
                        [
                            "torch.stack([re_score, im_score], dim=0)",
                            "Call"
                        ],
                        [
                            "score.norm(dim=0)",
                            "Call"
                        ],
                        [
                            "self.gamma.item() - score.sum(dim=2)",
                            "BinOp"
                        ],
                        [
                            "model((positive_sample, negative_sample), mode)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsigmoid_270": {
                "variable": {
                    "value": "negative_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-negative_score",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_270": {
                "variable": {
                    "value": "negative_score",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_288": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positive_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(positive_sample)",
                            "Call"
                        ],
                        [
                            "model(positive_sample)",
                            "Call"
                        ],
                        [
                            "F.logsigmoid(positive_score).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_387": {
                "variable": {
                    "value": "metrics[metric]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_logs[metric]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_387": {
                "variable": {
                    "value": "metrics[metric]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_47": {
                "f": {
                    "value": "init_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "nentity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nentity",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.entity_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_138": {
                "variable": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "head_part[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_138": {
                "variable": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_144": {
                "variable": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.relation_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "head_part[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_144": {
                "variable": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_150": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tail_part.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_426": {
                "data": {
                    "value": "neg_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "negatives['head'][i]",
                            "Subscript"
                        ],
                        [
                            "negatives['tail'][i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_435": {
                "*size": {
                    "value": "max_neg - len(neg_nodes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_437": {
                "tensors": {
                    "value": "y_pred_neg_elem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_437": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_441": {
                "data": {
                    "value": "neg_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "negatives['head'][i]",
                            "Subscript"
                        ],
                        [
                            "negatives['tail'][i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_450": {
                "*size": {
                    "value": "max_neg - len(neg_nodes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_452": {
                "tensors": {
                    "value": "y_pred_neg_elem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_452": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_267": {
                "input": {
                    "value": "negative_score * args.adversarial_temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsigmoid_268": {
                "input": {
                    "value": "-negative_score",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/kge/run.py": {
        "torch": {
            "save_115": {
                "obj": {
                    "value": "{**save_variable_list, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_path, 'checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_205": {
                "variable": {
                    "value": "split_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.subgraph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_281": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.init_checkpoint, 'checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_286": {
                "variable": {
                    "value": "train_dataloader_head",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TrainDataset(train_triples, nentity, nrelation, args.negative_sample_size, 'head-batch', train_count, train_true_head, train_true_tail, entity_dict)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "max(1, args.cpu_num // 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "TrainDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_297": {
                "variable": {
                    "value": "train_dataloader_tail",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TrainDataset(train_triples, nentity, nrelation, args.negative_sample_size, 'tail-batch', train_count, train_true_head, train_true_tail, entity_dict)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "max(1, args.cpu_num // 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "TrainDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_312": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, kge_model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "current_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ],
                        [
                            "checkpoint['current_learning_rate']",
                            "Subscript"
                        ],
                        [
                            "current_learning_rate / 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_405": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_path, 'checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_365": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, kge_model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "current_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ],
                        [
                            "checkpoint['current_learning_rate']",
                            "Subscript"
                        ],
                        [
                            "current_learning_rate / 10",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/lm/dataloader.py": {
        "torch": {
            "tensor_45": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[_['pos_idx'] for _ in data]",
                            "ListComp"
                        ],
                        [
                            "idx + list(chain(*zip(*[_['neg_idx'] for _ in data])))",
                            "BinOp"
                        ],
                        [
                            "idx // 2",
                            "BinOp"
                        ],
                        [
                            "idx // 2",
                            "BinOp"
                        ],
                        [
                            "[_['pos_idx'] for _ in data] + [_['neg_idx'] for _ in data]",
                            "BinOp"
                        ],
                        [
                            "idx // 2",
                            "BinOp"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "relations",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[_['pos_rel'] for _ in data]",
                            "ListComp"
                        ],
                        [
                            "rel + list(chain(*zip(*[_['neg_rel'] for _ in data])))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[_['pos_y'] for _ in data]",
                            "ListComp"
                        ],
                        [
                            "y + list(chain(*zip(*[_['neg_y'] for _ in data])))",
                            "BinOp"
                        ],
                        [
                            "[_['pos_y'] for _ in data] + [_['neg_y'] for _ in data]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_55": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_182": {
                "variable": {
                    "value": "self.neg_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.triples['head_neg'][0])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.len,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_261": {
                "variable": {
                    "value": "positive",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[head, tail]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[relation]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_103": {
                "variable": {
                    "value": "self.negatives",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "negatives_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_170": {
                "variable": {
                    "value": "self.info_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "info_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "info_filename",
                            "Method Argument"
                        ],
                        [
                            "info_filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_180": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_267": {
                "variable": {
                    "value": "negatives",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[neg, tail] for neg in neg_head]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "data": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[_['pos_rel'] for _ in data] + [_['neg_rel'] for _ in data]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_235": {
                "data": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[_['pos_idx'] for _ in data]",
                            "ListComp"
                        ],
                        [
                            "idx + list(chain(*zip(*[_['neg_idx'] for _ in data])))",
                            "BinOp"
                        ],
                        [
                            "idx // 2",
                            "BinOp"
                        ],
                        [
                            "idx // 2",
                            "BinOp"
                        ],
                        [
                            "[_['pos_idx'] for _ in data] + [_['neg_idx'] for _ in data]",
                            "BinOp"
                        ],
                        [
                            "idx // 2",
                            "BinOp"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_236": {
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[_['pos_y'] for _ in data]",
                            "ListComp"
                        ],
                        [
                            "y + list(chain(*zip(*[_['neg_y'] for _ in data])))",
                            "BinOp"
                        ],
                        [
                            "[_['pos_y'] for _ in data] + [_['neg_y'] for _ in data]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_236": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_270": {
                "variable": {
                    "value": "negatives",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[head, neg] for neg in neg_tail]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "src/lm/evaluate.py": {
        "torch": {
            "tensor_107": {
                "variable": {
                    "value": "positives",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(zip(triples['head'], triples['relation'], triples['tail']))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_110": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "positives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(list(zip(triples['head'], triples['relation'], triples['tail'])))",
                            "Call"
                        ],
                        [
                            "tqdm(loader)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "y_pred_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(y_pred_pos)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(y_pred_pos, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_159": {
                "variable": {
                    "value": "y_pred_neg_head",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred_neg_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(y_pred_neg_head)",
                            "Call"
                        ],
                        [
                            "torch.cat(scores).reshape((ntriples, num_neg_samples))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_186": {
                "variable": {
                    "value": "y_pred_neg_tail",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred_neg_tail",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(y_pred_neg_tail)",
                            "Call"
                        ],
                        [
                            "torch.cat(scores).reshape((ntriples, num_neg_samples))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_189": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_pred_pos, y_pred_pos]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "neg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_pred_neg_head, y_pred_neg_tail]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_223": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RankingTestDataset(triples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset) if local_rank != -1 else None",
                            "IfExp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4 * ngpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_228": {
                "variable": {
                    "value": "mrr_list",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * num_triples",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_229": {
                "variable": {
                    "value": "hits1_list",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * num_triples",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "variable": {
                    "value": "hits3_list",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * num_triples",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "variable": {
                    "value": "hits10_list",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * num_triples",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "y_pred_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(y_pred_pos)",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(y_pred_pos, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "y_pred_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(y_pred_neg, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "idx_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_356": {
                "variable": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "triples['head']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_357": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "triples['tail']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_358": {
                "variable": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "triples['relation']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_359": {
                "variable": {
                    "value": "head_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "triples['head_neg'][:, :num_neg_samples]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_360": {
                "variable": {
                    "value": "tail_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "triples['tail_neg'][:, :num_neg_samples]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_369": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.arange(len(head))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_387": {
                "variable": {
                    "value": "y_pred_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'y_pred_pos': y_pred_pos, 'y_pred_neg': y_pred_neg}",
                            "Dict"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "{'y_pred_pos': y_pred_pos, 'y_pred_neg': y_pred_neg_head}",
                            "Dict"
                        ],
                        [
                            "{'y_pred_pos': y_pred_pos, 'y_pred_neg': y_pred_neg_tail}",
                            "Dict"
                        ]
                    ]
                }
            },
            "arange_392": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "ntriples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head_neg.size(0)",
                            "Call"
                        ],
                        [
                            "tail_neg.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "repeat_interleave_392": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_neg_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_393": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.arange(len(head_neg))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_411": {
                "variable": {
                    "value": "y_pred_neg_head",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'y_pred_pos': y_pred_pos, 'y_pred_neg': y_pred_neg}",
                            "Dict"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "{'y_pred_pos': y_pred_pos, 'y_pred_neg': y_pred_neg_head}",
                            "Dict"
                        ],
                        [
                            "{'y_pred_pos': y_pred_pos, 'y_pred_neg': y_pred_neg_tail}",
                            "Dict"
                        ]
                    ]
                }
            },
            "reshape_411": {
                "variable": {
                    "value": "y_pred_neg_head",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(ntriples, num_neg_samples)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_416": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "ntriples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head_neg.size(0)",
                            "Call"
                        ],
                        [
                            "tail_neg.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "repeat_interleave_416": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_neg_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_417": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.arange(len(tail_neg))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_435": {
                "variable": {
                    "value": "y_pred_neg_tail",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'y_pred_pos': y_pred_pos, 'y_pred_neg': y_pred_neg}",
                            "Dict"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "{'y_pred_pos': y_pred_pos, 'y_pred_neg': y_pred_neg_head}",
                            "Dict"
                        ],
                        [
                            "{'y_pred_pos': y_pred_pos, 'y_pred_neg': y_pred_neg_tail}",
                            "Dict"
                        ]
                    ]
                }
            },
            "reshape_435": {
                "variable": {
                    "value": "y_pred_neg_tail",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(ntriples, num_neg_samples)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_119": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "tqdm(loader)",
                            "Call"
                        ],
                        [
                            "relation[batch]",
                            "Subscript"
                        ],
                        [
                            "relation[inds[batch]]",
                            "Subscript"
                        ],
                        [
                            "relation[inds[batch]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "neg_triples",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[h, r, t] for h in negatives['head'][idx]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "neg_triples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[h, r, t] for h in negatives['head'][idx]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[h, r, t] for t in negatives['tail'][idx]])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "neg_triples",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[h, r, t] for t in negatives['tail'][idx]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataLoader_166": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "neg_triples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[h, r, t] for h in negatives['head'][idx]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[h, r, t] for t in negatives['tail'][idx]])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "pos_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_triples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(triples['head'])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_236": {
                "variable": {
                    "value": "neg_scores_head",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_triples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(triples['head'])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_neg_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_237": {
                "variable": {
                    "value": "neg_scores_tail",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_triples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(triples['head'])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_neg_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_246": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "tqdm(loader)",
                            "Call"
                        ],
                        [
                            "relation[batch]",
                            "Subscript"
                        ],
                        [
                            "relation[inds[batch]]",
                            "Subscript"
                        ],
                        [
                            "relation[inds[batch]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_375": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head[batch], tail[batch]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_379": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "tqdm(loader)",
                            "Call"
                        ],
                        [
                            "relation[batch]",
                            "Subscript"
                        ],
                        [
                            "relation[inds[batch]]",
                            "Subscript"
                        ],
                        [
                            "relation[inds[batch]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_399": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head_neg[batch], tail[inds[batch]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_403": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "tqdm(loader)",
                            "Call"
                        ],
                        [
                            "relation[batch]",
                            "Subscript"
                        ],
                        [
                            "relation[inds[batch]]",
                            "Subscript"
                        ],
                        [
                            "relation[inds[batch]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_423": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head[inds[batch]], tail_neg[batch]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_427": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "tqdm(loader)",
                            "Call"
                        ],
                        [
                            "relation[batch]",
                            "Subscript"
                        ],
                        [
                            "relation[inds[batch]]",
                            "Subscript"
                        ],
                        [
                            "relation[inds[batch]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_446": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[metrics_head[key], metrics_tail[key]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_465": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.device}' if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_472": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_488": {
                "variable": {
                    "value": "split_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.subgraph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_147": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "tqdm(loader)",
                            "Call"
                        ],
                        [
                            "relation[batch]",
                            "Subscript"
                        ],
                        [
                            "relation[inds[batch]]",
                            "Subscript"
                        ],
                        [
                            "relation[inds[batch]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_174": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "tqdm(loader)",
                            "Call"
                        ],
                        [
                            "relation[batch]",
                            "Subscript"
                        ],
                        [
                            "relation[inds[batch]]",
                            "Subscript"
                        ],
                        [
                            "relation[inds[batch]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DistributedSampler_222": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RankingTestDataset(triples)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_265": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "batch[:, 1]",
                            "Subscript"
                        ],
                        [
                            "tqdm(loader)",
                            "Call"
                        ],
                        [
                            "relation[batch]",
                            "Subscript"
                        ],
                        [
                            "relation[inds[batch]]",
                            "Subscript"
                        ],
                        [
                            "relation[inds[batch]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_369": {
                "start": {
                    "value": "len(head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_393": {
                "start": {
                    "value": "len(head_neg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_417": {
                "start": {
                    "value": "len(tail_neg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_471": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_613": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.result_dir, fname)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(f'cuda:{args.device}' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda', args.local_rank)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_708": {
                "obj": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'metrics': metrics}",
                            "Dict"
                        ],
                        [
                            "{'metrics': {'hits@1_list': hits1_list.cpu(), 'hits@3_list': hits3_list.cpu(), 'hits@10_list': hits10_list.cpu(), 'mrr_list': mrr_list.cpu()}}",
                            "Dict"
                        ],
                        [
                            "{'metrics': metrics}",
                            "Dict"
                        ],
                        [
                            "evaluate_ranking_parallel(model, tokenizer, triples, args.info_filename, device, **kwargs)",
                            "Call"
                        ],
                        [
                            "evaluate_ranking(model, tokenizer, triples, args.info_filename, device, **kwargs)",
                            "Call"
                        ],
                        [
                            "evaluate_variable_negatives(model, tokenizer, triples, args.info_filename, device, negatives, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "savename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.result_dir, f'scores-{subgraphname}-{subset}-neg{args.num_neg_samples}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_156": {
                "*size": {
                    "value": "max_neg - len(neg_triples)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_158": {
                "tensors": {
                    "value": "y_pred_neg_elem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_158": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_183": {
                "*size": {
                    "value": "max_neg - len(neg_triples)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_185": {
                "tensors": {
                    "value": "y_pred_neg_elem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_185": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_275": {
                "tensors": {
                    "value": "y_pred_neg_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_466": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/lm/model.py": {
        "torch": {
            "load_78": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_91": {
                "variable": {
                    "value": "self.ent_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "ent_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint['model_state_dict']['entity_embedding']",
                            "Subscript"
                        ],
                        [
                            "(ent_emb[:, :self.emb_dim] + ent_emb[:, self.emb_dim:]) / 2.0",
                            "BinOp"
                        ],
                        [
                            "checkpoint['model_state_dict']['entity_embedding']",
                            "Subscript"
                        ],
                        [
                            "self.align_embeddings(ent_emb, self.encoder, tokenizer, args)",
                            "Call"
                        ],
                        [
                            "ent_emb @ torch.from_numpy(W)",
                            "BinOp"
                        ],
                        [
                            "checkpoint['model_state_dict']['entity_embedding']",
                            "Subscript"
                        ],
                        [
                            "checkpoint['model_state_dict']['entity_embedding']",
                            "Subscript"
                        ],
                        [
                            "ent_emb",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.rel_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "rel_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint['model_state_dict']['relation_embedding']",
                            "Subscript"
                        ],
                        [
                            "checkpoint['model_state_dict']['relation_embedding']",
                            "Subscript"
                        ],
                        [
                            "checkpoint['model_state_dict']['relation_embedding']",
                            "Subscript"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "mlp_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embeddings, cls_token]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_164": {
                "variable": {
                    "value": "(e1, e2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.last_hidden_state[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "output.last_hidden_state[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "output.last_hidden_state[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([e1, e2], dim=1)",
                            "Call"
                        ],
                        [
                            "output.last_hidden_state[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "output.last_hidden_state[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "cls_token",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e1, e2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_214": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_226": {
                "variable": {
                    "value": "new_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size + nentity",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "encoder.config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_258": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.input_ids.tolist()",
                            "Call"
                        ],
                        [
                            "torch.tensor(input_ids).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([tokens[i][0] for i in idx])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_259": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.token_type_ids.tolist()",
                            "Call"
                        ],
                        [
                            "torch.tensor(token_type_ids).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_260": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.attention_mask.tolist()",
                            "Call"
                        ],
                        [
                            "torch.tensor(attention_mask).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_300": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tokens[i][0] for i in idx]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_350": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "encoder.config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "entity_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Embedding_357": {
                "variable": {
                    "value": "self.relation_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.nrelation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "relation_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_434": {
                "variable": {
                    "value": "triple_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head_emb, tail_emb, torch.abs(head_emb - tail_emb)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_511": {
                "variable": {
                    "value": "triple_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head_emb, tail_emb, torch.abs(head_emb - tail_emb)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_561": {
                "variable": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.nentity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "entity_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Embedding_576": {
                "variable": {
                    "value": "self.relation_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.nrelation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "relation_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv1d_727": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "encoder.config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "entity_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_728": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "entity_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "entity_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_736": {
                "variable": {
                    "value": "self.relation_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.nrelation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "relation_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ],
                        [
                            "2 * args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "args.embedding_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_759": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings(data.input_ids) * mask",
                            "BinOp"
                        ],
                        [
                            "embs.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(embs, (0, 1))",
                            "Call"
                        ],
                        [
                            "self.conv1(embs)",
                            "Call"
                        ],
                        [
                            "embs * mask",
                            "BinOp"
                        ],
                        [
                            "F.max_pool1d(embs, kernel_size=kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.tanh(embs)",
                            "Call"
                        ],
                        [
                            "F.pad(embs, (0, 1))",
                            "Call"
                        ],
                        [
                            "self.conv2(embs)",
                            "Call"
                        ],
                        [
                            "embs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(embs, dim=-1) / lengths",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(embs)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_pool1d_770": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings(data.input_ids) * mask",
                            "BinOp"
                        ],
                        [
                            "embs.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(embs, (0, 1))",
                            "Call"
                        ],
                        [
                            "self.conv1(embs)",
                            "Call"
                        ],
                        [
                            "embs * mask",
                            "BinOp"
                        ],
                        [
                            "F.max_pool1d(embs, kernel_size=kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.tanh(embs)",
                            "Call"
                        ],
                        [
                            "F.pad(embs, (0, 1))",
                            "Call"
                        ],
                        [
                            "self.conv2(embs)",
                            "Call"
                        ],
                        [
                            "embs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(embs, dim=-1) / lengths",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(embs)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "max_pool1d_771": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.input_ids == self.tokenizer.sep_token_id",
                            "Compare"
                        ],
                        [
                            "data.attention_mask.float().unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(mask, kernel_size=kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "tanh_775": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings(data.input_ids) * mask",
                            "BinOp"
                        ],
                        [
                            "embs.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(embs, (0, 1))",
                            "Call"
                        ],
                        [
                            "self.conv1(embs)",
                            "Call"
                        ],
                        [
                            "embs * mask",
                            "BinOp"
                        ],
                        [
                            "F.max_pool1d(embs, kernel_size=kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.tanh(embs)",
                            "Call"
                        ],
                        [
                            "F.pad(embs, (0, 1))",
                            "Call"
                        ],
                        [
                            "self.conv2(embs)",
                            "Call"
                        ],
                        [
                            "embs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(embs, dim=-1) / lengths",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(embs)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_776": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings(data.input_ids) * mask",
                            "BinOp"
                        ],
                        [
                            "embs.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(embs, (0, 1))",
                            "Call"
                        ],
                        [
                            "self.conv1(embs)",
                            "Call"
                        ],
                        [
                            "embs * mask",
                            "BinOp"
                        ],
                        [
                            "F.max_pool1d(embs, kernel_size=kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.tanh(embs)",
                            "Call"
                        ],
                        [
                            "F.pad(embs, (0, 1))",
                            "Call"
                        ],
                        [
                            "self.conv2(embs)",
                            "Call"
                        ],
                        [
                            "embs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(embs, dim=-1) / lengths",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(embs)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_781": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.input_ids == self.tokenizer.sep_token_id",
                            "Compare"
                        ],
                        [
                            "data.attention_mask.float().unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "mask.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(mask, kernel_size=kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_783": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings(data.input_ids) * mask",
                            "BinOp"
                        ],
                        [
                            "embs.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(embs, (0, 1))",
                            "Call"
                        ],
                        [
                            "self.conv1(embs)",
                            "Call"
                        ],
                        [
                            "embs * mask",
                            "BinOp"
                        ],
                        [
                            "F.max_pool1d(embs, kernel_size=kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.tanh(embs)",
                            "Call"
                        ],
                        [
                            "F.pad(embs, (0, 1))",
                            "Call"
                        ],
                        [
                            "self.conv2(embs)",
                            "Call"
                        ],
                        [
                            "embs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(embs, dim=-1) / lengths",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(embs)",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_787": {
                "variable": {
                    "value": "(head, tail)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings(data.input_ids) * mask",
                            "BinOp"
                        ],
                        [
                            "embs.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(embs, (0, 1))",
                            "Call"
                        ],
                        [
                            "self.conv1(embs)",
                            "Call"
                        ],
                        [
                            "embs * mask",
                            "BinOp"
                        ],
                        [
                            "F.max_pool1d(embs, kernel_size=kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.tanh(embs)",
                            "Call"
                        ],
                        [
                            "F.pad(embs, (0, 1))",
                            "Call"
                        ],
                        [
                            "self.conv2(embs)",
                            "Call"
                        ],
                        [
                            "embs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(embs, dim=-1) / lengths",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(embs)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_800": {
                "variable": {
                    "value": "triple_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head, tail, torch.abs(head - tail)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.link_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "encoder.config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.relation_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "encoder.config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.nrelation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.ranking_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "encoder.config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head, relation, tail]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.link_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.relation_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.nrelation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.ranking_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.link_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "encoder.config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_206": {
                "variable": {
                    "value": "self.relation_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "encoder.config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.nrelation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_210": {
                "variable": {
                    "value": "self.ranking_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "self.encoder.config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "encoder.config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_285": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.info_filename",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_363": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_366": {
                "variable": {
                    "value": "self.ent_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "ent_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint['model_state_dict']['entity_embedding']",
                            "Subscript"
                        ],
                        [
                            "(ent_emb[:, :self.emb_dim] + ent_emb[:, self.emb_dim:]) / 2.0",
                            "BinOp"
                        ],
                        [
                            "checkpoint['model_state_dict']['entity_embedding']",
                            "Subscript"
                        ],
                        [
                            "self.align_embeddings(ent_emb, self.encoder, tokenizer, args)",
                            "Call"
                        ],
                        [
                            "ent_emb @ torch.from_numpy(W)",
                            "BinOp"
                        ],
                        [
                            "checkpoint['model_state_dict']['entity_embedding']",
                            "Subscript"
                        ],
                        [
                            "checkpoint['model_state_dict']['entity_embedding']",
                            "Subscript"
                        ],
                        [
                            "ent_emb",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_374": {
                "variable": {
                    "value": "self.link_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_379": {
                "variable": {
                    "value": "self.relation_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.nrelation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_403": {
                "variable": {
                    "value": "(head_emb, tail_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.last_hidden_state[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "output.last_hidden_state[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "output.last_hidden_state[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([e1, e2], dim=1)",
                            "Call"
                        ],
                        [
                            "output.last_hidden_state[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "output.last_hidden_state[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_554": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_619": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_627": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_659": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_669": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_741": {
                "variable": {
                    "value": "self.link_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * entity_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_746": {
                "variable": {
                    "value": "self.relation_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * entity_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.nrelation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_305": {
                "ndarray": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linalg.lstsq(A, B)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_414": {
                "variable": {
                    "value": "mean_pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mean_pooled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(mean_pooled)",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_415": {
                "variable": {
                    "value": "(head_emb, tail_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_pooled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(mean_pooled)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_491": {
                "variable": {
                    "value": "head_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "head_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(cls_token, 2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.chunk(mean_pooled, 2, dim=0)",
                            "Call"
                        ],
                        [
                            "output.last_hidden_state[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(head_emb)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_492": {
                "variable": {
                    "value": "tail_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tail_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(cls_token, 2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.chunk(mean_pooled, 2, dim=0)",
                            "Call"
                        ],
                        [
                            "sep_token[torch.arange(0, sep_token.size(0), 2)]",
                            "Subscript"
                        ],
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(tail_emb)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_782": {
                "input": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings(data.input_ids) * mask",
                            "BinOp"
                        ],
                        [
                            "embs.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.pad(embs, (0, 1))",
                            "Call"
                        ],
                        [
                            "self.conv1(embs)",
                            "Call"
                        ],
                        [
                            "embs * mask",
                            "BinOp"
                        ],
                        [
                            "F.max_pool1d(embs, kernel_size=kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.tanh(embs)",
                            "Call"
                        ],
                        [
                            "F.pad(embs, (0, 1))",
                            "Call"
                        ],
                        [
                            "self.conv2(embs)",
                            "Call"
                        ],
                        [
                            "embs * mask",
                            "BinOp"
                        ],
                        [
                            "torch.sum(embs, dim=-1) / lengths",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(embs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_435": {
                "input": {
                    "value": "head_emb - tail_emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_475": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "sep_token.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_512": {
                "input": {
                    "value": "head_emb - tail_emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_619": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_659": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_796": {
                "input": {
                    "value": "elem ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_801": {
                "input": {
                    "value": "head - tail",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_429": {
                "input": {
                    "value": "kge_head - head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_430": {
                "input": {
                    "value": "kge_tail - tail",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_506": {
                "input": {
                    "value": "kge_head - head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_507": {
                "input": {
                    "value": "kge_tail - tail",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_679": {
                "input": {
                    "value": "kge_head - head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_680": {
                "input": {
                    "value": "kge_tail - tail",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_479": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "inds.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_480": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "inds.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/lm/run.py": {
        "torch": {
            "device_303": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.device}' if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_305": {
                "variable": {
                    "value": "args.ngpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_529": {
                "variable": {
                    "value": "link_lossfn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_530": {
                "variable": {
                    "value": "relation_lossfn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_581": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainDataset(args.info_filename, train_triples, train_count, entity_dict, **dataset_kwargs)",
                            "Call"
                        ],
                        [
                            "TrainDataset(args.info_filename, sampled_triples, train_count, entity_dict, **dataset_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size // args.gradient_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4 * args.ngpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_320": {
                "seed": {
                    "value": "args.seed + process_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_321": {
                "seed": {
                    "value": "args.seed + process_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SummaryWriter_333": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(savedir, 'tensorboard')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_361": {
                "variable": {
                    "value": "split_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.subgraph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_367": {
                "variable": {
                    "value": "eval_split_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.eval_subgraph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_467": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_532": {
                "variable": {
                    "value": "ranking_lossfn",
                    "type": "variable",
                    "possible_values": []
                },
                "margin": {
                    "value": "args.margin",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_506": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "savename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(savedir, 'config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.init, 'checkpoint.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(savedir, 'checkpoint.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(savedir, 'best_model.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_629": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainDataset(args.info_filename, train_triples, train_count, entity_dict, **dataset_kwargs)",
                            "Call"
                        ],
                        [
                            "TrainDataset(args.info_filename, sampled_triples, train_count, entity_dict, **dataset_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size // args.gradient_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4 * args.ngpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_812": {
                "obj": {
                    "value": "{'model': state_dict, 'optimizer': optimizer.state_dict(), 'step': global_step + 1}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(savedir, 'checkpoint.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_517": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "savename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(savedir, 'config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.init, 'checkpoint.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(savedir, 'checkpoint.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(savedir, 'best_model.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_671": {
                "variable": {
                    "value": "chunks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['ranking_outputs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "args.negative_sample_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_773": {
                "obj": {
                    "value": "{'model': state_dict, 'optimizer': optimizer.state_dict(), 'step': global_step + 1}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(savedir, 'checkpoint.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_821": {
                "f": {
                    "value": "savename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(savedir, 'config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.init, 'checkpoint.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(savedir, 'checkpoint.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(savedir, 'best_model.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__714": {
                "parameters": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[param for param in model.parameters() if param.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[param for param in model.parameters() if param.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "args.grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_784": {
                "obj": {
                    "value": "{'model': state_dict, 'step': global_step + 1}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(savedir, 'best_model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/lm/util.py": {
        "torch": {
            "chunk_268": {
                "variable": {
                    "value": "(re_head, im_head)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokenizer.truncate_sequences(head, num_tokens_to_remove=num_rm, truncation_strategy='longest_first')",
                            "Call"
                        ],
                        [
                            "tokenizer.truncate_sequences(head, num_tokens_to_remove=num_rm, truncation_strategy='longest_first')",
                            "Call"
                        ],
                        [
                            "tokenizer.truncate_sequences(head, tail, num_tokens_to_remove=num_rm, truncation_strategy='longest_first')",
                            "Call"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokenizer.truncate_sequences(head, tail, num_tokens_to_remove=num_rm, truncation_strategy='longest_first')",
                            "Call"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_269": {
                "variable": {
                    "value": "(re_relation, im_relation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "relation",
                            "Method Argument"
                        ],
                        [
                            "relation",
                            "Method Argument"
                        ],
                        [
                            "relation",
                            "Method Argument"
                        ],
                        [
                            "relation",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_270": {
                "variable": {
                    "value": "(re_tail, im_tail)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokenizer.truncate_sequences(tail, num_tokens_to_remove=num_rm, truncation_strategy='longest_first')",
                            "Call"
                        ],
                        [
                            "tokenizer.truncate_sequences(tail, num_tokens_to_remove=num_rm, truncation_strategy='longest_first')",
                            "Call"
                        ],
                        [
                            "tokenizer.truncate_sequences(head, tail, num_tokens_to_remove=num_rm, truncation_strategy='longest_first')",
                            "Call"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokenizer.truncate_sequences(head, tail, num_tokens_to_remove=num_rm, truncation_strategy='longest_first')",
                            "Call"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_290": {
                "variable": {
                    "value": "(re_head, im_head)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokenizer.truncate_sequences(head, num_tokens_to_remove=num_rm, truncation_strategy='longest_first')",
                            "Call"
                        ],
                        [
                            "tokenizer.truncate_sequences(head, num_tokens_to_remove=num_rm, truncation_strategy='longest_first')",
                            "Call"
                        ],
                        [
                            "tokenizer.truncate_sequences(head, tail, num_tokens_to_remove=num_rm, truncation_strategy='longest_first')",
                            "Call"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokenizer.truncate_sequences(head, tail, num_tokens_to_remove=num_rm, truncation_strategy='longest_first')",
                            "Call"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ],
                        [
                            "head",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_291": {
                "variable": {
                    "value": "(re_tail, im_tail)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokenizer.truncate_sequences(tail, num_tokens_to_remove=num_rm, truncation_strategy='longest_first')",
                            "Call"
                        ],
                        [
                            "tokenizer.truncate_sequences(tail, num_tokens_to_remove=num_rm, truncation_strategy='longest_first')",
                            "Call"
                        ],
                        [
                            "tokenizer.truncate_sequences(head, tail, num_tokens_to_remove=num_rm, truncation_strategy='longest_first')",
                            "Call"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokens",
                            "variable"
                        ],
                        [
                            "tokenizer.truncate_sequences(head, tail, num_tokens_to_remove=num_rm, truncation_strategy='longest_first')",
                            "Call"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ],
                        [
                            "tail",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_295": {
                "variable": {
                    "value": "re_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phase_relation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relation / (embedding_range / pi)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_296": {
                "variable": {
                    "value": "im_relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phase_relation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relation / (embedding_range / pi)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_303": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[re_score, im_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_304": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "re_score * re_tail + im_score * im_tail",
                            "BinOp"
                        ],
                        [
                            "torch.stack([re_score, im_score], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.norm(score, dim=0)",
                            "Call"
                        ],
                        [
                            "gamma - torch.sum(score, dim=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_20": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_21": {
                "variable": {
                    "value": "self.dropouts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_276": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "re_score * re_tail + im_score * im_tail",
                            "BinOp"
                        ],
                        [
                            "torch.stack([re_score, im_score], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.norm(score, dim=0)",
                            "Call"
                        ],
                        [
                            "gamma - torch.sum(score, dim=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_281": {
                "input": {
                    "value": "head * relation * tail",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "dropout(x)",
                            "Call"
                        ],
                        [
                            "self.lins[-1](x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_54": {
                "variable": {
                    "value": "self.info_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "info_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "info_filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logsigmoid_261": {
                "input": {
                    "value": "positive_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positive_score",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logsigmoid_262": {
                "input": {
                    "value": "-negative_score",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_306": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "re_score * re_tail + im_score * im_tail",
                            "BinOp"
                        ],
                        [
                            "torch.stack([re_score, im_score], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.norm(score, dim=0)",
                            "Call"
                        ],
                        [
                            "gamma - torch.sum(score, dim=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_312": {
                "input": {
                    "value": "head + relation - tail",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_23": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.lins[:-1], self.dropouts)",
                            "Call"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_63": {
                "variable": {
                    "value": "self.relations_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "info_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "info_filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_26": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.lins[:-1], self.dropouts)",
                            "Call"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}