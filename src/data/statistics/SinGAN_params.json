{
    "inference.py": {
        "tensorflow": {
            "zeros_like_81": {
                "variable": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reals[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normal_52": {
                "variable": {
                    "value": "z_fixed",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "reals[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_71": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "fake.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "z_fixed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SinGAN_inject(reals, inject_scale=self.inject_scale)",
                            "Call"
                        ],
                        [
                            "self.SinGAN_generate(reals, z_fixed, inject_scale=self.inject_scale)",
                            "Call"
                        ],
                        [
                            "reals[inject_scale]",
                            "Subscript"
                        ],
                        [
                            "imresize(fake, new_shapes=reals[scale].shape)",
                            "Call"
                        ],
                        [
                            "self.model[scale](fake, z)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(reals[0])",
                            "Call"
                        ],
                        [
                            "imresize(fake, new_shapes=reals[scale].shape)",
                            "Call"
                        ],
                        [
                            "generator(fake, z)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_92": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "fake.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {}
    },
    "model.py": {
        "tensorflow": {
            "Variable_15": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([input_shape[3]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_16": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([input_shape[3]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_19": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "divide_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(inputs, mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(tf.add(var, self.epsilon))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_29": {
                "variable": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_30": {
                "variable": {
                    "value": "self.conv2D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_49": {
                "variable": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_50": {
                "variable": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_55": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_79": {
                "variable": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2D_84": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "shape": {
                    "value": "[input_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_16": {
                "shape": {
                    "value": "[input_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_20": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "x": {
                    "value": "tf.add(var, self.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_41": {
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Add_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Add_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_20": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "ExponentialDecay_36": {
                "variable": {
                    "value": "self.learning_schedule",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "4800",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_84": {
                "variable": {
                    "value": "noise_amp",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_176": {
                "variable": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reals[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "uniform_220": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_227": {
                "variable": {
                    "value": "slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(gradients), axis=[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_228": {
                "variable": {
                    "value": "gradient_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(slopes - 1.0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Mean_235": {
                "variable": {
                    "value": "self.dis_metric",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_236": {
                "variable": {
                    "value": "self.gen_metric",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_237": {
                "variable": {
                    "value": "self.rec_metric",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_file_writer_258": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "'log/fit/' + datetime.datetime.now().strftime('%Y%m%d-%H%M%S')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "g_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_schedule",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_93": {
                "variable": {
                    "value": "d_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_schedule",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_96": {
                "variable": {
                    "value": "prev_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reals[scale]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normal_119": {
                "variable": {
                    "value": "z_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "real.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_213": {
                "input_tensor": {
                    "value": "tf.square(fake_rec - real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_122": {
                "variable": {
                    "value": "z_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "real.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_124": {
                "variable": {
                    "value": "z_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reals[scale]",
                            "Subscript"
                        ],
                        [
                            "reals",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_mean_208": {
                "input_tensor": {
                    "value": "discriminator(fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_213": {
                "x": {
                    "value": "fake_rec - real",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_218": {
                "input_tensor": {
                    "value": "discriminator(real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientTape_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_227": {
                "input_tensor": {
                    "value": "tf.square(gradients)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_266": {
                "name": {
                    "value": "dis_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "dis_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dicriminator_wgan_loss(self.discriminators[scale], real, fake_rand, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(discriminator(fake)) - tf.reduce_mean(discriminator(real))",
                            "BinOp"
                        ],
                        [
                            "dis_loss + 0.1 * gradient_penalty",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.num_scales)",
                            "Call"
                        ],
                        [
                            "range(self.num_scales)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_267": {
                "name": {
                    "value": "gen_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "gen_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generator_wgan_loss(self.discriminators[scale], fake_rand)",
                            "Call"
                        ],
                        [
                            "gen_loss + 10 * rec_loss",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.num_scales)",
                            "Call"
                        ],
                        [
                            "range(self.num_scales)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_268": {
                "name": {
                    "value": "rec_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "rec_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reconstruction_loss(real, fake_rec)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(self.num_scales)",
                            "Call"
                        ],
                        [
                            "range(self.num_scales)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_180": {
                "variable": {
                    "value": "z_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "reals[i].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_227": {
                "x": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(dis_interpolates, [interpolates])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_127": {
                "x": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(self.num_iters)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_130": {
                "variable": {
                    "value": "prev_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reals[scale]",
                            "Subscript"
                        ],
                        [
                            "reals",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_like_131": {
                "variable": {
                    "value": "prev_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reals[scale]",
                            "Subscript"
                        ],
                        [
                            "reals",
                            "variable"
                        ]
                    ]
                }
            },
            "sqrt_138": {
                "variable": {
                    "value": "RMSE",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(real - prev_rec))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientTape_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_138": {
                "input_tensor": {
                    "value": "tf.square(real - prev_rec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_138": {
                "x": {
                    "value": "real - prev_rec",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "read_file_32": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, (image_size, image_size), method=tf.image.ResizeMethod.BILINEAR, antialias=True, preserve_aspect_ratio=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, (new_height, new_width), method=tf.image.ResizeMethod.BILINEAR, antialias=True)",
                            "Call"
                        ],
                        [
                            "denormalize_m11(image)",
                            "Call"
                        ],
                        [
                            "clip_0_255(image)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(np.array(image).astype(np.uint8).squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_png_33": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, (image_size, image_size), method=tf.image.ResizeMethod.BILINEAR, antialias=True, preserve_aspect_ratio=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, (new_height, new_width), method=tf.image.ResizeMethod.BILINEAR, antialias=True)",
                            "Call"
                        ],
                        [
                            "denormalize_m11(image)",
                            "Call"
                        ],
                        [
                            "clip_0_255(image)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(np.array(image).astype(np.uint8).squeeze())",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_34": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, (image_size, image_size), method=tf.image.ResizeMethod.BILINEAR, antialias=True, preserve_aspect_ratio=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, (new_height, new_width), method=tf.image.ResizeMethod.BILINEAR, antialias=True)",
                            "Call"
                        ],
                        [
                            "denormalize_m11(image)",
                            "Call"
                        ],
                        [
                            "clip_0_255(image)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(np.array(image).astype(np.uint8).squeeze())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_58": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, (image_size, image_size), method=tf.image.ResizeMethod.BILINEAR, antialias=True, preserve_aspect_ratio=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, (new_height, new_width), method=tf.image.ResizeMethod.BILINEAR, antialias=True)",
                            "Call"
                        ],
                        [
                            "denormalize_m11(image)",
                            "Call"
                        ],
                        [
                            "clip_0_255(image)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(np.array(image).astype(np.uint8).squeeze())",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_height, new_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "method": {
                    "value": "tf.image.ResizeMethod.BILINEAR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "antialias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "resize_38": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, (image_size, image_size), method=tf.image.ResizeMethod.BILINEAR, antialias=True, preserve_aspect_ratio=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, (new_height, new_width), method=tf.image.ResizeMethod.BILINEAR, antialias=True)",
                            "Call"
                        ],
                        [
                            "denormalize_m11(image)",
                            "Call"
                        ],
                        [
                            "clip_0_255(image)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(np.array(image).astype(np.uint8).squeeze())",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(image_size, image_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "method": {
                    "value": "tf.image.ResizeMethod.BILINEAR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "antialias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "preserve_aspect_ratio": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_by_value_93": {
                "t": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(image, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, (image_size, image_size), method=tf.image.ResizeMethod.BILINEAR, antialias=True, preserve_aspect_ratio=True)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, (new_height, new_width), method=tf.image.ResizeMethod.BILINEAR, antialias=True)",
                            "Call"
                        ],
                        [
                            "denormalize_m11(image)",
                            "Call"
                        ],
                        [
                            "clip_0_255(image)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(np.array(image).astype(np.uint8).squeeze())",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "psnr_102": {
                "a": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "max_val": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_53": {
                "variable": {
                    "value": "new_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(image.shape[1] * scale_factor, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_55": {
                "variable": {
                    "value": "new_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(image.shape[2] * scale_factor, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_54": {
                "x": {
                    "value": "image.shape[1] * scale_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_56": {
                "x": {
                    "value": "image.shape[2] * scale_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}