{
    "datasets/Dataset.py": {
        "tensorflow": {
            "decode_png_52": {
                "variable": {
                    "value": "image_tensor",
                    "possible_values": []
                },
                "contents": {
                    "value": "tf.read_file(path_tensor)",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "decode_jpeg_54": {
                "variable": {
                    "value": "image_tensor",
                    "possible_values": []
                },
                "contents": {
                    "value": "tf.read_file(path_tensor)",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "py_func_64": {
                "variable": {
                    "value": "pose_map",
                    "possible_values": []
                },
                "func": {
                    "value": "get_pose_map_fn",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "inp": {
                    "value": "[file_name_tensor, image_path_tensor]",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "stateful": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "concat_79": {
                "variable": {
                    "value": "image_tensor",
                    "possible_values": []
                },
                "values": {
                    "value": "[image_tensor, resized_pose_map]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "random_crop_85": {
                "variable": {
                    "value": "image_tensor",
                    "possible_values": []
                },
                "value": {
                    "value": "image_tensor",
                    "possible_values": [
                        [
                            "tf.image.decode_png(tf.read_file(path_tensor), channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(tf.read_file(path_tensor), channels=3)",
                            "Call"
                        ],
                        [
                            "self._read_and_normalize_image(image_path_tensor, height, width)",
                            "Call"
                        ],
                        [
                            "self._read_and_normalize_image(image_path_tensor, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "tf.concat([image_tensor, resized_pose_map], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([image_tensor, resized_pose_map], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image_tensor, [image_size, image_size, image_tensor.get_shape().as_list()[2]])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image_tensor)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "[image_size, image_size, image_tensor.get_shape().as_list()[2]]",
                    "possible_values": []
                }
            },
            "random_flip_left_right_89": {
                "variable": {
                    "value": "image_tensor",
                    "possible_values": []
                },
                "image": {
                    "value": "image_tensor",
                    "possible_values": [
                        [
                            "tf.image.decode_png(tf.read_file(path_tensor), channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(tf.read_file(path_tensor), channels=3)",
                            "Call"
                        ],
                        [
                            "self._read_and_normalize_image(image_path_tensor, height, width)",
                            "Call"
                        ],
                        [
                            "self._read_and_normalize_image(image_path_tensor, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "tf.concat([image_tensor, resized_pose_map], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([image_tensor, resized_pose_map], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image_tensor, [image_size, image_size, image_tensor.get_shape().as_list()[2]])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image_tensor)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_97": {
                "variable": {
                    "value": "image_tensor",
                    "possible_values": []
                },
                "values": {
                    "value": "[image_tensor, resized_pose_map]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "image_110": {
                "name": {
                    "value": "pose_maps",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.reduce_max(image[:, :, 4:], axis=-1, keep_dims=True)]",
                    "possible_values": []
                }
            },
            "read_file_52": {
                "filename": {
                    "value": "path_tensor",
                    "possible_values": []
                }
            },
            "read_file_54": {
                "filename": {
                    "value": "path_tensor",
                    "possible_values": []
                }
            },
            "name_scope_74": {
                "name": {
                    "value": "original",
                    "possible_values": []
                }
            },
            "name_scope_81": {
                "name": {
                    "value": "concatenated",
                    "possible_values": []
                }
            },
            "name_scope_84": {
                "name": {
                    "value": "random-cropped",
                    "possible_values": []
                }
            },
            "name_scope_88": {
                "name": {
                    "value": "random-flipped",
                    "possible_values": []
                }
            },
            "reduce_max_110": {
                "input_tensor": {
                    "value": "image[:, :, 4:]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/evaluation_helper.py": {
        "tensorflow": {
            "Graph_39": {
                "variable": {
                    "value": "self._evaluation_graph",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "merge_all_54": {
                "variable": {
                    "value": "self._eval_summary",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "FileWriter_55": {
                "variable": {
                    "value": "self._eval_summary_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(output_directory, 'eval')",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self._map_placeholder",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self._rank1_placeholder",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self._rank5_placeholder",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self._rank10_placeholder",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self._rank50_placeholder",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "Session_59": {
                "graph": {
                    "value": "self._evaluation_graph",
                    "possible_values": []
                }
            },
            "name_scope_42": {
                "name": {
                    "value": "preid_eval",
                    "possible_values": []
                }
            },
            "scalar_44": {
                "name": {
                    "value": "mAP",
                    "possible_values": []
                },
                "data": {
                    "value": "self._map_placeholder",
                    "possible_values": []
                }
            },
            "scalar_46": {
                "name": {
                    "value": "rank1",
                    "possible_values": []
                },
                "data": {
                    "value": "self._rank1_placeholder",
                    "possible_values": []
                }
            },
            "scalar_48": {
                "name": {
                    "value": "rank5",
                    "possible_values": []
                },
                "data": {
                    "value": "self._rank5_placeholder",
                    "possible_values": []
                }
            },
            "scalar_50": {
                "name": {
                    "value": "rank10",
                    "possible_values": []
                },
                "data": {
                    "value": "self._rank10_placeholder",
                    "possible_values": []
                }
            },
            "scalar_52": {
                "name": {
                    "value": "rank50",
                    "possible_values": []
                },
                "data": {
                    "value": "self._rank50_placeholder",
                    "possible_values": []
                }
            }
        }
    },
    "helper/checkpoint_helper.py": {
        "tensorflow": {
            "init_from_checkpoint_20": {
                "ckpt_dir_or_file": {
                    "value": "initial_checkpoint",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "variables_dictionary",
                    "possible_values": [
                        [
                            "get_variables_to_restore(initial_checkpoint, checkpoint_exclude_scopes, ignore_missing_variables)",
                            "Call"
                        ]
                    ]
                }
            },
            "list_variables_30": {
                "variable": {
                    "value": "checkpoint_variables",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "initial_checkpoint",
                    "possible_values": []
                }
            },
            "global_variables_27": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "helper/model_helper.py": {
        "tensorflow": {
            "slice_input_producer_14": {
                "variable": {
                    "value": "sliced_input_data",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "input_data",
                    "possible_values": [
                        [
                            "dataset.get_input_data(is_training)",
                            "Call"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "is_training",
                    "possible_values": []
                },
                "capacity": {
                    "value": "4096",
                    "possible_values": []
                }
            },
            "batch_17": {
                "variable": {
                    "value": "batched_input_data",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sliced_data_dictionary",
                    "possible_values": [
                        [
                            "dataset.prepare_sliced_data_for_batching(sliced_input_data, image_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "batch_threads",
                    "possible_values": []
                },
                "capacity": {
                    "value": "batch_threads * batch_size * 2",
                    "possible_values": []
                },
                "allow_smaller_final_batch": {
                    "value": "not is_training",
                    "possible_values": []
                }
            },
            "no_op_52": {
                "variable": {
                    "value": "train_op",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "EstimatorSpec_129": {
                "mode": {
                    "value": "mode",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions_dict",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{'logits': logits, 'classifications': tf.argmax(logits, axis=-1), 'file_names': file_names}",
                            "Dict"
                        ]
                    ]
                },
                "loss": {
                    "value": "total_loss",
                    "possible_values": [
                        [
                            "tf.losses.get_total_loss() if mode == ModeKeys.TRAIN or mode == ModeKeys.EVAL else None",
                            "IfExp"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "possible_values": [
                        [
                            "tf.no_op()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.optimize_loss(loss=tf.losses.get_total_loss(), global_step=tf.train.get_or_create_global_step(), learning_rate=params['learning_rate'], optimizer=lambda learning_rate: tf.train.AdamOptimizer(learning_rate), variables=variables_to_train, learning_rate_decay_fn=learning_rate_decay_function)",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "eval_metric_ops",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{'accuracy': tf.metrics.accuracy(labels_tensor, predictions_dict['classifications'])}",
                            "Dict"
                        ]
                    ]
                }
            },
            "argmax_109": {
                "variable": {
                    "value": "predictions_dict[aux_classifications]",
                    "possible_values": []
                },
                "input": {
                    "value": "aux_logits",
                    "possible_values": [
                        [
                            "end_points['AuxLogits'] if 'AuxLogits' in end_points else None",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "argmax_112": {
                "variable": {
                    "value": "predictions_dict[views_classifications]",
                    "possible_values": []
                },
                "input": {
                    "value": "views_logits",
                    "possible_values": [
                        [
                            "end_points['PoseLogits'] if 'PoseLogits' in end_points else None",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "softmax_113": {
                "variable": {
                    "value": "predictions_dict[views_softmax]",
                    "possible_values": []
                },
                "logits": {
                    "value": "views_logits",
                    "possible_values": [
                        [
                            "end_points['PoseLogits'] if 'PoseLogits' in end_points else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "accuracy_126": {
                "variable": {
                    "value": "eval_metric_ops[views_accuracy]",
                    "possible_values": []
                },
                "labels": {
                    "value": "views_labels",
                    "possible_values": [
                        [
                            "labels['views'] if 'views' in labels else None",
                            "IfExp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions_dict['views_classifications']",
                    "possible_values": []
                }
            },
            "get_total_loss_128": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "name_scope_56": {
                "name": {
                    "value": "losses",
                    "possible_values": []
                }
            },
            "scalar_57": {
                "name": {
                    "value": "regularization",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.losses.get_regularization_loss()",
                    "possible_values": []
                }
            },
            "argmax_103": {
                "input": {
                    "value": "logits",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "accuracy_123": {
                "variable": {
                    "value": "eval_metric_ops[aux_accuracy]",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_tensor",
                    "possible_values": [
                        [
                            "labels['labels'] if 'labels' in labels else None",
                            "IfExp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions_dict['aux_classifications']",
                    "possible_values": []
                }
            },
            "name_scope_59": {
                "name": {
                    "value": "softmax_cross_entropy",
                    "possible_values": []
                }
            },
            "name_scope_73": {
                "name": {
                    "value": "mean_squared_error",
                    "possible_values": []
                }
            },
            "exponential_decay_83": {
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "params['learning_rate_decay_steps']",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "params['learning_rate_decay_rate']",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "possible_values": []
                },
                "name": {
                    "value": "learning-rate-decay",
                    "possible_values": []
                }
            },
            "get_total_loss_94": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_95": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "accuracy_120": {
                "labels": {
                    "value": "labels_tensor",
                    "possible_values": [
                        [
                            "labels['labels'] if 'labels' in labels else None",
                            "IfExp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions_dict['classifications']",
                    "possible_values": []
                }
            },
            "get_regularization_loss_57": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "scalar_61": {
                "name": {
                    "value": "logits",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.losses.sparse_softmax_cross_entropy(labels=labels_tensor, logits=logits, scope='logits')",
                    "possible_values": []
                }
            },
            "scalar_62": {
                "name": {
                    "value": "training-top-1",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_mean(tf.cast(tf.nn.in_top_k(predictions=logits, targets=labels_tensor, k=1), tf.float32))",
                    "possible_values": []
                }
            },
            "scalar_63": {
                "name": {
                    "value": "training-top-5",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_mean(tf.cast(tf.nn.in_top_k(predictions=logits, targets=labels_tensor, k=5), tf.float32))",
                    "possible_values": []
                }
            },
            "scalar_71": {
                "name": {
                    "value": "3_views",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.losses.sparse_softmax_cross_entropy(labels=views_labels, logits=views_logits, scope='3_views')",
                    "possible_values": []
                }
            },
            "scalar_75": {
                "name": {
                    "value": "logits",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.losses.mean_squared_error(labels=mse_labels, predictions=logits, scope='logits')",
                    "possible_values": []
                }
            },
            "AdamOptimizer_97": {
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": []
                }
            },
            "scalar_66": {
                "name": {
                    "value": "auxLogits",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.losses.sparse_softmax_cross_entropy(labels=labels_tensor, logits=aux_logits, scope='aux_logits')",
                    "possible_values": []
                }
            },
            "scalar_67": {
                "name": {
                    "value": "training-aux-top-1",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_mean(tf.cast(tf.nn.in_top_k(predictions=aux_logits, targets=labels_tensor, k=1), tf.float32))",
                    "possible_values": []
                }
            },
            "scalar_68": {
                "name": {
                    "value": "training-aux-top-5",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reduce_mean(tf.cast(tf.nn.in_top_k(predictions=aux_logits, targets=labels_tensor, k=5), tf.float32))",
                    "possible_values": []
                }
            },
            "scalar_78": {
                "name": {
                    "value": "auxLogits",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.losses.mean_squared_error(labels=mse_labels, predictions=aux_logits, scope='aux_logits')",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_61": {
                "labels": {
                    "value": "labels_tensor",
                    "possible_values": [
                        [
                            "labels['labels'] if 'labels' in labels else None",
                            "IfExp"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "possible_values": []
                },
                "scope": {
                    "value": "logits",
                    "possible_values": []
                }
            },
            "reduce_mean_62": {
                "input_tensor": {
                    "value": "tf.cast(tf.nn.in_top_k(predictions=logits, targets=labels_tensor, k=1), tf.float32)",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "input_tensor": {
                    "value": "tf.cast(tf.nn.in_top_k(predictions=logits, targets=labels_tensor, k=5), tf.float32)",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_71": {
                "labels": {
                    "value": "views_labels",
                    "possible_values": [
                        [
                            "labels['views'] if 'views' in labels else None",
                            "IfExp"
                        ]
                    ]
                },
                "logits": {
                    "value": "views_logits",
                    "possible_values": [
                        [
                            "end_points['PoseLogits'] if 'PoseLogits' in end_points else None",
                            "IfExp"
                        ]
                    ]
                },
                "scope": {
                    "value": "3_views",
                    "possible_values": []
                }
            },
            "mean_squared_error_75": {
                "labels": {
                    "value": "mse_labels",
                    "possible_values": [
                        [
                            "labels['mse_labels'] if 'mse_labels' in labels else None",
                            "IfExp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "logits",
                    "possible_values": []
                },
                "scope": {
                    "value": "logits",
                    "possible_values": []
                }
            },
            "cast_62": {
                "x": {
                    "value": "tf.nn.in_top_k(predictions=logits, targets=labels_tensor, k=1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_63": {
                "x": {
                    "value": "tf.nn.in_top_k(predictions=logits, targets=labels_tensor, k=5)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_66": {
                "labels": {
                    "value": "labels_tensor",
                    "possible_values": [
                        [
                            "labels['labels'] if 'labels' in labels else None",
                            "IfExp"
                        ]
                    ]
                },
                "logits": {
                    "value": "aux_logits",
                    "possible_values": [
                        [
                            "end_points['AuxLogits'] if 'AuxLogits' in end_points else None",
                            "IfExp"
                        ]
                    ]
                },
                "scope": {
                    "value": "aux_logits",
                    "possible_values": []
                }
            },
            "reduce_mean_67": {
                "input_tensor": {
                    "value": "tf.cast(tf.nn.in_top_k(predictions=aux_logits, targets=labels_tensor, k=1), tf.float32)",
                    "possible_values": []
                }
            },
            "reduce_mean_68": {
                "input_tensor": {
                    "value": "tf.cast(tf.nn.in_top_k(predictions=aux_logits, targets=labels_tensor, k=5), tf.float32)",
                    "possible_values": []
                }
            },
            "mean_squared_error_78": {
                "labels": {
                    "value": "mse_labels",
                    "possible_values": [
                        [
                            "labels['mse_labels'] if 'mse_labels' in labels else None",
                            "IfExp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "aux_logits",
                    "possible_values": [
                        [
                            "end_points['AuxLogits'] if 'AuxLogits' in end_points else None",
                            "IfExp"
                        ]
                    ]
                },
                "scope": {
                    "value": "aux_logits",
                    "possible_values": []
                }
            },
            "in_top_k_62": {
                "predictions": {
                    "value": "logits",
                    "possible_values": []
                },
                "targets": {
                    "value": "labels_tensor",
                    "possible_values": [
                        [
                            "labels['labels'] if 'labels' in labels else None",
                            "IfExp"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "in_top_k_63": {
                "predictions": {
                    "value": "logits",
                    "possible_values": []
                },
                "targets": {
                    "value": "labels_tensor",
                    "possible_values": [
                        [
                            "labels['labels'] if 'labels' in labels else None",
                            "IfExp"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "cast_67": {
                "x": {
                    "value": "tf.nn.in_top_k(predictions=aux_logits, targets=labels_tensor, k=1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_68": {
                "x": {
                    "value": "tf.nn.in_top_k(predictions=aux_logits, targets=labels_tensor, k=5)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "in_top_k_67": {
                "predictions": {
                    "value": "aux_logits",
                    "possible_values": [
                        [
                            "end_points['AuxLogits'] if 'AuxLogits' in end_points else None",
                            "IfExp"
                        ]
                    ]
                },
                "targets": {
                    "value": "labels_tensor",
                    "possible_values": [
                        [
                            "labels['labels'] if 'labels' in labels else None",
                            "IfExp"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "in_top_k_68": {
                "predictions": {
                    "value": "aux_logits",
                    "possible_values": [
                        [
                            "end_points['AuxLogits'] if 'AuxLogits' in end_points else None",
                            "IfExp"
                        ]
                    ]
                },
                "targets": {
                    "value": "labels_tensor",
                    "possible_values": [
                        [
                            "labels['labels'] if 'labels' in labels else None",
                            "IfExp"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "possible_values": []
                }
            }
        }
    },
    "helper/variables_helper.py": {
        "tensorflow": {
            "get_collection_35": {
                "key": {
                    "value": "collection_key",
                    "possible_values": []
                }
            },
            "get_collection_40": {
                "key": {
                    "value": "collection_key",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "scopes.split(',')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nets/inception_utils.py": {
        "tensorflow": {}
    },
    "nets/inception_v4.py": {
        "tensorflow": {
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "variable_scope_281": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionA",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_54": {
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockReductionA",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_74": {
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionB",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_98": {
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockReductionB",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_120": {
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionC",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_133": {
                "variable": {
                    "value": "branch_1",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_1, 256, [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, 256, [3, 1], scope='Conv2d_0c_3x1')]",
                    "possible_values": []
                }
            },
            "concat_140": {
                "variable": {
                    "value": "branch_2",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_2, 256, [1, 3], scope='Conv2d_0d_1x3'), slim.conv2d(branch_2, 256, [3, 1], scope='Conv2d_0e_3x1')]",
                    "possible_values": []
                }
            },
            "concat_146": {
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "possible_values": []
                }
            },
            "concat_197": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "possible_values": []
                }
            },
            "concat_212": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "possible_values": []
                }
            },
            "concat_223": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "Mixed_3a",
                    "possible_values": []
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "Mixed_4a",
                    "possible_values": []
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "Mixed_5a",
                    "possible_values": []
                }
            },
            "softmax_318": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_202": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_217": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_308": {
                "name_or_scope": {
                    "value": "Logits",
                    "possible_values": []
                }
            },
            "variable_scope_289": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "possible_values": []
                }
            }
        }
    },
    "nets/inception_v4_views.py": {
        "tensorflow": {
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "variable_scope_304": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionA",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_54": {
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockReductionA",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_74": {
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionB",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_98": {
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockReductionB",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_120": {
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionC",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_133": {
                "variable": {
                    "value": "branch_1",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_1, 256, [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, 256, [3, 1], scope='Conv2d_0c_3x1')]",
                    "possible_values": []
                }
            },
            "concat_140": {
                "variable": {
                    "value": "branch_2",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_2, 256, [1, 3], scope='Conv2d_0d_1x3'), slim.conv2d(branch_2, 256, [3, 1], scope='Conv2d_0e_3x1')]",
                    "possible_values": []
                }
            },
            "concat_146": {
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "possible_values": []
                }
            },
            "concat_193": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "possible_values": []
                }
            },
            "concat_206": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "possible_values": []
                }
            },
            "concat_215": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "possible_values": []
                }
            },
            "dropout_237": {
                "variable": {
                    "value": "flat_pose3_dropout",
                    "possible_values": []
                },
                "x": {
                    "value": "flat_pose3",
                    "possible_values": [
                        [
                            "slim.flatten(conv_pose3)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.8",
                    "possible_values": []
                }
            },
            "softmax_242": {
                "variable": {
                    "value": "viewsoftmax",
                    "possible_values": []
                },
                "logits": {
                    "value": "poseLogits",
                    "possible_values": [
                        [
                            "slim.fully_connected(flat_pose3_dropout, num_views, activation_fn=None, scope='Pose_logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_243": {
                "variable": {
                    "value": "viewsoftmaxSplit",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.split(viewsoftmax, [1, 1, 1], axis=1)",
                    "possible_values": []
                }
            },
            "add_n_280": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "inputs": {
                    "value": "mixed7ds",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'Mixed_7d'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "Mixed_3a",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "Mixed_4a",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "Mixed_5a",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "PoseLogits",
                    "possible_values": []
                }
            },
            "variable_scope_265": {
                "name_or_scope": {
                    "value": "Mixed_7d",
                    "possible_values": []
                }
            },
            "reshape_272": {
                "variable": {
                    "value": "current_pose_factors_reshaped",
                    "possible_values": []
                },
                "tensor": {
                    "value": "current_pose_factors",
                    "possible_values": [
                        [
                            "viewsoftmaxSplit[pose]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, 1]",
                    "possible_values": []
                },
                "name": {
                    "value": "'pose_%d_reshaped' % pose",
                    "possible_values": []
                }
            },
            "multiply_274": {
                "variable": {
                    "value": "curr_mixed_7d_scaled",
                    "possible_values": []
                },
                "x": {
                    "value": "curr_mixed_7d",
                    "possible_values": [
                        [
                            "block_inception_c(net, block_scope)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "current_pose_factors_reshaped",
                    "possible_values": [
                        [
                            "tf.reshape(current_pose_factors, shape=[-1, 1, 1, 1], name='pose_%d_reshaped' % pose)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_333": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "possible_values": []
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "possible_values": []
                }
            },
            "split_243": {
                "value": {
                    "value": "viewsoftmax",
                    "possible_values": [
                        [
                            "tf.nn.softmax(poseLogits)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[1, 1, 1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "variable_scope_323": {
                "name_or_scope": {
                    "value": "Logits",
                    "possible_values": []
                }
            },
            "variable_scope_311": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "possible_values": []
                }
            }
        }
    },
    "nets/nets_factory.py": {
        "tensorflow": {}
    },
    "nets/resnet_utils.py": {
        "tensorflow": {
            "pad_120": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "block.scope",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "possible_values": []
                }
            }
        }
    },
    "nets/resnet_utils_views.py": {
        "tensorflow": {
            "pad_123": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "block.scope",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "possible_values": []
                }
            },
            "reshape_185": {
                "variable": {
                    "value": "views_softmax",
                    "possible_values": []
                },
                "tensor": {
                    "value": "views_softmax",
                    "possible_values": [
                        [
                            "end_points['viewsSoftmax']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(views_softmax, [-1, 1, 1, num_views])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(views_logits)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, num_views]",
                    "possible_values": []
                }
            },
            "split_186": {
                "variable": {
                    "value": "views_softmax_split",
                    "possible_values": []
                },
                "value": {
                    "value": "views_softmax",
                    "possible_values": [
                        [
                            "end_points['viewsSoftmax']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(views_softmax, [-1, 1, 1, num_views])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(views_logits)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[1, 1, 1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "add_n_195": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "inputs": {
                    "value": "blocks",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "combine_views",
                    "possible_values": []
                }
            },
            "dropout_205": {
                "variable": {
                    "value": "flat_views4_dropout",
                    "possible_values": []
                },
                "x": {
                    "value": "flat_views4",
                    "possible_values": [
                        [
                            "slim.flatten(conv_views3)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "DROPOUT_KEEP_PROB",
                    "possible_values": [
                        [
                            "0.8",
                            "Constant"
                        ]
                    ]
                }
            },
            "softmax_208": {
                "variable": {
                    "value": "views_softmax",
                    "possible_values": []
                },
                "logits": {
                    "value": "views_logits",
                    "possible_values": [
                        [
                            "slim.fully_connected(flat_views4_dropout, num_views, activation_fn=None, scope='Views_logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "3ViewBranches",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "3Views",
                    "possible_values": []
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "possible_values": []
                }
            },
            "multiply_192": {
                "variable": {
                    "value": "scaled_block_view",
                    "possible_values": []
                },
                "x": {
                    "value": "block_view",
                    "possible_values": []
                },
                "y": {
                    "value": "views_softmax_split[view]",
                    "possible_values": []
                },
                "name": {
                    "value": "'scale_view_%d' % view",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "'View_%d_Branch' % view",
                    "possible_values": []
                }
            }
        }
    },
    "nets/resnet_v1.py": {
        "tensorflow": {
            "relu_107": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v1",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v1",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_198": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "squeeze_204": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "possible_values": []
                }
            }
        }
    },
    "nets/resnet_v1_views.py": {
        "tensorflow": {
            "relu_104": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v1",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v1",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_197": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils_views.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1536, [1, 1], activation_fn=tf.nn.relu, normalizer_fn=slim.batch_norm, scope='pre_logits')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, keep_prob=0.8)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.8",
                    "possible_values": []
                }
            },
            "reduce_mean_193": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils_views.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1536, [1, 1], activation_fn=tf.nn.relu, normalizer_fn=slim.batch_norm, scope='pre_logits')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, keep_prob=0.8)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "squeeze_203": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils_views.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1536, [1, 1], activation_fn=tf.nn.relu, normalizer_fn=slim.batch_norm, scope='pre_logits')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, keep_prob=0.8)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "possible_values": []
                }
            }
        }
    },
    "predictor_preid.py": {
        "tensorflow": {
            "RunConfig_24": {
                "variable": {
                    "value": "run_config",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "10",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "Estimator_26": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "get_model_function(model_dir, network_name, dataset_factory.get_dataset('train').num_classes())",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "possible_values": [
                        [
                            "RunConfig(keep_checkpoint_max=10, save_checkpoints_steps=None)",
                            "Call"
                        ]
                    ]
                },
                "params": {
                    "value": "{}",
                    "possible_values": []
                }
            },
            "latest_checkpoint_78": {
                "variable": {
                    "value": "latest_checkpoint",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_dir",
                    "possible_values": []
                }
            }
        }
    },
    "predictor_views.py": {
        "tensorflow": {
            "RunConfig_19": {
                "variable": {
                    "value": "run_config",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "10",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "Estimator_21": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "get_model_function(model_dir, network_name, dataset_factory.get_dataset('train').num_classes(), checkpoint_exclude_scopes=checkpoint_exclude_scopes)",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "possible_values": [
                        [
                            "RunConfig(keep_checkpoint_max=10, save_checkpoints_steps=None)",
                            "Call"
                        ]
                    ]
                },
                "params": {
                    "value": "{}",
                    "possible_values": []
                }
            }
        }
    },
    "predictor_views_mean.py": {
        "tensorflow": {
            "RunConfig_24": {
                "variable": {
                    "value": "run_config",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "10",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "Estimator_26": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "get_model_function(model_dir, network_name, num_classes)",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "possible_values": [
                        [
                            "RunConfig(keep_checkpoint_max=10, save_checkpoints_steps=None)",
                            "Call"
                        ]
                    ]
                },
                "params": {
                    "value": "{}",
                    "possible_values": []
                }
            }
        }
    },
    "predictor_views_rap_accuracy.py": {
        "tensorflow": {
            "RunConfig_17": {
                "variable": {
                    "value": "run_config",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "10",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "Estimator_19": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "get_model_function(model_dir, network_name, dataset_factory.get_dataset('train').num_classes(), checkpoint_exclude_scopes=checkpoint_exclude_scopes)",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "possible_values": [
                        [
                            "RunConfig(keep_checkpoint_max=10, save_checkpoints_steps=None)",
                            "Call"
                        ]
                    ]
                },
                "params": {
                    "value": "{}",
                    "possible_values": []
                }
            }
        }
    },
    "trainer_preid.py": {
        "tensorflow": {
            "RunConfig_24": {
                "variable": {
                    "value": "run_config",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "10",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "Estimator_26": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "get_model_function(output_directory, network_name, dataset_factory.get_dataset('train').num_classes(), initial_checkpoint, checkpoint_exclude_scopes, ignore_missing_variables, trainable_scopes, not_trainable_scopes)",
                    "possible_values": []
                },
                "params": {
                    "value": "model_params",
                    "possible_values": [
                        [
                            "{'learning_rate': learning_rate, 'fixed_learning_rate': fixed_learning_rate, 'learning_rate_decay_rate': learning_rate_decay_rate, 'learning_rate_decay_steps': (dataset_factory.get_dataset('train').get_number_of_samples() if learning_rate_decay_steps is None else learning_rate_decay_steps) // batch_size}",
                            "Dict"
                        ]
                    ]
                },
                "model_dir": {
                    "value": "output_directory",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "possible_values": [
                        [
                            "RunConfig(keep_checkpoint_max=10, save_checkpoints_steps=None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "trainer_views.py": {
        "tensorflow": {
            "RunConfig_23": {
                "variable": {
                    "value": "run_config",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "10",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "Estimator_25": {
                "variable": {
                    "value": "estimator",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "get_model_function(output_directory, network_name, dataset_factory.get_dataset('train').num_classes() if num_classes is None else num_classes, initial_checkpoint, checkpoint_exclude_scopes, ignore_missing_variables, trainable_scopes)",
                    "possible_values": []
                },
                "params": {
                    "value": "model_params",
                    "possible_values": [
                        [
                            "{'learning_rate': learning_rate, 'fixed_learning_rate': fixed_learning_rate, 'learning_rate_decay_rate': learning_rate_decay_rate, 'learning_rate_decay_steps': dataset_factory.get_dataset('train').get_number_of_samples() // batch_size}",
                            "Dict"
                        ]
                    ]
                },
                "model_dir": {
                    "value": "output_directory",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "possible_values": [
                        [
                            "RunConfig(keep_checkpoint_max=10, save_checkpoints_steps=None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}