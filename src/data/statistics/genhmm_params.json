{
    "bin/train_class_gaus.py": {
        "sklearn": {}
    },
    "src/glow_model.py": {
        "sklearn": {
            "make_moons_396": {
                "n_samples": {
                    "value": "n_input_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Constant"
                        ]
                    ]
                },
                "noise": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_397": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.make_moons(n_samples=n_input_samples, noise=0.05)[0].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X)",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultivariateNormal_416": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(n_IC)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(n_IC)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_426": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in flow.parameters() if p.requires_grad == True]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, num_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_237": {
                "variable": {
                    "value": "self.nets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_361": {
                "*args": {
                    "value": "nn.utils.weight_norm(Conv1d(in_channels, hidden_channels, do_weightnorm=weightnorm_flag), 'weight')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_109": {
                "variable": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "Rescale(in_channels // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_144": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rescale(scale) + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_175": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rescale(scale) + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "weight_norm_362": {
                "module": {
                    "value": "Conv1d(in_channels, hidden_channels, do_weightnorm=weightnorm_flag)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_363": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "weight_norm_364": {
                "module": {
                    "value": "Conv1d(hidden_channels, hidden_channels, do_weightnorm=weightnorm_flag)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_365": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_416": {
                "*size": {
                    "value": "n_IC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_416": {
                "n": {
                    "value": "n_IC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "detect_anomaly_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_150": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.rescale(scale) + 2.0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.rescale(scale) + 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_181": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.rescale(scale) + 2.0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.rescale(scale) + 2.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/ref_hmm.py": {
        "sklearn": {
            "check_array_91": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_array(X)",
                            "Call"
                        ],
                        [
                            "check_array(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_array_147": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_array(X)",
                            "Call"
                        ],
                        [
                            "check_array(X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bin/aggregate_accuracy.py": {
        "torch": {}
    },
    "bin/compute_accuracy.py": {
        "torch": {}
    },
    "bin/compute_accuracy_cfmatrix.py": {
        "torch": {
            "DataLoader_385": {
                "variable": {
                    "value": "batchdata",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TheDataset(x_padded, lengths=l, device=nvp_mdl_loaded.hmms[0].device)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_392": {
                "variable": {
                    "value": "nvp_mdl_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "nvp_mdl_out_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nvp_mdl_loaded.forward(x) for x in batchdata]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_403": {
                "variable": {
                    "value": "glow_mdl_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "glow_mdl_out_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[glow_mdl_loaded.forward(x) for x in batchdata]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_393": {
                "input": {
                    "value": "nvp_mdl_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(nvp_mdl_out_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_404": {
                "input": {
                    "value": "glow_mdl_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(glow_mdl_out_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_62": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_70": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(int(get_freer_gpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "bin/compute_accuracy_class.py": {
        "torch": {
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_49": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_56": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(int(get_freer_gpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "bin/compute_accuracy_voting.py": {
        "torch": {
            "DataLoader_253": {
                "variable": {
                    "value": "batchdata",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TheDataset(x_padded, lengths=l, device=nvp_mdl_loaded.hmms[0].device)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "nvp_mdl_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "nvp_mdl_out_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nvp_mdl_loaded.forward(x) for x in batchdata]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "glow_mdl_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "glow_mdl_out_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[glow_mdl_loaded.forward(x) for x in batchdata]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_261": {
                "input": {
                    "value": "nvp_mdl_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(nvp_mdl_out_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_272": {
                "input": {
                    "value": "glow_mdl_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(glow_mdl_out_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(int(get_freer_gpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "bin/compute_accuracy_voting_noise.py": {
        "torch": {
            "DataLoader_266": {
                "variable": {
                    "value": "batchdata",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TheDataset(x_padded, lengths=l, device=nvp_mdl_loaded.hmms[0].device)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_273": {
                "variable": {
                    "value": "nvp_mdl_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "nvp_mdl_out_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nvp_mdl_loaded.forward(x) for x in batchdata]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "glow_mdl_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "glow_mdl_out_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[glow_mdl_loaded.forward(x) for x in batchdata]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_274": {
                "input": {
                    "value": "nvp_mdl_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(nvp_mdl_out_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_285": {
                "input": {
                    "value": "glow_mdl_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(glow_mdl_out_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(int(get_freer_gpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "bin/train_class_gen.py": {
        "torch": {
            "DataLoader_124": {
                "variable": {
                    "value": "traindata",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TheDataset(xtrain_padded, lengths=l, device=mdl.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "options['Train']['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f_in)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_101": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_109": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(int(get_freer_gpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "bin/train_class_glow.py": {
        "torch": {
            "DataLoader_156": {
                "variable": {
                    "value": "traindata",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TheDataset(xtrain_padded, lengths=l, device=mdl.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "options['Train']['batch_size']",
                            "Subscript"
                        ],
                        [
                            "bsize // 2",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_132": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_140": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(int(get_freer_gpu()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/_torch_hmmc.py": {
        "torch": {
            "zeros_like_7": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_23": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(a[None, :], b[None, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "work_buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, log_transmat.shape[0], log_transmat.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_156": {
                "variable": {
                    "value": "fwdlattice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_framelogprob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logsumexp_169": {
                "variable": {
                    "value": "batch_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fwdlattice[list(range(batch_size)), mask.sum(dim=-1) - 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_204": {
                "variable": {
                    "value": "bwdlattice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "framelogprob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isinf_9": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isinf_12": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logsumexp_24": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((a[None, :], b[None, :]), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_209": {
                "input": {
                    "value": "work_buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, log_transmat.shape[0], log_transmat.shape[1]), device=mask.device)",
                            "Call"
                        ],
                        [
                            "fwdlattice[:, t - 1, :] + log_transmat[:, j]",
                            "BinOp"
                        ],
                        [
                            "log_transmat[i, :] + framelogprob[:, t + 1, :] + bwdlattice[:, t + 1, :]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_165": {
                "input": {
                    "value": "work_buffer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, log_transmat.shape[0], log_transmat.shape[1]), device=mask.device)",
                            "Call"
                        ],
                        [
                            "fwdlattice[:, t - 1, :] + log_transmat[:, j]",
                            "BinOp"
                        ],
                        [
                            "log_transmat[i, :] + framelogprob[:, t + 1, :] + bwdlattice[:, t + 1, :]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/genHMM.py": {
        "torch": {
            "load_696": {
                "variable": {
                    "value": "savable",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MultivariateNormal_209": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(D).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(D).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_230": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "sum([[p for p in flow.parameters() if p.requires_grad == True] for flow in self.networks.reshape(-1).tolist()], [])",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_416": {
                "variable": {
                    "value": "log_startprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.startprob_ + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_417": {
                "variable": {
                    "value": "log_transmat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.transmat_ + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_426": {
                "variable": {
                    "value": "log_startprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.startprob_ + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_427": {
                "variable": {
                    "value": "log_transmat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.transmat_ + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logsumexp_438": {
                "variable": {
                    "value": "lse_gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fwdlattice + bwdlattice",
                            "BinOp"
                        ],
                        [
                            "log_gamma - lse_gamma[:, :, None]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_469": {
                "variable": {
                    "value": "llh",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_471": {
                "variable": {
                    "value": "local_loglh_sk",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, n_samples, self.n_states, self.n_prob_components)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_544": {
                "variable": {
                    "value": "brackets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.loglh_sk",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_619": {
                "variable": {
                    "value": "self.startprob_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.startprob_ == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.startprob_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "startprob_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stats['start']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_626": {
                "variable": {
                    "value": "self.transmat_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.transmat_ == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.transmat_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "transmat_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stats['trans']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_652": {
                "variable": {
                    "value": "log_p_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(map(self.pred_score, traindata))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_690": {
                "obj": {
                    "value": "wrapper(mdl)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_62": {
                "variable": {
                    "value": "self.pclass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.hmms)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_86": {
                "tensors": {
                    "value": "batch_llh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[classHMM.pred_score(x) / classHMM.latestNLL for classHMM in self.hmms]",
                            "ListComp"
                        ],
                        [
                            "[classHMM.pred_score(x) for classHMM in self.hmms]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "abs_140": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(self.n_states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_163": {
                "variable": {
                    "value": "self.transmat_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_163": {
                "variable": {
                    "value": "self.transmat_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_194": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[0] * d + [1] * (D - d), [1] * d + [0] * (D - d)] * nchain).astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_372": {
                "input": {
                    "value": "log_xi_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_compute_log_xi_sum(n_samples, n_components, fwdlattice, torch.log(self.transmat_ + self.EPS), bwdlattice, framelogprob, torch.ones(batch_size, n_components, n_components, device=self.device) * float('-inf'), logprob, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_372": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_390": {
                "variable": {
                    "value": "statcs_prob_components",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.n_prob_components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_393": {
                "variable": {
                    "value": "gamma_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.n_prob_components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_442": {
                "input": {
                    "value": "log_gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fwdlattice + bwdlattice",
                            "BinOp"
                        ],
                        [
                            "log_gamma - lse_gamma[:, :, None]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_479": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loglh_sk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[networks[s, k].log_prob(x, x_mask) / x.size(2) for k in range(self.n_prob_components)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "permute_479": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_481": {
                "variable": {
                    "value": "llh[:, :, s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(self.logPIk_s[s].reshape(1, 1, self.n_prob_components) + ll).detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_523": {
                "variable": {
                    "value": "log_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "old_loglh_sk.detach() + self.logPIk_s.reshape(1, self.n_states, self.n_prob_components)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_33": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logprob - self.history[-1] if self.history else np.nan",
                            "IfExp"
                        ],
                        [
                            "torch.abs(delta)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "*args": {
                    "value": "nn.Linear(d, H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_196": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[0, 1] * d, [1, 0] * d] * nchain).astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "*size": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_209": {
                "n": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_318": {
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_319": {
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_320": {
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_prob_components",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_357": {
                "input": {
                    "value": "self.transmat_ + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_379": {
                "input": {
                    "value": "local_loglh_sk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loglh_sk",
                            "Name"
                        ],
                        [
                            "torch.zeros((batch_size, n_samples, self.n_states, self.n_prob_components)).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_500": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_539": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_635": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.pi.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_639": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.pi.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_140": {
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_150": {
                "variable": {
                    "value": "self.startprob_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_169": {
                "variable": {
                    "value": "self.transmat_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_169": {
                "variable": {
                    "value": "self.transmat_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_189": {
                "in_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_190": {
                "in_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_191": {
                "p": {
                    "value": "p_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "MethodArgument"
                        ],
                        [
                            "0.25",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_191": {
                "in_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_359": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_components",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "n_components",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_34": {
                "input": {
                    "value": "self.history[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_166": {
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_176": {
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_177": {
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_550": {
                "input": {
                    "value": "logpk_sX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_num - log_denom.reshape(batch_size, n_samples, self.n_states, 1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/genHMM_GLOW.py": {
        "torch": {
            "load_813": {
                "variable": {
                    "value": "savable",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MultivariateNormal_243": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(n_D).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(n_D).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_277": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "sum([[p for p in flow.parameters() if p.requires_grad == True] for flow in self.networks.reshape(-1).tolist()], [])",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_488": {
                "variable": {
                    "value": "log_startprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.startprob_ + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_489": {
                "variable": {
                    "value": "log_transmat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.transmat_ + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_501": {
                "variable": {
                    "value": "log_startprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.startprob_ + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_502": {
                "variable": {
                    "value": "log_transmat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.transmat_ + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logsumexp_516": {
                "variable": {
                    "value": "lse_gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fwdlattice + bwdlattice",
                            "BinOp"
                        ],
                        [
                            "log_gamma - lse_gamma[:, :, None]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_565": {
                "variable": {
                    "value": "llh",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_567": {
                "variable": {
                    "value": "local_loglh_sk",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, n_samples, self.n_states, self.n_prob_components)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_643": {
                "variable": {
                    "value": "brackets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.loglh_sk",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_736": {
                "variable": {
                    "value": "self.startprob_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.startprob_ == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.startprob_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "startprob_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stats['start']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_743": {
                "variable": {
                    "value": "self.transmat_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.transmat_ == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.transmat_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "transmat_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stats['trans']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_768": {
                "variable": {
                    "value": "log_p_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(map(self.pred_score, traindata))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_807": {
                "obj": {
                    "value": "wrapper(mdl)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_79": {
                "variable": {
                    "value": "self.pclass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.hmms)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_104": {
                "tensors": {
                    "value": "batch_llh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[classHMM.pred_score(x) / classHMM.latestNLL for classHMM in self.hmms]",
                            "ListComp"
                        ],
                        [
                            "[classHMM.pred_score(x) for classHMM in self.hmms]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "abs_175": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(self.n_states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_195": {
                "variable": {
                    "value": "self.transmat_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_195": {
                "variable": {
                    "value": "self.transmat_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_441": {
                "input": {
                    "value": "log_xi_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_compute_log_xi_sum(n_samples, n_components, fwdlattice, torch.log(self.transmat_ + self.EPS), bwdlattice, framelogprob, torch.ones(batch_size, n_components, n_components, device=self.device) * float('-inf'), logprob, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_441": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_459": {
                "variable": {
                    "value": "statcs_prob_components",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.n_prob_components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_462": {
                "variable": {
                    "value": "gamma_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.n_prob_components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_520": {
                "input": {
                    "value": "log_gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fwdlattice + bwdlattice",
                            "BinOp"
                        ],
                        [
                            "log_gamma - lse_gamma[:, :, None]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_575": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loglh_sk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[networks[s, k].log_prob(x, self.in_channels, x_mask) / x.size(2) for k in range(self.n_prob_components)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "permute_575": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_577": {
                "variable": {
                    "value": "llh[:, :, s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(self.logPIk_s[s].reshape(1, 1, self.n_prob_components) + ll).detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_622": {
                "variable": {
                    "value": "log_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "old_loglh_sk.detach() + self.logPIk_s.reshape(1, self.n_states, self.n_prob_components)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_37": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logprob - self.history[-1] if self.history else np.nan",
                            "IfExp"
                        ],
                        [
                            "torch.abs(delta)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_180": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "*size": {
                    "value": "n_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(n_D)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_243": {
                "n": {
                    "value": "n_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(n_D)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_382": {
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_383": {
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_384": {
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_prob_components",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_426": {
                "input": {
                    "value": "self.transmat_ + self.EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_448": {
                "input": {
                    "value": "local_loglh_sk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loglh_sk",
                            "Name"
                        ],
                        [
                            "torch.zeros((batch_size, n_samples, self.n_states, self.n_prob_components)).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_600": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_638": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_752": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.pi.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_756": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.pi.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_175": {
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_185": {
                "variable": {
                    "value": "self.startprob_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_201": {
                "variable": {
                    "value": "self.transmat_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_201": {
                "variable": {
                    "value": "self.transmat_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_428": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_components",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "n_components",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_38": {
                "input": {
                    "value": "self.history[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_198": {
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_208": {
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_208": {
                "*size": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_649": {
                "input": {
                    "value": "logpk_sX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_num - log_denom.reshape(batch_size, n_samples, self.n_states, 1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/glow_modules.py": {
        "torch": {
            "exp_143": {
                "input": {
                    "value": "self.logs * self.logscale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_216": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z * torch.exp(-logs) - self.bias",
                            "BinOp"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x * torch.exp(self.logs * self.logscale_factor)",
                            "BinOp"
                        ],
                        [
                            "F.conv1d(z, weight)",
                            "Call"
                        ],
                        [
                            "F.conv1d(z, weight)",
                            "Call"
                        ],
                        [
                            "x.view(-1, nc, ns // factor, factor)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(-1, nc * factor, ns // factor)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_217": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z * torch.exp(-logs) - self.bias",
                            "BinOp"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x * torch.exp(self.logs * self.logscale_factor)",
                            "BinOp"
                        ],
                        [
                            "F.conv1d(z, weight)",
                            "Call"
                        ],
                        [
                            "F.conv1d(z, weight)",
                            "Call"
                        ],
                        [
                            "x.view(-1, nc, ns // factor, factor)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(-1, nc * factor, ns // factor)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_257": {
                "input": {
                    "value": "self.logs * self.logscale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lu_279": {
                "variable": {
                    "value": "(w_LU_pts, pivots)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.Tensor(w_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "lu_unpack_280": {
                "variable": {
                    "value": "(p, w_l, w_u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "LU_data": {
                    "value": "w_LU_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "LU_pivots": {
                    "value": "pivots",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "diag_281": {
                "input": {
                    "value": "w_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_u - s",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv1d_314": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x + self.bias) * torch.exp(logs)",
                            "BinOp"
                        ],
                        [
                            "F.conv1d(x, weight)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight)",
                            "Call"
                        ],
                        [
                            "cat_channel(z1, z2)",
                            "Call"
                        ],
                        [
                            "z.view(-1, nc // factor, factor, ns)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 3, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "z.view(-1, nc // factor, ns * factor)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(*self.weight.shape, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.weight_P, torch.matmul(self.weight_L, self.weight_U + self.s))",
                            "Call"
                        ],
                        [
                            "weight.view(*weight.shape, 1)",
                            "Call"
                        ],
                        [
                            "self.weight.inverse().view(*self.weight.shape, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul((self.weight_U + self.s).inverse().float(), torch.matmul(self.weight_L.inverse().float(), self.weight_P.inverse().float()))",
                            "Call"
                        ],
                        [
                            "weight.view(*weight.shape, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_327": {
                "input": {
                    "value": "self.weight_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight_U + self.s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv1d_329": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x + self.bias) * torch.exp(logs)",
                            "BinOp"
                        ],
                        [
                            "F.conv1d(x, weight)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight)",
                            "Call"
                        ],
                        [
                            "cat_channel(z1, z2)",
                            "Call"
                        ],
                        [
                            "z.view(-1, nc // factor, factor, ns)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 1, 3, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "z.view(-1, nc // factor, ns * factor)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(*self.weight.shape, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.weight_P, torch.matmul(self.weight_L, self.weight_U + self.s))",
                            "Call"
                        ],
                        [
                            "weight.view(*weight.shape, 1)",
                            "Call"
                        ],
                        [
                            "self.weight.inverse().view(*self.weight.shape, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul((self.weight_U + self.s).inverse().float(), torch.matmul(self.weight_L.inverse().float(), self.weight_P.inverse().float()))",
                            "Call"
                        ],
                        [
                            "weight.view(*weight.shape, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_351": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z * torch.exp(-logs) - self.bias",
                            "BinOp"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x * torch.exp(self.logs * self.logscale_factor)",
                            "BinOp"
                        ],
                        [
                            "F.conv1d(z, weight)",
                            "Call"
                        ],
                        [
                            "F.conv1d(z, weight)",
                            "Call"
                        ],
                        [
                            "x.view(-1, nc, ns // factor, factor)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(-1, nc * factor, ns // factor)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(*self.weight.shape, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.weight_P, torch.matmul(self.weight_L, self.weight_U + self.s))",
                            "Call"
                        ],
                        [
                            "weight.view(*weight.shape, 1)",
                            "Call"
                        ],
                        [
                            "self.weight.inverse().view(*self.weight.shape, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul((self.weight_U + self.s).inverse().float(), torch.matmul(self.weight_L.inverse().float(), self.weight_P.inverse().float()))",
                            "Call"
                        ],
                        [
                            "weight.view(*weight.shape, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_365": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(self.weight_U + self.s).inverse().float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.matmul(self.weight_L.inverse().float(), self.weight_P.inverse().float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv1d_368": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z * torch.exp(-logs) - self.bias",
                            "BinOp"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x * torch.exp(self.logs * self.logscale_factor)",
                            "BinOp"
                        ],
                        [
                            "F.conv1d(z, weight)",
                            "Call"
                        ],
                        [
                            "F.conv1d(z, weight)",
                            "Call"
                        ],
                        [
                            "x.view(-1, nc, ns // factor, factor)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(-1, nc * factor, ns // factor)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(*self.weight.shape, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.weight_P, torch.matmul(self.weight_L, self.weight_U + self.s))",
                            "Call"
                        ],
                        [
                            "weight.view(*weight.shape, 1)",
                            "Call"
                        ],
                        [
                            "self.weight.inverse().view(*self.weight.shape, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul((self.weight_U + self.s).inverse().float(), torch.matmul(self.weight_L.inverse().float(), self.weight_P.inverse().float()))",
                            "Call"
                        ],
                        [
                            "weight.view(*weight.shape, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_393": {
                "variable": {
                    "value": "self.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.flip(self.indices).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_394": {
                "variable": {
                    "value": "self.indices_inverse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.flip(self.indices_inverse).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_425": {
                "mean": {
                    "value": "torch.zeros_like(shape_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones_like(shape_tensor) * eps_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "data": {
                    "value": "torch.zeros(1, self.num_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "data": {
                    "value": "torch.zeros(1, self.num_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_74": {
                "input": {
                    "value": "logs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(self.scale / (torch.sqrt(x_var) + 1e-06)) / self.logscale_factor",
                            "BinOp"
                        ],
                        [
                            "self.logs * self.logscale_factor",
                            "BinOp"
                        ],
                        [
                            "self.logs * self.logscale_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_131": {
                "data": {
                    "value": "torch.zeros(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_245": {
                "data": {
                    "value": "torch.zeros(out_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_54": {
                "input": {
                    "value": "self.scale / (torch.sqrt(x_var) + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "logs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(self.scale / (torch.sqrt(x_var) + 1e-06)) / self.logscale_factor",
                            "BinOp"
                        ],
                        [
                            "self.logs * self.logscale_factor",
                            "BinOp"
                        ],
                        [
                            "self.logs * self.logscale_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_99": {
                "input": {
                    "value": "-logs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "logs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(self.scale / (torch.sqrt(x_var) + 1e-06)) / self.logscale_factor",
                            "BinOp"
                        ],
                        [
                            "self.logs * self.logscale_factor",
                            "BinOp"
                        ],
                        [
                            "self.logs * self.logscale_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_131": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_245": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_285": {
                "data": {
                    "value": "torch.Tensor(w_l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_286": {
                "data": {
                    "value": "torch.Tensor(w_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_287": {
                "data": {
                    "value": "torch.Tensor(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_294": {
                "data": {
                    "value": "torch.Tensor(w_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_311": {
                "input": {
                    "value": "torch.abs(torch.det(self.weight))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_326": {
                "input": {
                    "value": "torch.log(torch.diag(torch.abs(self.s)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_348": {
                "input": {
                    "value": "torch.abs(torch.det(self.weight))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_363": {
                "input": {
                    "value": "torch.log(torch.diag(torch.abs(self.s)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_366": {
                "input": {
                    "value": "self.weight_L.inverse().float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight_P.inverse().float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_425": {
                "input": {
                    "value": "shape_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_491": {
                "input": {
                    "value": "logs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(self.scale / (torch.sqrt(x_var) + 1e-06)) / self.logscale_factor",
                            "BinOp"
                        ],
                        [
                            "self.logs * self.logscale_factor",
                            "BinOp"
                        ],
                        [
                            "self.logs * self.logscale_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_311": {
                "input": {
                    "value": "torch.det(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_326": {
                "input": {
                    "value": "torch.diag(torch.abs(self.s))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_348": {
                "input": {
                    "value": "torch.det(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_363": {
                "input": {
                    "value": "torch.diag(torch.abs(self.s))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_426": {
                "input": {
                    "value": "shape_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_458": {
                "input": {
                    "value": "2.0 * logs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "det_311": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_326": {
                "input": {
                    "value": "torch.abs(self.s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "det_348": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_363": {
                "input": {
                    "value": "torch.abs(self.s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_54": {
                "input": {
                    "value": "x_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_mean(x ** 2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "reduce_mean(x ** 2, dim=[0, 2], keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_326": {
                "input": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_363": {
                "input": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_283": {
                "input": {
                    "value": "w_l",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "w_u + s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_284": {
                "input": {
                    "value": "w_l",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "w_u + s",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/ops.py": {
        "torch": {
            "zeros_161": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "split_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_25": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.mean(dim=d, keepdim=True)",
                            "Call"
                        ],
                        [
                            "tensor.sum(dim=d, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_61": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.mean(dim=d, keepdim=True)",
                            "Call"
                        ],
                        [
                            "tensor.sum(dim=d, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_94": {
                "input": {
                    "value": "torch.abs(a - b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_94": {
                "input": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/plot_functions.py": {
        "torch": {
            "from_numpy_22": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1).numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/realnvp.py": {
        "torch": {
            "Parameter_11": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 1, num_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nets() for _ in range(len(mask))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "weight_norm_73": {
                "variable": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "Rescale(int(self.mask.size(1) / 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_81": {
                "variable": {
                    "value": "idx_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "idx_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_84": {
                "variable": {
                    "value": "chunk_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * x",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "self.g(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(mask).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_86": {
                "variable": {
                    "value": "chunk_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * x",
                            "BinOp"
                        ],
                        [
                            "z",
                            "Name"
                        ],
                        [
                            "self.g(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(mask == 0).nonzero().reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_133": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_id, z_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_11": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rescale(torch.tanh(s))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_129": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rescale(torch.tanh(s))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/test.py": {
        "torch": {
            "from_numpy_80": {
                "ndarray": {
                    "value": "np.log(startprob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "ndarray": {
                    "value": "np.log(transmat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.concatenate((xx, np.zeros((length - xx.shape[0] + 1, d)))) for xx in x])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_83": {
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([xx.sum(axis=1) < 0 for xx in data], dtype=np.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "ndarray": {
                    "value": "np.log(startprob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "ndarray": {
                    "value": "np.log(transmat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.concatenate((xx, np.zeros((length - xx.shape[0] + 1, d)))) for xx in x])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_108": {
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([xx.sum(axis=1) < 0 for xx in data], dtype=np.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_130": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "n_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "n_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_134": {
                "ndarray": {
                    "value": "np.log(transmat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([np.concatenate((xx, np.zeros((length - xx.shape[0] + 1, d)))) for xx in x])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_139": {
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([xx.sum(axis=1) < 0 for xx in data], dtype=np.uint8)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "DataLoader_175": {
                "variable": {
                    "value": "batchdata",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TheDataset(x_padded, lengths=l, device=mdl.hmms[0].device)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mdl.forward(x_i[:, 1:]) for x_i in X]",
                            "ListComp"
                        ],
                        [
                            "[mdl.forward(x) for x in batchdata]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_185": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(out_list).transpose()",
                            "Call"
                        ],
                        [
                            "torch.cat(out_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "tensors": {
                    "value": "(torch.ones(l, dtype=torch.uint8), torch.zeros(max_len_ - l, dtype=torch.uint8))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_229": {
                "*size": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 3])",
                            "Call"
                        ],
                        [
                            "np.array([1, 1, 0, 0, 2, 2])",
                            "Call"
                        ],
                        [
                            "[xx.shape[0] for xx in X]",
                            "ListComp"
                        ],
                        [
                            "[xx.shape[0] for xx in X]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "*size": {
                    "value": "max_len_ - l",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}