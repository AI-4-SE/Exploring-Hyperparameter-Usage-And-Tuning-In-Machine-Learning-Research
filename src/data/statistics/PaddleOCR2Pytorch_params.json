{
    "converter/ch_ppocr_mobile_v2.0_cls_converter.py": {
        "torch": {}
    },
    "converter/ch_ppocr_mobile_v2.0_det_converter.py": {
        "torch": {}
    },
    "converter/ch_ppocr_mobile_v2.0_rec_converter.py": {
        "torch": {}
    },
    "converter/ch_ppocr_server_v2.0_det_converter.py": {
        "torch": {}
    },
    "converter/ch_ppocr_server_v2.0_rec_converter.py": {
        "torch": {}
    },
    "converter/ch_ppocr_v2_det_converter.py": {
        "torch": {
            "from_numpy_79": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randn(1, 3, 640, 640).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "converter/ch_ppocr_v2_rec_converter.py": {
        "torch": {
            "from_numpy_84": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randn(1, 3, 32, 320).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "converter/ch_ppocr_v3_det_converter.py": {
        "torch": {
            "from_numpy_79": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randn(1, 3, 640, 640).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "converter/ch_ppocr_v3_rec_converter.py": {
        "torch": {
            "from_numpy_97": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randn(1, 3, 48, 320).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "converter/ch_ppocr_v3_rec_converter_nodistill.py": {
        "torch": {
            "from_numpy_114": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randn(1, 3, 48, 320).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "converter/det_converter.py": {
        "torch": {}
    },
    "converter/det_fcenet_converter.py": {
        "torch": {
            "from_numpy_130": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randn(1, 3, 736, 1312).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "converter/e2e_converter.py": {
        "torch": {}
    },
    "converter/layoutxlm_re_converter.py": {
        "torch": {
            "save_81": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "_use_new_zipfile_serialization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_83": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "converter/layoutxlm_ser_converter.py": {
        "torch": {
            "save_87": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "_use_new_zipfile_serialization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_89": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "converter/multilingual_mobile_v2.0_rec_converter.py": {
        "torch": {}
    },
    "converter/multilingual_ppocr_v3_rec_converter.py": {
        "torch": {
            "from_numpy_97": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randn(1, 3, 48, 320).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "converter/ppstructure_table_det_converter.py": {
        "torch": {
            "from_numpy_70": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randn(1, 3, 640, 640).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "converter/ppstructure_table_rec_converter.py": {
        "torch": {
            "from_numpy_84": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randn(1, 3, 32, 320).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "converter/ppstructure_table_structure_converter.py": {
        "torch": {
            "from_numpy_103": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randn(1, 3, 488, 488).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "converter/rec_converter.py": {
        "torch": {}
    },
    "converter/rec_nrtr_mtb_converter.py": {
        "torch": {}
    },
    "converter/rec_sar_converter.py": {
        "torch": {
            "from_numpy_113": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randn(1, 3, 48, 160).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "converter/rec_svtr_converter.py": {
        "torch": {
            "from_numpy_116": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randn(1, 3, 64, 256).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "converter/srn_converter.py": {
        "torch": {}
    },
    "misc/attention_grucell.py": {
        "torch": {
            "Tensor_124": {
                "variable": {
                    "value": "char_onehots",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "192",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "96",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "96",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "96",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "96",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRUCell_58": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size + num_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "96",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_65": {
                "variable": {
                    "value": "prev_hidden_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h2h(prev_hidden)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_67": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_H_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.i2h(batch_H)",
                            "Call"
                        ],
                        [
                            "self.i2h(batch_H)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "prev_hidden_proj",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_68": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "paddle.add(batch_H_proj, prev_hidden_proj)",
                            "Call"
                        ],
                        [
                            "paddle.tanh(res)",
                            "Call"
                        ],
                        [
                            "torch.add(batch_H_proj, prev_hidden_proj)",
                            "Call"
                        ],
                        [
                            "torch.tanh(res)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score(res)",
                            "Call"
                        ],
                        [
                            "self.score(res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(alpha, batch_H)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "concat_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context, char_onehots.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "paddle.nn.functional.softmax(e, axis=1)",
                            "Call"
                        ],
                        [
                            "paddle.transpose(alpha, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "F.softmax(e, dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch_H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_138": {},
            "Tensor_140": {}
        }
    },
    "misc/attention_head.py": {
        "torch": {
            "Linear_119": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "96",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "38",
                            "Constant"
                        ]
                    ]
                }
            },
            "one_hot_122": {
                "variable": {
                    "value": "input_ont_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_char.type(torch.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "onehot_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "96",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "96",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "96",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "96",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRUCell_174": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size + num_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "96",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_181": {
                "variable": {
                    "value": "prev_hidden_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h2h(prev_hidden)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_183": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_H_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.i2h(batch_H)",
                            "Call"
                        ],
                        [
                            "self.i2h(batch_H)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "prev_hidden_proj",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_184": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "paddle.add(batch_H_proj, prev_hidden_proj)",
                            "Call"
                        ],
                        [
                            "paddle.tanh(res)",
                            "Call"
                        ],
                        [
                            "torch.add(batch_H_proj, prev_hidden_proj)",
                            "Call"
                        ],
                        [
                            "torch.tanh(res)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_187": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score(res)",
                            "Call"
                        ],
                        [
                            "self.score(res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_189": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(alpha, batch_H)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "concat_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context, char_onehots.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_189": {
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "paddle.nn.functional.softmax(e, axis=1)",
                            "Call"
                        ],
                        [
                            "paddle.transpose(alpha, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.softmax(e, dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch_H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_156": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.generator(outputs)",
                            "Call"
                        ],
                        [
                            "self.generator(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[probs, torch.unsqueeze(probs_step, dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_138": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer(inputs, None, 25)",
                            "Call"
                        ],
                        [
                            "layer(inputs, None, 25)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_239": {},
            "unsqueeze_159": {
                "input": {
                    "value": "probs_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.generator(outputs)",
                            "Call"
                        ],
                        [
                            "self.generator(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "misc/common.py": {
        "torch": {
            "ReLU_33": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu6_25": {
                "input": {
                    "value": "1.2 * x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU6_35": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu6_13": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_43": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "misc/conv.py": {
        "torch": {
            "Conv2d_72": {
                "variable": {
                    "value": "tfc",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_76": {}
        }
    },
    "misc/fc.py": {
        "torch": {
            "Linear_39": {
                "variable": {
                    "value": "tfc",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_44": {}
        }
    },
    "misc/gelu.py": {
        "torch": {
            "from_numpy_50": {
                "variable": {
                    "value": "org",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randn(*INPUT_SIZE).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gelu_32": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randn(*INPUT_SIZE).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "misc/gru_cell.py": {
        "torch": {
            "Tensor_62": {
                "variable": {
                    "value": "prev_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRUCell_64": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_size": {
                    "value": "230",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_72": {}
        }
    },
    "misc/hard_swish.py": {
        "torch": {
            "from_numpy_49": {
                "variable": {
                    "value": "org",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randn(*INPUT_SIZE).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu6_32": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "misc/hs.py": {
        "torch": {
            "from_numpy_64": {
                "variable": {
                    "value": "org",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randn(*INPUT_SIZE).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_46": {
                "input": {
                    "value": "slope * x + offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu6_42": {
                "input": {
                    "value": "(1.0 + self.slope) * x + self.bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "misc/layernorm.py": {
        "torch": {
            "LayerNorm_58": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "elementwise_affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tensor_113": {}
        }
    },
    "misc/lstm.py": {
        "torch": {
            "LSTM_58": {
                "variable": {
                    "value": "lstm",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_75": {
                "variable": {
                    "value": "self.rnn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_76": {
                "variable": {
                    "value": "self.rnn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_63": {},
            "cat_83": {
                "tensors": {
                    "value": "[out1, torch.flip(out2, [1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_82": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.rand(1, 80, 512).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_83": {
                "input": {
                    "value": "out2",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "misc/pt_rec_resnet_fpn.py": {
        "torch": {
            "ModuleList_50": {
                "variable": {
                    "value": "self.block_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_91": {
                "variable": {
                    "value": "self.base_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "bb_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_ch_list[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[in_ch // 4, in_ch // 2, in_ch]",
                            "List"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_ch_list[i + 1] + out_ch_list[i]",
                            "BinOp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2 if stride == (1, 1) else kernel_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2 if stride == (1, 1) else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(2, 1)",
                            "Tuple"
                        ],
                        [
                            "(1, 1)",
                            "Tuple"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_177": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_248": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(y)",
                            "Call"
                        ],
                        [
                            "self.conv2(y)",
                            "Call"
                        ],
                        [
                            "y + self.short(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(y)",
                            "Call"
                        ],
                        [
                            "y + self.short(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "bb_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_ch_list[i + 1] + out_ch_list[i]",
                            "BinOp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch_list[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[in_ch // 4, in_ch // 2, in_ch]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "bb_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_ch_list[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[in_ch // 4, in_ch // 2, in_ch]",
                            "List"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch_list[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[in_ch // 4, in_ch // 2, in_ch]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "bb_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(out_ch_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_280": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(y)",
                            "Call"
                        ],
                        [
                            "self.conv2(y)",
                            "Call"
                        ],
                        [
                            "y + self.short(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(y)",
                            "Call"
                        ],
                        [
                            "y + self.short(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_147": {
                "variable": {
                    "value": "base",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[base, F[-j - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "num_features": {
                    "value": "out_ch_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "misc/pt_rec_srn_head.py": {
        "torch": {
            "Linear_73": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_76": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.max_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "variable": {
                    "value": "conv_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, c, h * w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "word_features_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wrap_encoder_for_feature(enc_inputs)",
                            "Call"
                        ],
                        [
                            "self.fc0(word_features)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, t, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "word_pos_feature_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_pos_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb(gsrm_word_pos)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_length, 1, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_105": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_pos_feature_ + word_features_",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(y)",
                            "Call"
                        ],
                        [
                            "torch.reshape(attention_weight, shape=[-1, self.max_length, t])",
                            "Call"
                        ],
                        [
                            "F.softmax(attention_weight, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_length, t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_109": {
                "variable": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(y)",
                            "Call"
                        ],
                        [
                            "torch.reshape(attention_weight, shape=[-1, self.max_length, t])",
                            "Call"
                        ],
                        [
                            "F.softmax(attention_weight, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "pvam_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(y)",
                            "Call"
                        ],
                        [
                            "torch.reshape(attention_weight, shape=[-1, self.max_length, t])",
                            "Call"
                        ],
                        [
                            "F.softmax(attention_weight, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "word_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wrap_encoder_for_feature(enc_inputs)",
                            "Call"
                        ],
                        [
                            "self.fc0(word_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.char_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "variable": {
                    "value": "pvam_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_173": {
                "variable": {
                    "value": "word_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(word_out, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "word_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argmax(F.softmax(word_out, dim=-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(word_ids, shape=[-1, t, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, t, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_184": {
                "variable": {
                    "value": "word1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_ids.type(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, 0, 1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0 * pad_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_198": {
                "variable": {
                    "value": "gsrm_feature2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gsrm_feature2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wrap_encoder1(enc_inputs_2)",
                            "Call"
                        ],
                        [
                            "F.pad(gsrm_feature2, [0, 0, 0, 1, 0, 0], value=0.0)",
                            "Call"
                        ],
                        [
                            "gsrm_feature2[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_207": {
                "variable": {
                    "value": "gsrm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gsrm_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mul(gsrm_features)",
                            "Call"
                        ],
                        [
                            "torch.reshape(gsrm_out, [-1, c])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_216": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "pvam_ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_218": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "pvam_ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.char_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "combine_feature_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pvam_feature, gsrm_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_225": {
                "variable": {
                    "value": "img_comb_feature_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combine_feature_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([pvam_feature, gsrm_feature], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, c1 + c2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_228": {
                "variable": {
                    "value": "img_comb_feature_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_comb_feature_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc0(img_comb_feature_)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(img_comb_feature_map)",
                            "Call"
                        ],
                        [
                            "torch.reshape(img_comb_feature_map, shape=[-1, t, c1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_229": {
                "variable": {
                    "value": "img_comb_feature_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_comb_feature_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc0(img_comb_feature_)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(img_comb_feature_map)",
                            "Call"
                        ],
                        [
                            "torch.reshape(img_comb_feature_map, shape=[-1, t, c1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, t, c1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_233": {
                "variable": {
                    "value": "img_comb_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combine_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img_comb_feature_map * pvam_feature + (1.0 - img_comb_feature_map) * gsrm_feature",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, c1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "topk_286": {
                "variable": {
                    "value": "(_, decoded_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "final_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.vsfd(pvam_feature, gsrm_feature)",
                            "Call"
                        ],
                        [
                            "F.softmax(final_out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_284": {
                "variable": {
                    "value": "final_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.vsfd(pvam_feature, gsrm_feature)",
                            "Call"
                        ],
                        [
                            "F.softmax(final_out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.wrap_encoder0.prepare_decoder.emb0.weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_173": {
                "input": {
                    "value": "word_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc0(pvam_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_72": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_79": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "misc/pt_self_attention.py": {
        "torch": {
            "ModuleList_129": {
                "variable": {
                    "value": "self.encoder_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.q_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_key * n_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_204": {
                "variable": {
                    "value": "self.k_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_key * n_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_206": {
                "variable": {
                    "value": "self.v_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_value * n_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.proj_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_value * n_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_219": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.q_fc(queries)",
                            "Call"
                        ],
                        [
                            "torch.reshape(q, shape=[q.size(0), q.size(1), self.n_head, self.d_key])",
                            "Call"
                        ],
                        [
                            "q.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[q.size(0), q.size(1), self.n_head, self.d_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_254": {
                "variable": {
                    "value": "product",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.q_fc(queries)",
                            "Call"
                        ],
                        [
                            "torch.reshape(q, shape=[q.size(0), q.size(1), self.n_head, self.d_key])",
                            "Call"
                        ],
                        [
                            "q.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_258": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "product",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "product * self.d_model ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "product + attn_bias",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_264": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(product, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cache['static_v']",
                            "Subscript"
                        ],
                        [
                            "self.v_fc(values)",
                            "Call"
                        ],
                        [
                            "torch.reshape(v, shape=[v.size(0), v.size(1), self.n_head, self.d_value])",
                            "Call"
                        ],
                        [
                            "v.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([cache_v, v], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_268": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(out, shape=[out.size(0), out.size(1), out.shape[2] * out.shape[3]])",
                            "Call"
                        ],
                        [
                            "self.proj_fc(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(enc_input, p=self.dropout_rate)",
                            "Call"
                        ],
                        [
                            "enc_input",
                            "Name"
                        ],
                        [
                            "F.dropout(enc_input, p=self.dropout_rate)",
                            "Call"
                        ],
                        [
                            "enc_input",
                            "Name"
                        ],
                        [
                            "self.fc2(hidden)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out.size(0), out.size(1), out.shape[2] * out.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_306": {
                "variable": {
                    "value": "self.functors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_357": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.src_max_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.src_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_368": {
                "variable": {
                    "value": "src_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(src_pos, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(src_pos, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_397": {
                "variable": {
                    "value": "self.emb0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "src_vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.src_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "bos_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_402": {
                "variable": {
                    "value": "self.emb1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "src_max_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.src_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_409": {
                "variable": {
                    "value": "src_word",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_word.type(torch.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_413": {
                "variable": {
                    "value": "src_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(src_pos, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(src_pos, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_435": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_inner_hid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_437": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_inner_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_442": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(hidden)",
                            "Call"
                        ],
                        [
                            "F.dropout(hidden, p=self.dropout_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_229": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cache['static_k']",
                            "Subscript"
                        ],
                        [
                            "self.k_fc(keys)",
                            "Call"
                        ],
                        [
                            "torch.reshape(k, shape=[k.size(0), k.size(1), self.n_head, self.d_key])",
                            "Call"
                        ],
                        [
                            "k.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([cache_k, k], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[k.size(0), k.size(1), self.n_head, self.d_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_231": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cache['static_v']",
                            "Subscript"
                        ],
                        [
                            "self.v_fc(values)",
                            "Call"
                        ],
                        [
                            "torch.reshape(v, shape=[v.size(0), v.size(1), self.n_head, self.d_value])",
                            "Call"
                        ],
                        [
                            "v.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([cache_v, v], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[v.size(0), v.size(1), self.n_head, self.d_value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_262": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(product, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_375": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.prepare_encoder(conv_features, src_pos)",
                            "Call"
                        ],
                        [
                            "self.prepare_decoder(src_word, src_pos)",
                            "Call"
                        ],
                        [
                            "enc_output",
                            "Name"
                        ],
                        [
                            "src_word_emb + src_pos_enc",
                            "BinOp"
                        ],
                        [
                            "src_word_emb + src_pos_enc",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_420": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.prepare_encoder(conv_features, src_pos)",
                            "Call"
                        ],
                        [
                            "self.prepare_decoder(src_word, src_pos)",
                            "Call"
                        ],
                        [
                            "enc_output",
                            "Name"
                        ],
                        [
                            "src_word_emb + src_pos_enc",
                            "BinOp"
                        ],
                        [
                            "src_word_emb + src_pos_enc",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_446": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(hidden)",
                            "Call"
                        ],
                        [
                            "F.dropout(hidden, p=self.dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cache_k, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cache_v, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_316": {
                "variable": {
                    "value": "layerNorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "elementwise_affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_329": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "functor(x, residual)",
                            "Call"
                        ],
                        [
                            "functor(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "misc/pt_table_att_head.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.structure_generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.elem_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_39": {
                "variable": {
                    "value": "input_ont_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_char.type(torch.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "onehot_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRUCell_99": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size + num_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_105": {
                "variable": {
                    "value": "prev_hidden_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h2h(prev_hidden)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_106": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_H_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.i2h(batch_H)",
                            "Call"
                        ],
                        [
                            "self.i2h(batch_H)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "prev_hidden_proj",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_107": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(batch_H_proj, prev_hidden_proj)",
                            "Call"
                        ],
                        [
                            "torch.tanh(res)",
                            "Call"
                        ],
                        [
                            "torch.add(batch_H_proj, prev_hidden_proj)",
                            "Call"
                        ],
                        [
                            "torch.tanh(res)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_109": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score(res)",
                            "Call"
                        ],
                        [
                            "self.score(res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_111": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(alpha, batch_H)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "concat_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context, char_onehots.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_129": {
                "variable": {
                    "value": "input_ont_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_char",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "onehot_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_195": {
                "variable": {
                    "value": "prev_hidden_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h2h(prev_hidden[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_196": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_H_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.i2h(batch_H)",
                            "Call"
                        ],
                        [
                            "self.i2h(batch_H)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "prev_hidden_proj",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_197": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(batch_H_proj, prev_hidden_proj)",
                            "Call"
                        ],
                        [
                            "torch.tanh(res)",
                            "Call"
                        ],
                        [
                            "torch.add(batch_H_proj, prev_hidden_proj)",
                            "Call"
                        ],
                        [
                            "torch.tanh(res)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_200": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score(res)",
                            "Call"
                        ],
                        [
                            "self.score(res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_202": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(alpha, batch_H)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "concat_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context, char_onehots.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.loc_generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.loc_generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "fea",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fea",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(fea, [fea.shape[0], fea.shape[1], last_shape])",
                            "Call"
                        ],
                        [
                            "fea.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[fea.shape[0], fea.shape[1], last_shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "temp_elem",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_65": {
                "variable": {
                    "value": "max_elem_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.max_elem_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "structure_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "structure_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.structure_generator(output)",
                            "Call"
                        ],
                        [
                            "F.softmax(structure_probs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_185": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size + num_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRUCell_188": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size + num_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.loc_fea_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.max_elem_length + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_82": {
                "variable": {
                    "value": "loc_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.loc_generator(output)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(loc_preds)",
                            "Call"
                        ],
                        [
                            "self.loc_generator(loc_concat)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(loc_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_87": {
                "variable": {
                    "value": "loc_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, loc_fea]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_89": {
                "variable": {
                    "value": "loc_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.loc_generator(output)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(loc_preds)",
                            "Call"
                        ],
                        [
                            "self.loc_generator(loc_concat)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(loc_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_111": {
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.softmax(e, dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(e, dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch_H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "*size": {
                    "value": "(batch_size, self.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_202": {
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.softmax(e, dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(e, dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch_H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.loc_fea_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "625",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.max_elem_length + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.loc_fea_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.max_elem_length + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_165": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.generator(hidden[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[probs, torch.unsqueeze(probs_step, dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_149": {
                "input": {
                    "value": "hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_168": {
                "input": {
                    "value": "probs_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.generator(hidden[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "misc/pt_table_fpn.py": {
        "torch": {
            "Conv2d_16": {
                "variable": {
                    "value": "self.in2_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.in3_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.in4_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.in5_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.p5_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.p4_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.p3_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.p2_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.fuse_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_83": {
                "variable": {
                    "value": "p4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in4 + F.interpolate(in5, size=in4.shape[2:4], mode='nearest')",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "in5.shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_84": {
                "variable": {
                    "value": "p3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in3 + F.interpolate(out4, size=in3.shape[2:4], mode='nearest')",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "in5.shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_85": {
                "variable": {
                    "value": "p2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in2 + F.interpolate(out3, size=in2.shape[2:4], mode='nearest')",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "in5.shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "fuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[in5, p4, p3, p2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_76": {
                "input": {
                    "value": "in5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.in5_conv(c5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "in4.shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_78": {
                "input": {
                    "value": "out4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in4 + F.interpolate(in5, size=in4.shape[2:4], mode='nearest')",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "in3.shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_80": {
                "input": {
                    "value": "out3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in3 + F.interpolate(out4, size=in3.shape[2:4], mode='nearest')",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "in2.shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "misc/pt_table_mobilenet_v3.py": {
        "torch": {
            "clamp_23": {
                "input": {
                    "value": "slope * x + offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_169": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_247": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_248": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_255": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_266": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.avg_pool(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv1(outputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(outputs)",
                            "Call"
                        ],
                        [
                            "hard_sigmoid(outputs, slope=0.2, offset=0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_240": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "stage(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "hard_swish(x)",
                            "Call"
                        ],
                        [
                            "self.expand_conv(inputs)",
                            "Call"
                        ],
                        [
                            "self.bottleneck_conv(x)",
                            "Call"
                        ],
                        [
                            "self.mid_se(x)",
                            "Call"
                        ],
                        [
                            "self.linear_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.add(inputs, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu6_26": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_134": {
                "*args": {
                    "value": "*block_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_178": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "stage(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "hard_swish(x)",
                            "Call"
                        ],
                        [
                            "self.expand_conv(inputs)",
                            "Call"
                        ],
                        [
                            "self.bottleneck_conv(x)",
                            "Call"
                        ],
                        [
                            "self.mid_se(x)",
                            "Call"
                        ],
                        [
                            "self.linear_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.add(inputs, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_109": {
                "*args": {
                    "value": "*block_list",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "misc/rec_resnet_fpn.py": {
        "torch": {
            "Tensor_109": {}
        }
    },
    "misc/rec_srn.py": {
        "torch": {
            "Tensor_108": {}
        }
    },
    "misc/rec_srn_head.py": {
        "torch": {
            "Tensor_94": {
                "variable": {
                    "value": "x3",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_95": {
                "variable": {
                    "value": "x4",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_168": {},
            "Tensor_164": {},
            "Tensor_166": {}
        }
    },
    "misc/table_att_head.py": {
        "torch": {
            "no_grad_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_194": {
                "ndarray": {
                    "value": "e_x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "misc/table_det.py": {
        "torch": {
            "from_numpy_154": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.rand(*INPUT_SIZE).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(*INPUT_SIZE).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.neck(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "misc/table_mobile.py": {
        "torch": {
            "from_numpy_199": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.rand(*INPUT_SIZE).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(*INPUT_SIZE).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(*INPUT_SIZE).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "misc/table_mobilenet_v3.py": {
        "torch": {
            "from_numpy_176": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.rand(*INPUT_SIZE).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.load('inp.npy')",
                            "Call"
                        ],
                        [
                            "np.random.rand(*INPUT_SIZE).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.rand(*INPUT_SIZE).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.load('inp.npy')",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.backbone(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ptstructure/layout/ptppyolov2/ppyolo_utils.py": {
        "torch": {
            "Conv2d_91": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3 * kernel_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_114": {
                "variable": {
                    "value": "(offset, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "offset_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.offset_channel, self.mask_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_119": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "1.0 - mask_inv",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_13": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_150": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_pool2d_200": {
                "variable": {
                    "value": "mask_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(torch.rand(x.size(), dtype=x.dtype) < gamma).to(x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.block_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self.data_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_13": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu6_142": {
                "input": {
                    "value": "1.2 * x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu6_130": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU6_154": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_199": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_162": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_164": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ptstructure/layout/ptppyolov2/ppyolov2.py": {
        "torch": {
            "from_numpy_107": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(image_data, 0)",
                            "Call"
                        ],
                        [
                            "image_data.transpose([0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ptstructure/layout/ptppyolov2/ppyolov2_base.py": {
        "torch": {
            "load_224": {
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_230": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "_use_new_zipfile_serialization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_232": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ptstructure/layout/ptppyolov2/ppyolov2_darknet.py": {
        "torch": {
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ch_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[64, 128, 256, 512, 1024]",
                            "List"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "add_169": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv2(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_205": {
                "variable": {
                    "value": "self.res_out_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_292": {
                "variable": {
                    "value": "self.darknet_conv_block_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_293": {
                "variable": {
                    "value": "self.downsample_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_74": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(inputs)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out, 0.1)",
                            "Call"
                        ],
                        [
                            "mish(out)",
                            "Call"
                        ],
                        [
                            "self.conv_bn_layer(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(inputs, conv2)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.downsample0(out)",
                            "Call"
                        ],
                        [
                            "conv_block_i(out)",
                            "Call"
                        ],
                        [
                            "self.downsample_list[self.downsample_list_names[i]](out)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "ptstructure/layout/ptppyolov2/ppyolov2_layout.py": {
        "torch": {
            "cat_129": {
                "variable": {
                    "value": "yolo_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "yolo_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_207": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(image_data, 0)",
                            "Call"
                        ],
                        [
                            "image_data.transpose([0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ptstructure/layout/ptppyolov2/ppyolov2_pt.py": {
        "torch": {
            "from_numpy_110": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(image_data, 0)",
                            "Call"
                        ],
                        [
                            "image_data.transpose([0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_162": {
                "variable": {
                    "value": "yolo_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "yolo_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ptstructure/layout/ptppyolov2/ppyolov2_resnet.py": {
        "torch": {
            "AdaptiveAvgPool2d_186": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.squeeze",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ch // reduction_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_206": {
                "variable": {
                    "value": "self.extract",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ch // reduction_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_217": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv(inputs, offset, mask=mask)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.act)(out)",
                            "Call"
                        ],
                        [
                            "self.pool(inputs)",
                            "Call"
                        ],
                        [
                            "out.squeeze(dim=3).squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "self.squeeze(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.extract(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "out.unsqueeze(dim=2).unsqueeze(dim=3)",
                            "Call"
                        ],
                        [
                            "self.branch2a(inputs)",
                            "Call"
                        ],
                        [
                            "self.branch2b(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "torch.add(out, short)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.branch2a(inputs)",
                            "Call"
                        ],
                        [
                            "self.branch2b(out)",
                            "Call"
                        ],
                        [
                            "self.branch2c(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "torch.add(out, short)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_219": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv(inputs, offset, mask=mask)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.act)(out)",
                            "Call"
                        ],
                        [
                            "self.pool(inputs)",
                            "Call"
                        ],
                        [
                            "out.squeeze(dim=3).squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "self.squeeze(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.extract(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "out.unsqueeze(dim=2).unsqueeze(dim=3)",
                            "Call"
                        ],
                        [
                            "self.branch2a(inputs)",
                            "Call"
                        ],
                        [
                            "self.branch2b(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "torch.add(out, short)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.branch2a(inputs)",
                            "Call"
                        ],
                        [
                            "self.branch2b(out)",
                            "Call"
                        ],
                        [
                            "self.branch2c(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "torch.add(out, short)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_334": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv(inputs, offset, mask=mask)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.act)(out)",
                            "Call"
                        ],
                        [
                            "self.pool(inputs)",
                            "Call"
                        ],
                        [
                            "out.squeeze(dim=3).squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "self.squeeze(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.extract(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "out.unsqueeze(dim=2).unsqueeze(dim=3)",
                            "Call"
                        ],
                        [
                            "self.branch2a(inputs)",
                            "Call"
                        ],
                        [
                            "self.branch2b(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "torch.add(out, short)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.branch2a(inputs)",
                            "Call"
                        ],
                        [
                            "self.branch2b(out)",
                            "Call"
                        ],
                        [
                            "self.branch2c(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "torch.add(out, short)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "short",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_335": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv(inputs, offset, mask=mask)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.act)(out)",
                            "Call"
                        ],
                        [
                            "self.pool(inputs)",
                            "Call"
                        ],
                        [
                            "out.squeeze(dim=3).squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "self.squeeze(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.extract(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "out.unsqueeze(dim=2).unsqueeze(dim=3)",
                            "Call"
                        ],
                        [
                            "self.branch2a(inputs)",
                            "Call"
                        ],
                        [
                            "self.branch2b(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "torch.add(out, short)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.branch2a(inputs)",
                            "Call"
                        ],
                        [
                            "self.branch2b(out)",
                            "Call"
                        ],
                        [
                            "self.branch2c(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "torch.add(out, short)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_470": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv(inputs, offset, mask=mask)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.act)(out)",
                            "Call"
                        ],
                        [
                            "self.pool(inputs)",
                            "Call"
                        ],
                        [
                            "out.squeeze(dim=3).squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "self.squeeze(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.extract(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "out.unsqueeze(dim=2).unsqueeze(dim=3)",
                            "Call"
                        ],
                        [
                            "self.branch2a(inputs)",
                            "Call"
                        ],
                        [
                            "self.branch2b(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "torch.add(out, short)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.branch2a(inputs)",
                            "Call"
                        ],
                        [
                            "self.branch2b(out)",
                            "Call"
                        ],
                        [
                            "self.branch2c(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "torch.add(out, short)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "short",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_471": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv(inputs, offset, mask=mask)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.act)(out)",
                            "Call"
                        ],
                        [
                            "self.pool(inputs)",
                            "Call"
                        ],
                        [
                            "out.squeeze(dim=3).squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "self.squeeze(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.extract(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "out.unsqueeze(dim=2).unsqueeze(dim=3)",
                            "Call"
                        ],
                        [
                            "self.branch2a(inputs)",
                            "Call"
                        ],
                        [
                            "self.branch2b(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "torch.add(out, short)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.branch2a(inputs)",
                            "Call"
                        ],
                        [
                            "self.branch2b(out)",
                            "Call"
                        ],
                        [
                            "self.branch2c(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "torch.add(out, short)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_496": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_627": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_664": {
                "variable": {
                    "value": "self.res_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_pool2d_725": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ch_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ch_out * block.expansion",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(filter_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ch_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ch_out * block.expansion",
                            "BinOp"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3 * filter_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(filter_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SyncBatchNorm_130": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_142": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_166": {
                "variable": {
                    "value": "(offset, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "offset_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_offset(inputs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.offset_channel, self.mask_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_171": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_249": {
                "variable": {
                    "value": "self.short",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_369": {
                "variable": {
                    "value": "self.short",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_267": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_387": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "ptstructure/layout/ptppyolov2/ppyolov2_yolo_fpn.py": {
        "torch": {
            "Sequential_72": {
                "variable": {
                    "value": "self.conv_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_139": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_236": {
                "variable": {
                    "value": "self.conv_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_276": {
                "variable": {
                    "value": "self.conv_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_382": {
                "variable": {
                    "value": "self.conv_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_429": {
                "variable": {
                    "value": "self.yolo_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_432": {
                "variable": {
                    "value": "self.routes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_588": {
                "variable": {
                    "value": "self.yolo_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_591": {
                "variable": {
                    "value": "self.routes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_766": {
                "variable": {
                    "value": "self.yolo_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_769": {
                "variable": {
                    "value": "self.routes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_913": {
                "variable": {
                    "value": "self.fpn_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_915": {
                "variable": {
                    "value": "self.fpn_routes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_1017": {
                "variable": {
                    "value": "self.pan_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_1021": {
                "variable": {
                    "value": "self.pan_routes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, gx, gy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, gx, gy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[conv_left, conv_right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_399": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[conv_left, conv_right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_26": {
                "start": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_27": {
                "start": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_517": {
                "variable": {
                    "value": "route",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "route",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_module(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv_module(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv_module(inputs)",
                            "Call"
                        ],
                        [
                            "ConvBNLayer(ch_in=512 // 2 ** i, ch_out=256 // 2 ** i, filter_size=1, stride=1, padding=0, norm_type=norm_type, freeze_norm=freeze_norm, data_format=data_format, name=name)",
                            "Call"
                        ],
                        [
                            "self.routes[self.routes_names[i]](route)",
                            "Call"
                        ],
                        [
                            "F.interpolate(route, scale_factor=2.0)",
                            "Call"
                        ],
                        [
                            "ConvBNLayer(ch_in=channel, ch_out=256 // 2 ** i, filter_size=1, stride=1, padding=0, norm_type=norm_type, freeze_norm=freeze_norm, data_format=data_format, name=name)",
                            "Call"
                        ],
                        [
                            "self.routes[self.routes_names[i]](route)",
                            "Call"
                        ],
                        [
                            "F.interpolate(route, scale_factor=2.0, data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "ConvBNLayer(ch_in=ch_out, ch_out=ch_out, filter_size=1, stride=1, padding=0, norm_type=norm_type, data_format=data_format, name=name)",
                            "Call"
                        ],
                        [
                            "self.routes[self.routes_names[i]](route)",
                            "Call"
                        ],
                        [
                            "F.interpolate(route, scale_factor=2.0)",
                            "Call"
                        ],
                        [
                            "fpn_feats[self.num_blocks - 1]",
                            "Subscript"
                        ],
                        [
                            "self.pan_routes[pan_route_name](route)",
                            "Call"
                        ],
                        [
                            "self.fpn_routes[self.fpn_routes_names[i]](route)",
                            "Call"
                        ],
                        [
                            "F.interpolate(route, scale_factor=2.0)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "interpolate_712": {
                "variable": {
                    "value": "route",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "route",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_module(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv_module(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv_module(inputs)",
                            "Call"
                        ],
                        [
                            "ConvBNLayer(ch_in=512 // 2 ** i, ch_out=256 // 2 ** i, filter_size=1, stride=1, padding=0, norm_type=norm_type, freeze_norm=freeze_norm, data_format=data_format, name=name)",
                            "Call"
                        ],
                        [
                            "self.routes[self.routes_names[i]](route)",
                            "Call"
                        ],
                        [
                            "F.interpolate(route, scale_factor=2.0)",
                            "Call"
                        ],
                        [
                            "ConvBNLayer(ch_in=channel, ch_out=256 // 2 ** i, filter_size=1, stride=1, padding=0, norm_type=norm_type, freeze_norm=freeze_norm, data_format=data_format, name=name)",
                            "Call"
                        ],
                        [
                            "self.routes[self.routes_names[i]](route)",
                            "Call"
                        ],
                        [
                            "F.interpolate(route, scale_factor=2.0, data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "ConvBNLayer(ch_in=ch_out, ch_out=ch_out, filter_size=1, stride=1, padding=0, norm_type=norm_type, data_format=data_format, name=name)",
                            "Call"
                        ],
                        [
                            "self.routes[self.routes_names[i]](route)",
                            "Call"
                        ],
                        [
                            "F.interpolate(route, scale_factor=2.0)",
                            "Call"
                        ],
                        [
                            "fpn_feats[self.num_blocks - 1]",
                            "Subscript"
                        ],
                        [
                            "self.pan_routes[pan_route_name](route)",
                            "Call"
                        ],
                        [
                            "self.fpn_routes[self.fpn_routes_names[i]](route)",
                            "Call"
                        ],
                        [
                            "F.interpolate(route, scale_factor=2.0)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self.data_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_852": {
                "variable": {
                    "value": "route",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "route",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_module(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv_module(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv_module(inputs)",
                            "Call"
                        ],
                        [
                            "ConvBNLayer(ch_in=512 // 2 ** i, ch_out=256 // 2 ** i, filter_size=1, stride=1, padding=0, norm_type=norm_type, freeze_norm=freeze_norm, data_format=data_format, name=name)",
                            "Call"
                        ],
                        [
                            "self.routes[self.routes_names[i]](route)",
                            "Call"
                        ],
                        [
                            "F.interpolate(route, scale_factor=2.0)",
                            "Call"
                        ],
                        [
                            "ConvBNLayer(ch_in=channel, ch_out=256 // 2 ** i, filter_size=1, stride=1, padding=0, norm_type=norm_type, freeze_norm=freeze_norm, data_format=data_format, name=name)",
                            "Call"
                        ],
                        [
                            "self.routes[self.routes_names[i]](route)",
                            "Call"
                        ],
                        [
                            "F.interpolate(route, scale_factor=2.0, data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "ConvBNLayer(ch_in=ch_out, ch_out=ch_out, filter_size=1, stride=1, padding=0, norm_type=norm_type, data_format=data_format, name=name)",
                            "Call"
                        ],
                        [
                            "self.routes[self.routes_names[i]](route)",
                            "Call"
                        ],
                        [
                            "F.interpolate(route, scale_factor=2.0)",
                            "Call"
                        ],
                        [
                            "fpn_feats[self.num_blocks - 1]",
                            "Subscript"
                        ],
                        [
                            "self.pan_routes[pan_route_name](route)",
                            "Call"
                        ],
                        [
                            "self.fpn_routes[self.fpn_routes_names[i]](route)",
                            "Call"
                        ],
                        [
                            "F.interpolate(route, scale_factor=2.0)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "interpolate_1140": {
                "variable": {
                    "value": "route",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "route",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_module(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv_module(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv_module(inputs)",
                            "Call"
                        ],
                        [
                            "ConvBNLayer(ch_in=512 // 2 ** i, ch_out=256 // 2 ** i, filter_size=1, stride=1, padding=0, norm_type=norm_type, freeze_norm=freeze_norm, data_format=data_format, name=name)",
                            "Call"
                        ],
                        [
                            "self.routes[self.routes_names[i]](route)",
                            "Call"
                        ],
                        [
                            "F.interpolate(route, scale_factor=2.0)",
                            "Call"
                        ],
                        [
                            "ConvBNLayer(ch_in=channel, ch_out=256 // 2 ** i, filter_size=1, stride=1, padding=0, norm_type=norm_type, freeze_norm=freeze_norm, data_format=data_format, name=name)",
                            "Call"
                        ],
                        [
                            "self.routes[self.routes_names[i]](route)",
                            "Call"
                        ],
                        [
                            "F.interpolate(route, scale_factor=2.0, data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "ConvBNLayer(ch_in=ch_out, ch_out=ch_out, filter_size=1, stride=1, padding=0, norm_type=norm_type, data_format=data_format, name=name)",
                            "Call"
                        ],
                        [
                            "self.routes[self.routes_names[i]](route)",
                            "Call"
                        ],
                        [
                            "F.interpolate(route, scale_factor=2.0)",
                            "Call"
                        ],
                        [
                            "fpn_feats[self.num_blocks - 1]",
                            "Subscript"
                        ],
                        [
                            "self.pan_routes[pan_route_name](route)",
                            "Call"
                        ],
                        [
                            "self.fpn_routes[self.fpn_routes_names[i]](route)",
                            "Call"
                        ],
                        [
                            "F.interpolate(route, scale_factor=2.0)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_1150": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[route, block]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1152": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[route, block]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_152": {
                "kernel_size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_505": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[route, block]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_507": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[route, block]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_700": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[route, block]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_702": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[route, block]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_840": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[route, block]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_842": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[route, block]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1128": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[route, block]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1130": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[route, block]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "ptstructure/layout/ptppyolov2/ppyolov2_yolo_head.py": {
        "torch": {
            "clip_8": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clip(x, eps, 1.0 / eps)",
                            "Call"
                        ],
                        [
                            "torch.clip(1.0 / x - 1.0, eps, 1.0 / eps)",
                            "Call"
                        ],
                        [
                            "-torch.log(x)",
                            "UnaryOp"
                        ],
                        [
                            "x.reshape((b, na, no, h * w))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0 / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_9": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 / x - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0 / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_54": {
                "variable": {
                    "value": "self.yolo_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_10": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clip(x, eps, 1.0 / eps)",
                            "Call"
                        ],
                        [
                            "torch.clip(1.0 / x - 1.0, eps, 1.0 / eps)",
                            "Call"
                        ],
                        [
                            "-torch.log(x)",
                            "UnaryOp"
                        ],
                        [
                            "x.reshape((b, na, no, h * w))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self.anchors[i]) * (self.num_classes + 6)",
                            "BinOp"
                        ],
                        [
                            "len(self.anchors[i]) * (self.num_classes + 5)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "variable": {
                    "value": "ioup",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ioup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ioup.reshape((b, na, 1, h * w))",
                            "Call"
                        ],
                        [
                            "F.sigmoid(ioup)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_123": {
                "variable": {
                    "value": "obj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x[:, :, 4:5, :]",
                            "Subscript"
                        ],
                        [
                            "F.sigmoid(obj)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_129": {
                "variable": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loc_t, obj_t, cls_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ptstructure/layout/ptppyolov2/pt_utils.py": {
        "torch": {
            "min_17": {
                "variable": {
                    "value": "max_xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, 2:].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_19": {
                "variable": {
                    "value": "min_xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, :2].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_21": {
                "variable": {
                    "value": "inter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_112": {
                "variable": {
                    "value": "sort_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cate_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores[inds]",
                            "Subscript"
                        ],
                        [
                            "cate_scores[sort_inds]",
                            "Subscript"
                        ],
                        [
                            "_matrix_nms(bboxes, cate_labels, cate_scores, kernel=kernel, sigma=gaussian_sigma)",
                            "Call"
                        ],
                        [
                            "cate_scores[keep]",
                            "Subscript"
                        ],
                        [
                            "cate_scores[sort_inds]",
                            "Subscript"
                        ],
                        [
                            "cate_scores.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argsort_132": {
                "variable": {
                    "value": "sort_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cate_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores[inds]",
                            "Subscript"
                        ],
                        [
                            "cate_scores[sort_inds]",
                            "Subscript"
                        ],
                        [
                            "_matrix_nms(bboxes, cate_labels, cate_scores, kernel=kernel, sigma=gaussian_sigma)",
                            "Call"
                        ],
                        [
                            "cate_scores[keep]",
                            "Subscript"
                        ],
                        [
                            "cate_scores[sort_inds]",
                            "Subscript"
                        ],
                        [
                            "cate_scores.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_161": {
                "variable": {
                    "value": "rows",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "conv_raw_dxdy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_162": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "conv_raw_dxdy.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rows, cols]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_171": {
                "variable": {
                    "value": "_anchors",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "pred_xyxy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred_xy - pred_wh / 2, pred_xy + pred_wh / 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_177": {
                "variable": {
                    "value": "pred_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_raw_conf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_output[:, :, :, :, 4:5]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_179": {
                "variable": {
                    "value": "pred_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_raw_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_output[:, :, :, :, 5:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_190": {
                "variable": {
                    "value": "im_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(im_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_193": {
                "variable": {
                    "value": "_im_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_im_size_w, _im_size_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_78": {
                "variable": {
                    "value": "decay_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * sigma * decay_iou ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_79": {
                "variable": {
                    "value": "compensate_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * sigma * compensate_iou ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_204": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x0 < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x0 * 0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_x0y0[:, :, 0:1]",
                            "Subscript"
                        ],
                        [
                            "torch.where(x0 < 0, x0 * 0, x0)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_205": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "y0 < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "y0 * 0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_x0y0[:, :, 1:2]",
                            "Subscript"
                        ],
                        [
                            "torch.where(y0 < 0, y0 * 0, y0)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_206": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x1 > _im_size[:, :, 0:1]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "_im_size[:, :, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_x1y1[:, :, 0:1]",
                            "Subscript"
                        ],
                        [
                            "torch.where(x1 > _im_size[:, :, 0:1], _im_size[:, :, 0:1], x1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_207": {
                "variable": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "y1 > _im_size[:, :, 1:2]",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "_im_size[:, :, 1:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_x1y1[:, :, 1:2]",
                            "Subscript"
                        ],
                        [
                            "torch.where(y1 > _im_size[:, :, 1:2], _im_size[:, :, 1:2], y1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_208": {
                "variable": {
                    "value": "pred_xyxy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, y0, x1, y1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "pred_xyxy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred_x0y0, pred_x1y1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_174": {
                "input": {
                    "value": "conv_raw_dwdh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_output[:, :, :, :, 2:4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_105": {
                "*size": {
                    "value": "(1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "bboxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_126": {
                "*size": {
                    "value": "(1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "bboxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_168": {
                "input": {
                    "value": "conv_raw_dxdy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_output[:, :, :, :, 0:2]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "ptstructure/table/predict_structure.py": {
        "torch": {
            "from_numpy_91": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(image_file)",
                            "Call"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(img, axis=0)",
                            "Call"
                        ],
                        [
                            "img.copy()",
                            "Call"
                        ],
                        [
                            "np.load('inp.npy')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ptstructure/vqa/infer_ser_e2e.py": {
        "torch": {
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ptstructure/vqa/infer_ser_re_e2e.py": {
        "torch": {
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ptstructure/vqa/pytorchnlp/transformers/layoutlm/modeling.py": {
        "torch": {
            "Linear_44": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_45": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_73": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "pad_token_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_75": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_position_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_78": {
                "variable": {
                    "value": "self.x_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_2d_position_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_80": {
                "variable": {
                    "value": "self.y_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_2d_position_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_82": {
                "variable": {
                    "value": "self.h_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_2d_position_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_84": {
                "variable": {
                    "value": "self.w_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_2d_position_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_88": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "type_vocab_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_89": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "layer_norm_eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "MethodArgument"
                        ],
                        [
                            "1e-12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_90": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hidden_dropout_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TransformerEncoderLayer_290": {
                "variable": {
                    "value": "encoder_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "nhead": {
                    "value": "num_attention_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim_feedforward": {
                    "value": "intermediate_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3072",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "hidden_dropout_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "hidden_act",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'gelu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TransformerEncoder_298": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "encoder_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.TransformerEncoderLayer(hidden_size, num_attention_heads, intermediate_size, dropout=hidden_dropout_prob, activation=hidden_act, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_hidden_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_419": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout if dropout is not None else self.layoutlm.config['hidden_dropout_prob']",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_421": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.layoutlm.config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_104": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_105": {
                "variable": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones_like(input_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_110": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_363": {
                "input": {
                    "value": "(input_ids == self.pad_token_id).type(self.pooler.dense.weight.dtype) * -1000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_372": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tuple(list(input_shape) + [4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_93": {
                "start": {
                    "value": "max_position_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "ptstructure/vqa/pytorchnlp/transformers/layoutxlm/modeling.py": {
        "torch": {
            "min_69": {
                "variable": {
                    "value": "val_if_large",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_55": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_position",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_57": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-relative_position",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_72": {
                "condition": {
                    "value": "is_small",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "n < max_exact",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.abs(relative_position)",
                            "Call"
                        ],
                        [
                            "torch.max(-relative_position, torch.zeros_like(relative_position))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "val_if_large",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_80": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_100": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_102": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['max_position_embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_105": {
                "variable": {
                    "value": "self.x_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['max_2d_position_embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['coordinate_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_107": {
                "variable": {
                    "value": "self.y_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['max_2d_position_embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['coordinate_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_109": {
                "variable": {
                    "value": "self.h_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['max_2d_position_embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['coordinate_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_111": {
                "variable": {
                    "value": "self.w_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['max_2d_position_embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['coordinate_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_114": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config['type_vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LayerNorm_116": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "config['layer_norm_eps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "kwargs",
                            "Name"
                        ]
                    ]
                }
            },
            "Dropout_118": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['hidden_dropout_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "spatial_position_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_position_embeddings, upper_position_embeddings, right_position_embeddings, lower_position_embeddings, h_position_embeddings, w_position_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_268": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LayerNorm_269": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "config['layer_norm_eps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "kwargs",
                            "Name"
                        ]
                    ]
                }
            },
            "Dropout_271": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['hidden_dropout_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_315": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['attention_probs_dropout_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_361": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(q)",
                            "Call"
                        ],
                        [
                            "query_layer / math.sqrt(self.attention_head_size)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_372": {
                "variable": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(query_layer, key_layer.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "attention_scores + rel_2d_pos",
                            "BinOp"
                        ],
                        [
                            "attention_scores.float().masked_fill_(attention_mask.to(torch.bool), float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_376": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(attention_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_424": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LayoutXLMLayer(config) for _ in range(config['num_hidden_layers'])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "one_hot_457": {
                "variable": {
                    "value": "rel_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rel_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "relative_position_bucket(rel_pos_mat, num_buckets=self.rel_pos_bins, max_distance=self.max_rel_pos)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.one_hot(rel_pos, num_classes=self.rel_pos_onehot_size).type_as(hidden_states.dtype)",
                            "Call"
                        ],
                        [
                            "self.rel_pos_bias(rel_pos).permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self._cal_1d_pos_emb(hidden_states, position_ids) if self.has_relative_attention_bias else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.rel_pos_onehot_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_478": {
                "variable": {
                    "value": "rel_pos_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rel_pos_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "relative_position_bucket(rel_pos_x_2d_mat, num_buckets=self.rel_2d_pos_bins, max_distance=self.max_rel_2d_pos)",
                            "Call"
                        ],
                        [
                            "F.one_hot(rel_pos_x, num_classes=self.rel_2d_pos_onehot_size).type_as(hidden_states.dtype)",
                            "Call"
                        ],
                        [
                            "self.rel_pos_x_bias(rel_pos_x).permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.rel_2d_pos_onehot_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_481": {
                "variable": {
                    "value": "rel_pos_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rel_pos_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "relative_position_bucket(rel_pos_y_2d_mat, num_buckets=self.rel_2d_pos_bins, max_distance=self.max_rel_2d_pos)",
                            "Call"
                        ],
                        [
                            "F.one_hot(rel_pos_y, num_classes=self.rel_2d_pos_onehot_size).type_as(hidden_states.dtype)",
                            "Call"
                        ],
                        [
                            "self.rel_pos_y_bias(rel_pos_y).permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.rel_2d_pos_onehot_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_544": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['intermediate_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_561": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['intermediate_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LayerNorm_563": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "config['layer_norm_eps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "kwargs",
                            "Name"
                        ]
                    ]
                }
            },
            "Dropout_565": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['hidden_dropout_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_640": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "config['image_feature_pool_shape'][:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_713": {
                "variable": {
                    "value": "self.visual_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['image_feature_pool_shape'][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LayerNorm_719": {
                "variable": {
                    "value": "self.visual_LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "config['layer_norm_eps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "kwargs",
                            "Name"
                        ]
                    ]
                }
            },
            "Dropout_721": {
                "variable": {
                    "value": "self.visual_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config['hidden_dropout_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "div_775": {
                "variable": {
                    "value": "visual_bbox_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, 1000 * (self.config['image_feature_pool_shape'][1] + 1), 1000, dtype=bbox.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.config['image_feature_pool_shape'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rounding_mode": {
                    "value": "floor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "div_785": {
                "variable": {
                    "value": "visual_bbox_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, 1000 * (self.config['image_feature_pool_shape'][0] + 1), 1000, dtype=bbox.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.config['image_feature_pool_shape'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rounding_mode": {
                    "value": "floor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_793": {
                "variable": {
                    "value": "visual_bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[visual_bbox_x[:-1].expand(expand_shape), visual_bbox_y[:-1].expand(expand_shape[::-1]).transpose(1, 0), visual_bbox_x[1:].expand(expand_shape), visual_bbox_y[1:].expand(expand_shape[::-1]).transpose(1, 0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_793": {
                "variable": {
                    "value": "visual_bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[-1, bbox.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_802": {
                "variable": {
                    "value": "final_bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bbox, visual_bbox]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_807": {
                "variable": {
                    "value": "visual_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "visual_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_811": {
                "variable": {
                    "value": "final_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, visual_attention_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_822": {
                "variable": {
                    "value": "visual_position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "visual_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_824": {
                "variable": {
                    "value": "final_position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[position_ids, visual_position_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_840": {
                "variable": {
                    "value": "final_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[text_layout_emb, visual_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_880": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout if dropout is not None else self.layoutxlm.config['hidden_dropout_prob']",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_882": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.layoutxlm.config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bilinear_943": {
                "variable": {
                    "value": "self.bilinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_945": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * in_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_955": {
                "variable": {
                    "value": "self.entity_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_956": {
                "variable": {
                    "value": "projection",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size * 2, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_1074": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout if dropout is not None else self.layoutxlm.config['hidden_dropout_prob']",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "full_like_70": {
                "input": {
                    "value": "val_if_large",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "num_buckets - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_161": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_162": {
                "variable": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones_like(input_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_167": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_300": {
                "variable": {
                    "value": "self.qkv_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * self.all_head_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_308": {
                "variable": {
                    "value": "self.q_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, self.all_head_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_309": {
                "variable": {
                    "value": "self.v_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, self.all_head_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_311": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_312": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_313": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_327": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "qkv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_linear(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_433": {
                "variable": {
                    "value": "self.rel_pos_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rel_pos_onehot_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['num_attention_heads']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_442": {
                "variable": {
                    "value": "self.rel_pos_x_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rel_2d_pos_onehot_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['num_attention_heads']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_446": {
                "variable": {
                    "value": "self.rel_pos_y_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rel_2d_pos_onehot_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['num_attention_heads']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GELU_547": {
                "variable": {
                    "value": "self.intermediate_act_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_718": {
                "variable": {
                    "value": "self.visual_segment_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "nn.Embedding(1, config['hidden_size']).weight[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_805": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_815": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.shape",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_828": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape + [4]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_917": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_1024": {
                "variable": {
                    "value": "head_entities",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "relations[b]['head']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_tensor_1025": {
                "variable": {
                    "value": "tail_entities",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "relations[b]['tail']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_tensor_1026": {
                "variable": {
                    "value": "relation_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "relations[b]['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_1028": {
                "variable": {
                    "value": "entities_start_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "entities[b]['start']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_tensor_1029": {
                "variable": {
                    "value": "entities_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "entities[b]['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_1041": {
                "variable": {
                    "value": "head_repr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tmp_hidden_states, head_label_repr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1047": {
                "variable": {
                    "value": "tail_repr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tmp_hidden_states, tail_label_repr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "input": {
                    "value": "relative_position",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_122": {
                "start": {
                    "value": "config['max_position_embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_633": {
                "input": {
                    "value": "[num_channels, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_636": {
                "input": {
                    "value": "[num_channels, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_775": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1000 * (self.config['image_feature_pool_shape'][1] + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bbox.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_785": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1000 * (self.config['image_feature_pool_shape'][0] + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bbox.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_957": {
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_958": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_959": {
                "p": {
                    "value": "hidden_dropout_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_960": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_961": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_962": {
                "p": {
                    "value": "hidden_dropout_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_1040": {
                "variable": {
                    "value": "tmp_hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1046": {
                "variable": {
                    "value": "tmp_hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_308": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_309": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_650": {
                "data": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_949": {
                "tensors": {
                    "value": "(x_1, x_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_64": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_718": {
                "num_embeddings": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ptstructure/vqa/pytorchnlp/transformers/layoutxlm/visual_backbone.py": {
        "torch": {
            "relu_217": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_220": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_230": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_281": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "super(Conv2d, self).forward(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "stage(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_282": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "super(Conv2d, self).forward(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "stage(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_788": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "config['image_feature_pool_shape'][:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_317": {
                "variable": {
                    "value": "stage",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_331": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_332": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "curr_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_366": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "super(Conv2d, self).forward(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "stage(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_510": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "super(Conv2d, self).forward(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "stage(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_628": {
                "variable": {
                    "value": "top_down_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lateral_convs[0](bottom_up_features[self.in_features[-1]])",
                            "Call"
                        ],
                        [
                            "lateral_features + top_down_features",
                            "BinOp"
                        ],
                        [
                            "prev_features / 2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_779": {
                "data": {
                    "value": "self.cfg.MODEL.PIXEL_MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_779": {
                "input": {
                    "value": "[num_channels, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_784": {
                "data": {
                    "value": "self.cfg.MODEL.PIXEL_STD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_784": {
                "input": {
                    "value": "[num_channels, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_800": {
                "data": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ptstructure/vqa/pytorchnlp/transformers/model_utils.py": {
        "torch": {
            "save_437": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, list(self.resource_files_names.values())[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_455": {
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ptstructure/vqa/pytorchnlp/transformers/utils.py": {
        "torch": {}
    },
    "ptstructure/vqa/vqa_utils.py": {
        "torch": {
            "as_tensor_270": {
                "variable": {
                    "value": "encoded_inputs[image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.resize(ori_img, img_size).transpose([2, 0, 1]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_270": {
                "variable": {
                    "value": "encoded_inputs[image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_188": {
                "variable": {
                    "value": "encoded_inputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "encoded_inputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/base_ocr_v20.py": {
        "torch": {
            "load_62": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_77": {
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_83": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "_use_new_zipfile_serialization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_85": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/architectures/base_model.py": {
        "torch": {}
    },
    "pytorchocr/modeling/backbones/det_mobilenet_v3.py": {
        "torch": {
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_55": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_211": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "*args": {
                    "value": "*block_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "*args": {
                    "value": "*block_list",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/backbones/det_resnet_vd.py": {
        "torch": {
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "groups * 3 * kernel_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_58": {
                "variable": {
                    "value": "(offset, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "offset_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.offset_channel, self.mask_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_62": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "AvgPool2d_82": {
                "variable": {
                    "value": "self._pool2d_avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self._batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "add_180": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "short",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv2(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_181": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_dcn(x, offset, mask=mask)",
                            "Call"
                        ],
                        [
                            "self._conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(y)",
                            "Call"
                        ],
                        [
                            "self._act(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(short, conv2)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "short + conv1",
                            "BinOp"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_1(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_3(y)",
                            "Call"
                        ],
                        [
                            "self.pool2d_max(y)",
                            "Call"
                        ],
                        [
                            "block(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_229": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_dcn(x, offset, mask=mask)",
                            "Call"
                        ],
                        [
                            "self._conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(y)",
                            "Call"
                        ],
                        [
                            "self._act(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(short, conv2)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "short + conv1",
                            "BinOp"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_1(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_3(y)",
                            "Call"
                        ],
                        [
                            "self.pool2d_max(y)",
                            "Call"
                        ],
                        [
                            "block(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2d_290": {
                "variable": {
                    "value": "self.pool2d_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_292": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self._conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_297": {
                "variable": {
                    "value": "block_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_328": {
                "variable": {
                    "value": "block_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/backbones/det_resnet_vd_sast.py": {
        "torch": {
            "AvgPool2d_32": {
                "variable": {
                    "value": "self._pool2d_avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self._conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "variable": {
                    "value": "self._batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_113": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "short",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv2(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_114": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(y)",
                            "Call"
                        ],
                        [
                            "self._act(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(short, conv2)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(short, conv1)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_1(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_3(y)",
                            "Call"
                        ],
                        [
                            "self.pool2d_max(y)",
                            "Call"
                        ],
                        [
                            "block(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_161": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "short",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(y)",
                            "Call"
                        ],
                        [
                            "self.conv1(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_162": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(y)",
                            "Call"
                        ],
                        [
                            "self._act(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(short, conv2)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(short, conv1)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_1(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_3(y)",
                            "Call"
                        ],
                        [
                            "self.pool2d_max(y)",
                            "Call"
                        ],
                        [
                            "block(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2d_216": {
                "variable": {
                    "value": "self.pool2d_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_218": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_223": {
                "variable": {
                    "value": "block_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_250": {
                "variable": {
                    "value": "block_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/backbones/e2e_resnet_vd_pg.py": {
        "torch": {
            "AvgPool2d_28": {
                "variable": {
                    "value": "self._pool2d_avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self._conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "variable": {
                    "value": "self._batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_105": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "short",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv2(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_106": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(y)",
                            "Call"
                        ],
                        [
                            "self._act(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(short, conv2)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(short, conv1)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_1(inputs)",
                            "Call"
                        ],
                        [
                            "self.pool2d_max(y)",
                            "Call"
                        ],
                        [
                            "block(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_153": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "short",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(y)",
                            "Call"
                        ],
                        [
                            "self.conv1(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_154": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(y)",
                            "Call"
                        ],
                        [
                            "self._act(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(short, conv2)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(short, conv1)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_1(inputs)",
                            "Call"
                        ],
                        [
                            "self.pool2d_max(y)",
                            "Call"
                        ],
                        [
                            "block(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2d_190": {
                "variable": {
                    "value": "self.pool2d_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_192": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "block_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_221": {
                "variable": {
                    "value": "block_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/backbones/rec_mobilenet_v3.py": {
        "torch": {
            "Sequential_104": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*block_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_117": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/backbones/rec_mv1_enhance.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "self._conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self._batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "self.block_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.block_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_209": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_217": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_228": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.avg_pool(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv1(outputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(outputs)",
                            "Call"
                        ],
                        [
                            "hardsigmoid(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_231": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.avg_pool(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv1(outputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(outputs)",
                            "Call"
                        ],
                        [
                            "hardsigmoid(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "AvgPool2d_192": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_194": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu6_204": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/backbones/rec_nrtr_mtb.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_34": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.block(images)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, (x_shape[0], x_shape[1], x_shape[2] * x_shape[3]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x_shape[0], x_shape[1], x_shape[2] * x_shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_channels if i == 0 else 32 * 2 ** (i - 1)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32 * 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "32 * 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/backbones/rec_resnet_31.py": {
        "torch": {
            "Conv2d_24": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "variable": {
                    "value": "self.relu1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "variable": {
                    "value": "self.relu1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_111": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_120": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_129": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "variable": {
                    "value": "self.relu4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_145": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "variable": {
                    "value": "self.relu5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, channels * self.expansion, 1, stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_140": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, output_channels, kernel_size=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "channels * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_162": {
                "num_features": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/backbones/rec_resnet_fpn.py": {
        "torch": {
            "ModuleList_49": {
                "variable": {
                    "value": "self.block_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "self.base_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "bb_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_ch_list[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[in_ch // 4, in_ch // 2, in_ch]",
                            "List"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_ch_list[i + 1] + out_ch_list[i]",
                            "BinOp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2 if stride == (1, 1) else kernel_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2 if stride == (1, 1) else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(2, 1)",
                            "Tuple"
                        ],
                        [
                            "(1, 1)",
                            "Tuple"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_175": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_246": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(y)",
                            "Call"
                        ],
                        [
                            "self.conv2(y)",
                            "Call"
                        ],
                        [
                            "y + self.short(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(y)",
                            "Call"
                        ],
                        [
                            "y + self.short(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "bb_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_ch_list[i + 1] + out_ch_list[i]",
                            "BinOp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch_list[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[in_ch // 4, in_ch // 2, in_ch]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "bb_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_ch_list[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[in_ch // 4, in_ch // 2, in_ch]",
                            "List"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch_list[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[in_ch // 4, in_ch // 2, in_ch]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "bb_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(out_ch_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_278": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(y)",
                            "Call"
                        ],
                        [
                            "self.conv2(y)",
                            "Call"
                        ],
                        [
                            "y + self.short(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(y)",
                            "Call"
                        ],
                        [
                            "y + self.short(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_145": {
                "variable": {
                    "value": "base",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[base, F[-j - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "num_features": {
                    "value": "out_ch_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/backbones/rec_resnet_vd.py": {
        "torch": {
            "AvgPool2d_21": {
                "variable": {
                    "value": "self._pool2d_avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(2, 1)",
                            "Tuple"
                        ],
                        [
                            "(1, 1)",
                            "Tuple"
                        ],
                        [
                            "(2, 1)",
                            "Tuple"
                        ],
                        [
                            "(1, 1)",
                            "Tuple"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(2, 1)",
                            "Tuple"
                        ],
                        [
                            "(1, 1)",
                            "Tuple"
                        ],
                        [
                            "(2, 1)",
                            "Tuple"
                        ],
                        [
                            "(1, 1)",
                            "Tuple"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self._conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1 if is_vd_mode else stride",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self._batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_100": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(y)",
                            "Call"
                        ],
                        [
                            "self._act(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "short + conv2",
                            "BinOp"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "short + conv1",
                            "BinOp"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_1(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_3(y)",
                            "Call"
                        ],
                        [
                            "self.pool2d_max(y)",
                            "Call"
                        ],
                        [
                            "block(y)",
                            "Call"
                        ],
                        [
                            "self.out_pool(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_148": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(y)",
                            "Call"
                        ],
                        [
                            "self._act(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "short + conv2",
                            "BinOp"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "short + conv1",
                            "BinOp"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_1(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_3(y)",
                            "Call"
                        ],
                        [
                            "self.pool2d_max(y)",
                            "Call"
                        ],
                        [
                            "block(y)",
                            "Call"
                        ],
                        [
                            "self.out_pool(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2d_197": {
                "variable": {
                    "value": "self.pool2d_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_200": {
                "variable": {
                    "value": "self.block_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_249": {
                "variable": {
                    "value": "self.out_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/backbones/rec_svtrnet.py": {
        "torch": {
            "as_tensor_13": {
                "variable": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1 - drop_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_16": {
                "variable": {
                    "value": "random_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "random_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keep_prob + torch.rand(shape, dtype=x.dtype)",
                            "BinOp"
                        ],
                        [
                            "torch.floor(random_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "192",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias_attr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "192",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_83": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.local_mixer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "local_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3",
                            "MethodArgument"
                        ],
                        [
                            "[7",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[local_k[0] // 2, local_k[1] // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_137": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_139": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_174": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q.matmul(k.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "attn + self.mask",
                            "BinOp"
                        ],
                        [
                            "nn.functional.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_drop(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_407": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches, embed_dim[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_408": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_412": {
                "variable": {
                    "value": "self.blocks1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block_unit(dim=embed_dim[0], num_heads=num_heads[0], mixer=mixer[0:depth[0]][i], HW=self.HW, local_mixer=local_mixer[0], mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, act_layer=act, attn_drop=attn_drop_rate, drop_path=dpr[0:depth[0]][i], norm_layer=norm_layer, epsilon=epsilon, prenorm=prenorm) for i in range(depth[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_441": {
                "variable": {
                    "value": "self.blocks2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block_unit(dim=embed_dim[1], num_heads=num_heads[1], mixer=mixer[depth[0]:depth[0] + depth[1]][i], HW=HW, local_mixer=local_mixer[1], mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, act_layer=act, attn_drop=attn_drop_rate, drop_path=dpr[depth[0]:depth[0] + depth[1]][i], norm_layer=norm_layer, epsilon=epsilon, prenorm=prenorm) for i in range(depth[1])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_469": {
                "variable": {
                    "value": "self.blocks3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block_unit(dim=embed_dim[2], num_heads=num_heads[2], mixer=mixer[depth[0] + depth[1]:][i], HW=HW, local_mixer=local_mixer[2], mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, act_layer=act, attn_drop=attn_drop_rate, drop_path=dpr[depth[0] + depth[1]:][i], norm_layer=norm_layer, epsilon=epsilon, prenorm=prenorm) for i in range(depth[2])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "rand_15": {
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x.shape[0],) + (1,) * (x.ndim - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_149": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "H * W",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "H + hk - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_155": {
                "variable": {
                    "value": "mask_inf",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[H * W, H * W]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float('-Inf')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_156": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask_paddle < 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_paddle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask[:, hk // 2:H + hk // 2, wk // 2:W + wk // 2].flatten(1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_inf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.full([H * W, H * W], fill_value=float('-Inf'), dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_262": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBNLayer(in_channels=in_channels, out_channels=embed_dim // 2, kernel_size=3, stride=2, padding=1, act='gelu', bias_attr=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBNLayer(in_channels=in_channels, out_channels=embed_dim // 4, kernel_size=3, stride=2, padding=1, act='gelu', bias_attr=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_327": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MaxPool2d_329": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_331": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "192",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_333": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "192",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_489": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "[1, out_char_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_490": {
                "variable": {
                    "value": "self.last_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embed_dim[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "[64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_499": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "last_drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_504": {
                "variable": {
                    "value": "self.len_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_506": {
                "variable": {
                    "value": "self.dropout_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "last_drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_407": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img_size[1] // 2 ** sub_num * (img_size[0] // 2 ** sub_num)",
                            "BinOp"
                        ],
                        [
                            "self.patch_embed.num_patches",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/backbones/table_mobilenet_v3.py": {
        "torch": {
            "clamp_21": {
                "input": {
                    "value": "slope * x + offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_98": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_170": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_248": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_249": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_256": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_267": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.avg_pool(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv1(outputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(outputs)",
                            "Call"
                        ],
                        [
                            "hard_sigmoid(outputs, slope=0.2, offset=0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_241": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "stage(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "hard_swish(x)",
                            "Call"
                        ],
                        [
                            "self.expand_conv(inputs)",
                            "Call"
                        ],
                        [
                            "self.bottleneck_conv(x)",
                            "Call"
                        ],
                        [
                            "self.mid_se(x)",
                            "Call"
                        ],
                        [
                            "self.linear_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.add(inputs, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu6_24": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_133": {
                "*args": {
                    "value": "*block_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_179": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "stage(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "hard_swish(x)",
                            "Call"
                        ],
                        [
                            "self.expand_conv(inputs)",
                            "Call"
                        ],
                        [
                            "self.bottleneck_conv(x)",
                            "Call"
                        ],
                        [
                            "self.mid_se(x)",
                            "Call"
                        ],
                        [
                            "self.linear_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.add(inputs, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_108": {
                "*args": {
                    "value": "*block_list",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/backbones/table_resnet_vd.py": {
        "torch": {
            "AvgPool2d_27": {
                "variable": {
                    "value": "self._pool2d_avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self._conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self._batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_109": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "short",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv2(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_110": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(y)",
                            "Call"
                        ],
                        [
                            "self._act(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(short, conv2)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(short, conv1)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_1(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_3(y)",
                            "Call"
                        ],
                        [
                            "self.pool2d_max(y)",
                            "Call"
                        ],
                        [
                            "block(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_157": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "short",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.short(inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(y)",
                            "Call"
                        ],
                        [
                            "self.conv1(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_158": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._batch_norm(y)",
                            "Call"
                        ],
                        [
                            "self._act(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(short, conv2)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv0(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(short, conv1)",
                            "Call"
                        ],
                        [
                            "F.relu(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_1(inputs)",
                            "Call"
                        ],
                        [
                            "self.conv1_2(y)",
                            "Call"
                        ],
                        [
                            "self.conv1_3(y)",
                            "Call"
                        ],
                        [
                            "self.pool2d_max(y)",
                            "Call"
                        ],
                        [
                            "block(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2d_207": {
                "variable": {
                    "value": "self.pool2d_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_209": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_213": {
                "variable": {
                    "value": "block_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "variable": {
                    "value": "block_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/common.py": {
        "torch": {
            "gelu_33": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu6_25": {
                "input": {
                    "value": "1.2 * x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU6_56": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu6_13": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_43": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_46": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_64": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pytorchocr/modeling/heads/cls_head.py": {
        "torch": {
            "AdaptiveAvgPool2d_16": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[x.shape[0], x.shape[1]])",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.shape[0], x.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[x.shape[0], x.shape[1]])",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/heads/det_db_head.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.conv_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.conv_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_30": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv_bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_80": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shrink_maps, threshold_maps, binary_maps]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reciprocal_71": {
                "input": {
                    "value": "1 + torch.exp(-self.k * (x - y))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_71": {
                "input": {
                    "value": "-self.k * (x - y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/heads/det_east_head.py": {
        "torch": {
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_107": {
                "variable": {
                    "value": "f_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score_conv(f_det)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(f_score)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_109": {
                "input": {
                    "value": "f_geo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.geo_conv(f_det)",
                            "Call"
                        ],
                        [
                            "(torch.sigmoid(f_geo) - 0.5) * 2 * 800",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pytorchocr/modeling/heads/det_fce_head.py": {
        "torch": {
            "Conv2d_47": {
                "variable": {
                    "value": "self.out_conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.out_conv_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_70": {
                "variable": {
                    "value": "tr_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_res[i][:, 0:2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "tcl_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_res[i][:, 2:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "outs[level_{}.format(i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tr_pred, tcl_pred, reg_res[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/heads/det_pse_head.py": {
        "torch": {
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/heads/det_sast_head.py": {
        "torch": {
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[64, 64, 128]",
                            "List"
                        ],
                        [
                            "[64, 64, 128]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[64, 64, 128]",
                            "List"
                        ],
                        [
                            "[64, 64, 128]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.score_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBNLayer(in_channels, out_channels[0], 1, 1, act='relu', name='f_score1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.border_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBNLayer(in_channels, out_channels[0], 1, 1, act='relu', name='f_border1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_72": {
                "variable": {
                    "value": "f_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(f_score)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.tvo_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBNLayer(in_channels, out_channels[0], 1, 1, act='relu', name='f_tvo1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.tco_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBNLayer(in_channels, out_channels[0], 1, 1, act='relu', name='f_tco1')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/heads/e2e_pg_head.py": {
        "torch": {
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "37",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_209": {
                "variable": {
                    "value": "f_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_f_score1(x)",
                            "Call"
                        ],
                        [
                            "self.conv_f_score2(f_score)",
                            "Call"
                        ],
                        [
                            "self.conv_f_score3(f_score)",
                            "Call"
                        ],
                        [
                            "self.conv1(f_score)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(f_score)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorchocr/modeling/heads/multiheadAttention.py": {
        "torch": {
            "Linear_37": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._in_proj_q(query)",
                            "Call"
                        ],
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(q, (q_shape[0], q_shape[1], self.num_heads, self.head_dim))",
                            "Call"
                        ],
                        [
                            "q.permute(1, 2, 0, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(q_shape[0], q_shape[1], self.num_heads, self.head_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._in_proj_k(key)",
                            "Call"
                        ],
                        [
                            "torch.reshape(k, (src_shape[0], q_shape[1], self.num_heads, self.head_dim))",
                            "Call"
                        ],
                        [
                            "k.permute(1, 2, 0, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(src_shape[0], q_shape[1], self.num_heads, self.head_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._in_proj_v(value)",
                            "Call"
                        ],
                        [
                            "torch.reshape(v, (src_shape[0], q_shape[1], self.num_heads, self.head_dim))",
                            "Call"
                        ],
                        [
                            "v.permute(1, 2, 0, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(src_shape[0], q_shape[1], self.num_heads, self.head_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "attn_output_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._in_proj_q(query)",
                            "Call"
                        ],
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(q, (q_shape[0], q_shape[1], self.num_heads, self.head_dim))",
                            "Call"
                        ],
                        [
                            "q.permute(1, 2, 0, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "attn_output_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output_weights.type(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32 if attn_output_weights.dtype == torch.float16 else attn_output_weights.dtype",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "dropout_117": {
                "variable": {
                    "value": "attn_output_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "attn_output_weights + y",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(attn_output_weights, [q_shape[1], self.num_heads, q_shape[0], src_shape[0]])",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_output_weights.type(torch.float32), dim=-1, dtype=torch.float32 if attn_output_weights.dtype == torch.float16 else attn_output_weights.dtype)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_output_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_120": {
                "variable": {
                    "value": "attn_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "attn_output_weights + y",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(attn_output_weights, [q_shape[1], self.num_heads, q_shape[0], src_shape[0]])",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_output_weights.type(torch.float32), dim=-1, dtype=torch.float32 if attn_output_weights.dtype == torch.float16 else attn_output_weights.dtype)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_output_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._in_proj_v(value)",
                            "Call"
                        ],
                        [
                            "torch.reshape(v, (src_shape[0], q_shape[1], self.num_heads, self.head_dim))",
                            "Call"
                        ],
                        [
                            "v.permute(1, 2, 0, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "attn_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output.permute(2, 0, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[q_shape[0], q_shape[1], self.embed_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(query, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_132": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(query)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(res, dim=2)",
                            "Call"
                        ],
                        [
                            "res.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.conv2(key)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(res, dim=2)",
                            "Call"
                        ],
                        [
                            "res.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.conv3(value)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(res, dim=2)",
                            "Call"
                        ],
                        [
                            "res.permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_138": {
                "variable": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(torch.unsqueeze(key_padding_mask, 1), 2)",
                            "Call"
                        ],
                        [
                            "key.type(torch.float32)",
                            "Call"
                        ],
                        [
                            "key.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(key, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_140": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(query)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(res, dim=2)",
                            "Call"
                        ],
                        [
                            "res.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.conv2(key)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(res, dim=2)",
                            "Call"
                        ],
                        [
                            "res.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.conv3(value)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(res, dim=2)",
                            "Call"
                        ],
                        [
                            "res.permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_146": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(value, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_148": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(query)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(res, dim=2)",
                            "Call"
                        ],
                        [
                            "res.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.conv2(key)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(res, dim=2)",
                            "Call"
                        ],
                        [
                            "res.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.conv3(value)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(res, dim=2)",
                            "Call"
                        ],
                        [
                            "res.permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_100": {
                "input": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(torch.unsqueeze(attn_mask, 0), 0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "variable": {
                    "value": "attn_output_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "attn_output_weights + y",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(attn_output_weights, [q_shape[1], self.num_heads, q_shape[0], src_shape[0]])",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_output_weights.type(torch.float32), dim=-1, dtype=torch.float32 if attn_output_weights.dtype == torch.float16 else attn_output_weights.dtype)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_output_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[q_shape[1], self.num_heads, q_shape[0], src_shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_106": {
                "input": {
                    "value": "key_padding_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_108": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "key.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float('-Inf')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_110": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "key == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(torch.unsqueeze(key_padding_mask, 1), 2)",
                            "Call"
                        ],
                        [
                            "key.type(torch.float32)",
                            "Call"
                        ],
                        [
                            "key.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(key, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.full(size=key.shape, fill_value=float('-Inf'), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.where(key == 0.0, key, y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorchocr/modeling/heads/rec_att_head.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_24": {
                "variable": {
                    "value": "input_ont_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_char.type(torch.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "onehot_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRUCell_76": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size + num_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "prev_hidden_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h2h(prev_hidden)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_86": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_H_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.i2h(batch_H)",
                            "Call"
                        ],
                        [
                            "self.i2h(batch_H)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "prev_hidden_proj",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_87": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(batch_H_proj, prev_hidden_proj)",
                            "Call"
                        ],
                        [
                            "torch.tanh(res)",
                            "Call"
                        ],
                        [
                            "torch.add(batch_H_proj, prev_hidden_proj)",
                            "Call"
                        ],
                        [
                            "torch.tanh(res)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_90": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score(res)",
                            "Call"
                        ],
                        [
                            "self.score(res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(alpha, batch_H)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "concat_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context, char_onehots.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_112": {
                "variable": {
                    "value": "input_ont_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_char.type(torch.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "onehot_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_178": {
                "variable": {
                    "value": "prev_hidden_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h2h(prev_hidden[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_179": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_H_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.i2h(batch_H)",
                            "Call"
                        ],
                        [
                            "self.i2h(batch_H)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "prev_hidden_proj",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_180": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(batch_H_proj, prev_hidden_proj)",
                            "Call"
                        ],
                        [
                            "torch.tanh(res)",
                            "Call"
                        ],
                        [
                            "torch.add(batch_H_proj, prev_hidden_proj)",
                            "Call"
                        ],
                        [
                            "torch.tanh(res)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_183": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score(res)",
                            "Call"
                        ],
                        [
                            "self.score(res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_185": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(alpha, batch_H)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "concat_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context, char_onehots.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_168": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size + num_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRUCell_171": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size + num_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.softmax(e, dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(e, dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch_H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "*size": {
                    "value": "(batch_size, self.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_185": {
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.softmax(e, dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(e, dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch_H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_58": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.generator(outputs)",
                            "Call"
                        ],
                        [
                            "self.generator(hidden[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[probs, torch.unsqueeze(probs_step, dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_148": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.generator(outputs)",
                            "Call"
                        ],
                        [
                            "self.generator(hidden[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[probs, torch.unsqueeze(probs_step, dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_40": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "input": {
                    "value": "hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_61": {
                "input": {
                    "value": "probs_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.generator(outputs)",
                            "Call"
                        ],
                        [
                            "self.generator(hidden[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_151": {
                "input": {
                    "value": "probs_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.generator(outputs)",
                            "Call"
                        ],
                        [
                            "self.generator(hidden[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/heads/rec_ctc_head.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6625",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6625",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_50": {
                "variable": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(predicts, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/heads/rec_nrtr_head.py": {
        "torch": {
            "Linear_81": {
                "variable": {
                    "value": "self.tgt_word_prj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "self.tgt_word_prj.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "w0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.normal(0.0, d_model ** (-0.5), (self.out_channels, d_model)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.normal(0.0, d_model ** (-0.5), (vocab, d_model)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_148": {
                "variable": {
                    "value": "dec_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(bs, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_149": {
                "variable": {
                    "value": "dec_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(bs, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_335": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[sz, sz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_336": {
                "variable": {
                    "value": "mask_inf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.full(size=[sz, sz], fill_value=float('-Inf'), dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_457": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_feedforward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_461": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_feedforward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LayerNorm_466": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_467": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_468": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "residual_dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_469": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "residual_dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_488": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.positional_encoding(src.permute(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "self.positional_encoding(src.permute(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "self.positional_encoding(images.permute(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "src + self.dropout1(src2)",
                            "BinOp"
                        ],
                        [
                            "self.norm1(src)",
                            "Call"
                        ],
                        [
                            "src.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(src, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(src, 2)",
                            "Call"
                        ],
                        [
                            "src.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "src + self.dropout2(src2)",
                            "BinOp"
                        ],
                        [
                            "self.norm2(src)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_490": {
                "variable": {
                    "value": "src2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attn(src, src, src, attn_mask=src_mask, key_padding_mask=src_key_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.conv1(src)))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(src2, 2)",
                            "Call"
                        ],
                        [
                            "src2.permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_492": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.positional_encoding(src.permute(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "self.positional_encoding(src.permute(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "self.positional_encoding(images.permute(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "src + self.dropout1(src2)",
                            "BinOp"
                        ],
                        [
                            "self.norm1(src)",
                            "Call"
                        ],
                        [
                            "src.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(src, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(src, 2)",
                            "Call"
                        ],
                        [
                            "src.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "src + self.dropout2(src2)",
                            "BinOp"
                        ],
                        [
                            "self.norm2(src)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_528": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_feedforward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_532": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_feedforward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LayerNorm_537": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_538": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_539": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_540": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "residual_dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_541": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "residual_dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_542": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "residual_dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_581": {
                "variable": {
                    "value": "tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tgt[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "self.embedding(tgt).permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.positional_encoding(tgt)",
                            "Call"
                        ],
                        [
                            "targets[0][:, :2 + max_len]",
                            "Subscript"
                        ],
                        [
                            "tgt + self.dropout1(tgt2)",
                            "BinOp"
                        ],
                        [
                            "self.norm1(tgt)",
                            "Call"
                        ],
                        [
                            "tgt + self.dropout2(tgt2)",
                            "BinOp"
                        ],
                        [
                            "self.norm2(tgt)",
                            "Call"
                        ],
                        [
                            "tgt.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(tgt, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(tgt, 2)",
                            "Call"
                        ],
                        [
                            "tgt.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "tgt + self.dropout3(tgt2)",
                            "BinOp"
                        ],
                        [
                            "self.norm3(tgt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_583": {
                "variable": {
                    "value": "tgt2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attn(tgt, tgt, tgt, attn_mask=tgt_mask, key_padding_mask=tgt_key_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.multihead_attn(tgt, memory, memory, attn_mask=memory_mask, key_padding_mask=memory_key_padding_mask)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.conv1(tgt)))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(tgt2, 2)",
                            "Call"
                        ],
                        [
                            "tgt2.permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_585": {
                "variable": {
                    "value": "tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tgt[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "self.embedding(tgt).permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.positional_encoding(tgt)",
                            "Call"
                        ],
                        [
                            "targets[0][:, :2 + max_len]",
                            "Subscript"
                        ],
                        [
                            "tgt + self.dropout1(tgt2)",
                            "BinOp"
                        ],
                        [
                            "self.norm1(tgt)",
                            "Call"
                        ],
                        [
                            "tgt + self.dropout2(tgt2)",
                            "BinOp"
                        ],
                        [
                            "self.norm2(tgt)",
                            "Call"
                        ],
                        [
                            "tgt.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(tgt, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(tgt, 2)",
                            "Call"
                        ],
                        [
                            "tgt.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "tgt + self.dropout3(tgt2)",
                            "BinOp"
                        ],
                        [
                            "self.norm3(tgt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_616": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_618": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_len, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_619": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "targets[1].max()",
                            "Call"
                        ],
                        [
                            "5000",
                            "MethodArgument"
                        ],
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_619": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_620": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, dim, 2).type(torch.float32) * (-math.log(10000.0) / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_623": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_624": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_625": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros([max_len, dim])",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pe, 0)",
                            "Call"
                        ],
                        [
                            "pe.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.zeros([max_len, dim])",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pe, 0).permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_662": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_664": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_len, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_665": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "targets[1].max()",
                            "Call"
                        ],
                        [
                            "5000",
                            "MethodArgument"
                        ],
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_665": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_666": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, dim, 2).type(torch.float32) * (-math.log(10000.0) / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_669": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_670": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_671": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros([max_len, dim])",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pe, 0)",
                            "Call"
                        ],
                        [
                            "pe.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.zeros([max_len, dim])",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pe, 0).permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_671": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_674": {
                "variable": {
                    "value": "self.avg_pool_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_675": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_677": {
                "variable": {
                    "value": "self.avg_pool_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_678": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_695": {
                "variable": {
                    "value": "w_pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_pe",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pe[:x.shape[-1], :]",
                            "Subscript"
                        ],
                        [
                            "w_pe * w1",
                            "BinOp"
                        ],
                        [
                            "w_pe.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(w_pe, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_701": {
                "variable": {
                    "value": "h_pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_pe",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pe[:x.shape[-2], :]",
                            "Subscript"
                        ],
                        [
                            "h_pe * w2",
                            "BinOp"
                        ],
                        [
                            "h_pe.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(h_pe, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_704": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x + self.pe[:x.shape[0], :]",
                            "BinOp"
                        ],
                        [
                            "x + w_pe + h_pe",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(x, [x.shape[0], x.shape[1], x.shape[2] * x.shape[3]]).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.shape[0], x.shape[1], x.shape[2] * x.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "permute_704": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_714": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_717": {
                "variable": {
                    "value": "self.embedding.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "w0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.normal(0.0, d_model ** (-0.5), (self.out_channels, d_model)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.random.normal(0.0, d_model ** (-0.5), (vocab, d_model)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_736": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_147": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.positional_encoding(src.permute(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "self.positional_encoding(src.permute(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "self.positional_encoding(images.permute(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "src + self.dropout1(src2)",
                            "BinOp"
                        ],
                        [
                            "self.norm1(src)",
                            "Call"
                        ],
                        [
                            "src.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(src, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(src, 2)",
                            "Call"
                        ],
                        [
                            "src.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "src + self.dropout2(src2)",
                            "BinOp"
                        ],
                        [
                            "self.norm2(src)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_147": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_165": {
                "variable": {
                    "value": "word_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_word_prj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tgt_word_prj(dec_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "dec_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dec_seq, torch.reshape(preds_idx, (-1, 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "dec_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dec_prob, torch.reshape(preds_prob, (-1, 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "variable": {
                    "value": "active_inst_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "active_inst_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[inst_idx_to_position_map[k] for k in active_inst_idx_list]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(active_inst_idx, dtype=torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_801": {
                "variable": {
                    "value": "dec_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "hyps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[inst_dec_beams[inst_idx].get_hypothesis(i) for i in tail_idxs[:n_best]]",
                            "ListComp"
                        ],
                        [
                            "[self.get_hypothesis(k) for k in keys]",
                            "ListComp"
                        ],
                        [
                            "[[2] + h for h in hyps]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_167": {
                "input": {
                    "value": "preds_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_prob.argmax(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.full(preds_idx.shape, 3, dtype=torch.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_231": {
                "variable": {
                    "value": "dec_partial_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_partial_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[b.get_current_state() for b in inst_dec_beams if not b.done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.reshape([-1, len_dec_seq])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_250": {
                "variable": {
                    "value": "word_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tgt_word_prj(dec_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_251": {
                "variable": {
                    "value": "word_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(tgt_word_prj, dim=1)",
                            "Call"
                        ],
                        [
                            "predict_word(dec_seq, enc_output, n_active_inst, n_bm, None)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.tgt_word_prj(dec_output), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(word_prob, (n_active_inst, n_bm, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(n_active_inst, n_bm, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_326": {
                "data": {
                    "value": "np.array(result_hyp)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_328": {
                "data": {
                    "value": "hyp_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "full_337": {
                "size": {
                    "value": "[sz, sz]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float('-Inf')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_345": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_489": {
                "input": {
                    "value": "self.conv1(src)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_582": {
                "input": {
                    "value": "self.conv1(tgt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_741": {
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_785": {
                "data": {
                    "value": "[i for i in range(int(self.scores.shape[0]))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_169": {
                "size": {
                    "value": "preds_idx.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_172": {
                "input": {
                    "value": "word_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(tgt_word_prj, dim=1)",
                            "Call"
                        ],
                        [
                            "predict_word(dec_seq, enc_output, n_active_inst, n_bm, None)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.tgt_word_prj(dec_output), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(word_prob, (n_active_inst, n_bm, -1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_621": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_667": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "input": {
                    "value": "preds_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_prob.argmax(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_176": {
                "input": {
                    "value": "preds_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(word_prob, dim=1).values",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/heads/rec_sar_head.py": {
        "torch": {
            "Linear_72": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_rnn_out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_enc * (int(enc_bi_rnn) + 1)",
                            "BinOp"
                        ],
                        [
                            "d_enc * (int(enc_bi_rnn) + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "encoder_rnn_out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_enc * (int(enc_bi_rnn) + 1)",
                            "BinOp"
                        ],
                        [
                            "d_enc * (int(enc_bi_rnn) + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_pool2d_83": {
                "variable": {
                    "value": "feat_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(h_feat, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.conv1x1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "decoder_rnn_out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder_rnn_out_size * (int(dec_bi_rnn) + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_179": {
                "variable": {
                    "value": "self.conv3x3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.conv1x1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_202": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "encoder_rnn_out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_enc * (int(enc_bi_rnn) + 1)",
                            "BinOp"
                        ],
                        [
                            "d_enc * (int(enc_bi_rnn) + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_208": {
                "variable": {
                    "value": "self.pred_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pred_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_214": {
                "variable": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_in_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_rnn_out_size + d_model + encoder_rnn_out_size",
                            "BinOp"
                        ],
                        [
                            "d_model",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "pred_num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.num_classes - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_237": {
                "variable": {
                    "value": "attn_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.add(attn_key, attn_query)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_258": {
                "variable": {
                    "value": "attn_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(torch.add(attn_key, attn_query))",
                            "Call"
                        ],
                        [
                            "attn_weight.permute(0, 1, 3, 4, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv1x1_2(attn_weight)",
                            "Call"
                        ],
                        [
                            "attn_weight.view(bsz, T, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_weight.view(bsz, T, h, w, c).permute(0, 1, 4, 2, 3).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_264": {
                "variable": {
                    "value": "attn_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(feat.unsqueeze(1), attn_weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "in_dec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_enc, lab_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_313": {
                "variable": {
                    "value": "start_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(bsz,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.start_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "feat.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_enc, start_token)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_339": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_66": {
                "variable": {
                    "value": "self.rnn_encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_68": {
                "variable": {
                    "value": "self.rnn_encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_97": {
                "variable": {
                    "value": "valid_hf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_hf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "holistic_feat[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(valid_hf, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_197": {
                "variable": {
                    "value": "self.rnn_decoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_199": {
                "variable": {
                    "value": "self.rnn_decoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_332": {
                "variable": {
                    "value": "char_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_output[:, i, :]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(char_output, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_334": {
                "variable": {
                    "value": "(_, max_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "char_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decoder_output[:, i, :]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(char_output, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "add_237": {
                "input": {
                    "value": "attn_key",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv3x3_1(feat)",
                            "Call"
                        ],
                        [
                            "attn_key.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attn_query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1x1_1(y)",
                            "Call"
                        ],
                        [
                            "attn_query.view(bsz, seq_len, attn_size, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_250": {
                "variable": {
                    "value": "valid_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mul_265": {
                "input": {
                    "value": "feat.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "attn_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(torch.add(attn_key, attn_query))",
                            "Call"
                        ],
                        [
                            "attn_weight.permute(0, 1, 3, 4, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv1x1_2(attn_weight)",
                            "Call"
                        ],
                        [
                            "attn_weight.view(bsz, T, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weight, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn_weight.view(bsz, T, h, w, c).permute(0, 1, 4, 2, 3).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_272": {
                "tensors": {
                    "value": "(y, attn_feat, holistic_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_93": {
                "input": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "holistic_feat.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_250": {
                "input": {
                    "value": "w * valid_ratios[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_93": {
                "input": {
                    "value": "T * valid_ratios[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/heads/rec_srn_head.py": {
        "torch": {
            "Linear_59": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_62": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.max_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "conv_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, c, h * w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "word_features_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wrap_encoder_for_feature(enc_inputs)",
                            "Call"
                        ],
                        [
                            "self.fc0(word_features)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, t, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "word_pos_feature_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_pos_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb(gsrm_word_pos)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_length, 1, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_88": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_pos_feature_ + word_features_",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(y)",
                            "Call"
                        ],
                        [
                            "torch.reshape(attention_weight, shape=[-1, self.max_length, t])",
                            "Call"
                        ],
                        [
                            "F.softmax(attention_weight, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.max_length, t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_92": {
                "variable": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(y)",
                            "Call"
                        ],
                        [
                            "torch.reshape(attention_weight, shape=[-1, self.max_length, t])",
                            "Call"
                        ],
                        [
                            "F.softmax(attention_weight, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "pvam_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(y)",
                            "Call"
                        ],
                        [
                            "torch.reshape(attention_weight, shape=[-1, self.max_length, t])",
                            "Call"
                        ],
                        [
                            "F.softmax(attention_weight, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "word_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wrap_encoder_for_feature(enc_inputs)",
                            "Call"
                        ],
                        [
                            "self.fc0(word_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.char_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "pvam_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_153": {
                "variable": {
                    "value": "word_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(word_out, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "word_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argmax(F.softmax(word_out, dim=-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(word_ids, shape=[-1, t, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, t, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_162": {
                "variable": {
                    "value": "word1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_ids.type(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, 0, 1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0 * pad_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_173": {
                "variable": {
                    "value": "gsrm_feature2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gsrm_feature2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.wrap_encoder1(enc_inputs_2)",
                            "Call"
                        ],
                        [
                            "F.pad(gsrm_feature2, [0, 0, 0, 1, 0, 0], value=0.0)",
                            "Call"
                        ],
                        [
                            "gsrm_feature2[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_182": {
                "variable": {
                    "value": "gsrm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gsrm_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mul(gsrm_features)",
                            "Call"
                        ],
                        [
                            "torch.reshape(gsrm_out, [-1, c])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "pvam_ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "pvam_ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.char_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "combine_feature_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pvam_feature, gsrm_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "img_comb_feature_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combine_feature_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([pvam_feature, gsrm_feature], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, c1 + c2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_203": {
                "variable": {
                    "value": "img_comb_feature_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_comb_feature_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc0(img_comb_feature_)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(img_comb_feature_map)",
                            "Call"
                        ],
                        [
                            "torch.reshape(img_comb_feature_map, shape=[-1, t, c1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_204": {
                "variable": {
                    "value": "img_comb_feature_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_comb_feature_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc0(img_comb_feature_)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(img_comb_feature_map)",
                            "Call"
                        ],
                        [
                            "torch.reshape(img_comb_feature_map, shape=[-1, t, c1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, t, c1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "img_comb_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combine_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img_comb_feature_map * pvam_feature + (1.0 - img_comb_feature_map) * gsrm_feature",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, c1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "topk_261": {
                "variable": {
                    "value": "(_, decoded_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "final_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.vsfd(pvam_feature, gsrm_feature)",
                            "Call"
                        ],
                        [
                            "F.softmax(final_out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_259": {
                "variable": {
                    "value": "final_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.vsfd(pvam_feature, gsrm_feature)",
                            "Call"
                        ],
                        [
                            "F.softmax(final_out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_143": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.wrap_encoder0.prepare_decoder.emb0.weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_153": {
                "input": {
                    "value": "word_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc0(pvam_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_58": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_64": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/heads/self_attention.py": {
        "torch": {
            "ModuleList_115": {
                "variable": {
                    "value": "self.encoder_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.q_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_key * n_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.k_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_key * n_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "variable": {
                    "value": "self.v_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_value * n_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.proj_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_value * n_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_203": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.q_fc(queries)",
                            "Call"
                        ],
                        [
                            "torch.reshape(q, shape=[q.size(0), q.size(1), self.n_head, self.d_key])",
                            "Call"
                        ],
                        [
                            "q.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[q.size(0), q.size(1), self.n_head, self.d_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_238": {
                "variable": {
                    "value": "product",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.q_fc(queries)",
                            "Call"
                        ],
                        [
                            "torch.reshape(q, shape=[q.size(0), q.size(1), self.n_head, self.d_key])",
                            "Call"
                        ],
                        [
                            "q.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_242": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "product",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "product * self.d_model ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "product + attn_bias",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_246": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(product, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cache['static_v']",
                            "Subscript"
                        ],
                        [
                            "self.v_fc(values)",
                            "Call"
                        ],
                        [
                            "torch.reshape(v, shape=[v.size(0), v.size(1), self.n_head, self.d_value])",
                            "Call"
                        ],
                        [
                            "v.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([cache_v, v], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_250": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(out, shape=[out.size(0), out.size(1), out.shape[2] * out.shape[3]])",
                            "Call"
                        ],
                        [
                            "self.proj_fc(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(enc_input, p=self.dropout_rate)",
                            "Call"
                        ],
                        [
                            "enc_input",
                            "Name"
                        ],
                        [
                            "F.dropout(enc_input, p=self.dropout_rate)",
                            "Call"
                        ],
                        [
                            "enc_input",
                            "Name"
                        ],
                        [
                            "self.fc2(hidden)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out.size(0), out.size(1), out.shape[2] * out.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_288": {
                "variable": {
                    "value": "self.functors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_335": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.src_max_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.src_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_345": {
                "variable": {
                    "value": "src_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(src_pos, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(src_pos, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_372": {
                "variable": {
                    "value": "self.emb0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "src_vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.src_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "bos_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_377": {
                "variable": {
                    "value": "self.emb1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "src_max_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.src_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_384": {
                "variable": {
                    "value": "src_word",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_word.type(torch.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_387": {
                "variable": {
                    "value": "src_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(src_pos, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(src_pos, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_407": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_inner_hid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_409": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_inner_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_414": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(hidden)",
                            "Call"
                        ],
                        [
                            "F.dropout(hidden, p=self.dropout_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_213": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cache['static_k']",
                            "Subscript"
                        ],
                        [
                            "self.k_fc(keys)",
                            "Call"
                        ],
                        [
                            "torch.reshape(k, shape=[k.size(0), k.size(1), self.n_head, self.d_key])",
                            "Call"
                        ],
                        [
                            "k.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([cache_k, k], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[k.size(0), k.size(1), self.n_head, self.d_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_215": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cache['static_v']",
                            "Subscript"
                        ],
                        [
                            "self.v_fc(values)",
                            "Call"
                        ],
                        [
                            "torch.reshape(v, shape=[v.size(0), v.size(1), self.n_head, self.d_value])",
                            "Call"
                        ],
                        [
                            "v.permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([cache_v, v], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[v.size(0), v.size(1), self.n_head, self.d_value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_244": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(product, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_350": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.prepare_encoder(conv_features, src_pos)",
                            "Call"
                        ],
                        [
                            "self.prepare_decoder(src_word, src_pos)",
                            "Call"
                        ],
                        [
                            "enc_output",
                            "Name"
                        ],
                        [
                            "src_word_emb + src_pos_enc",
                            "BinOp"
                        ],
                        [
                            "src_word_emb + src_pos_enc",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_392": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.prepare_encoder(conv_features, src_pos)",
                            "Call"
                        ],
                        [
                            "self.prepare_decoder(src_word, src_pos)",
                            "Call"
                        ],
                        [
                            "enc_output",
                            "Name"
                        ],
                        [
                            "src_word_emb + src_pos_enc",
                            "BinOp"
                        ],
                        [
                            "src_word_emb + src_pos_enc",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_416": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(hidden)",
                            "Call"
                        ],
                        [
                            "F.dropout(hidden, p=self.dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cache_k, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cache_v, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_297": {
                "variable": {
                    "value": "layerNorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "elementwise_affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_307": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "functor(x, residual)",
                            "Call"
                        ],
                        [
                            "functor(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pytorchocr/modeling/heads/table_att_head.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.structure_generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.elem_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_39": {
                "variable": {
                    "value": "input_ont_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_char.type(torch.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "onehot_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRUCell_100": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size + num_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_106": {
                "variable": {
                    "value": "prev_hidden_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h2h(prev_hidden)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_107": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_H_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.i2h(batch_H)",
                            "Call"
                        ],
                        [
                            "self.i2h(batch_H)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "prev_hidden_proj",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_108": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(batch_H_proj, prev_hidden_proj)",
                            "Call"
                        ],
                        [
                            "torch.tanh(res)",
                            "Call"
                        ],
                        [
                            "torch.add(batch_H_proj, prev_hidden_proj)",
                            "Call"
                        ],
                        [
                            "torch.tanh(res)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_110": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score(res)",
                            "Call"
                        ],
                        [
                            "self.score(res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_112": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(alpha, batch_H)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "concat_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context, char_onehots.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_130": {
                "variable": {
                    "value": "input_ont_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_char",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "onehot_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_196": {
                "variable": {
                    "value": "prev_hidden_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h2h(prev_hidden[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_197": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_H_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.i2h(batch_H)",
                            "Call"
                        ],
                        [
                            "self.i2h(batch_H)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "prev_hidden_proj",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_198": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(batch_H_proj, prev_hidden_proj)",
                            "Call"
                        ],
                        [
                            "torch.tanh(res)",
                            "Call"
                        ],
                        [
                            "torch.add(batch_H_proj, prev_hidden_proj)",
                            "Call"
                        ],
                        [
                            "torch.tanh(res)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_201": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.score(res)",
                            "Call"
                        ],
                        [
                            "self.score(res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_203": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(alpha, batch_H)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "concat_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context, char_onehots.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.loc_generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.loc_generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "fea",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fea",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[-1]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(fea, [fea.shape[0], fea.shape[1], last_shape])",
                            "Call"
                        ],
                        [
                            "fea.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[fea.shape[0], fea.shape[1], last_shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "temp_elem",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_66": {
                "variable": {
                    "value": "max_elem_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.max_elem_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "structure_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "structure_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.structure_generator(output)",
                            "Call"
                        ],
                        [
                            "F.softmax(structure_probs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_186": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size + num_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRUCell_189": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size + num_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.loc_fea_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.max_elem_length + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_83": {
                "variable": {
                    "value": "loc_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.loc_generator(output)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(loc_preds)",
                            "Call"
                        ],
                        [
                            "self.loc_generator(loc_concat)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(loc_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_88": {
                "variable": {
                    "value": "loc_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, loc_fea]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_90": {
                "variable": {
                    "value": "loc_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.loc_generator(output)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(loc_preds)",
                            "Call"
                        ],
                        [
                            "self.loc_generator(loc_concat)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(loc_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_112": {
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.softmax(e, dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(e, dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch_H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "*size": {
                    "value": "(batch_size, self.hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_203": {
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.softmax(e, dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.softmax(e, dim=1)",
                            "Call"
                        ],
                        [
                            "alpha.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch_H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.loc_fea_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "625",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.max_elem_length + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.loc_fea_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.max_elem_length + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_166": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.generator(hidden[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[probs, torch.unsqueeze(probs_step, dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_150": {
                "input": {
                    "value": "hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_169": {
                "input": {
                    "value": "probs_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.generator(hidden[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/necks/db_fpn.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(in_channels * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(in_channels * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_channels * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.in2_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.in3_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.in4_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.in5_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.p5_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "self.p4_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "variable": {
                    "value": "self.p3_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "variable": {
                    "value": "self.p2_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_153": {
                "variable": {
                    "value": "p5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.p5_conv(in5)",
                            "Call"
                        ],
                        [
                            "F.interpolate(p5, scale_factor=8, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.inp_conv[3](in5)",
                            "Call"
                        ],
                        [
                            "F.upsample(p5, scale_factor=8, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.pan_lat_conv[3](pan5)",
                            "Call"
                        ],
                        [
                            "F.upsample(p5, scale_factor=8, mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_154": {
                "variable": {
                    "value": "p4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.p4_conv(out4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(p4, scale_factor=4, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.inp_conv[2](out4)",
                            "Call"
                        ],
                        [
                            "F.upsample(p4, scale_factor=4, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.pan_lat_conv[2](pan4)",
                            "Call"
                        ],
                        [
                            "F.upsample(p4, scale_factor=4, mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_155": {
                "variable": {
                    "value": "p3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.p3_conv(out3)",
                            "Call"
                        ],
                        [
                            "F.interpolate(p3, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.inp_conv[1](out3)",
                            "Call"
                        ],
                        [
                            "F.upsample(p3, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.pan_lat_conv[1](pan3)",
                            "Call"
                        ],
                        [
                            "F.upsample(p3, scale_factor=2, mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "fuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p5, p4, p3, p2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "variable": {
                    "value": "self.in_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(kernel_size // 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_187": {
                "variable": {
                    "value": "self.ins_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_188": {
                "variable": {
                    "value": "self.inp_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_224": {
                "variable": {
                    "value": "p5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.p5_conv(in5)",
                            "Call"
                        ],
                        [
                            "F.interpolate(p5, scale_factor=8, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.inp_conv[3](in5)",
                            "Call"
                        ],
                        [
                            "F.upsample(p5, scale_factor=8, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.pan_lat_conv[3](pan5)",
                            "Call"
                        ],
                        [
                            "F.upsample(p5, scale_factor=8, mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_225": {
                "variable": {
                    "value": "p4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.p4_conv(out4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(p4, scale_factor=4, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.inp_conv[2](out4)",
                            "Call"
                        ],
                        [
                            "F.upsample(p4, scale_factor=4, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.pan_lat_conv[2](pan4)",
                            "Call"
                        ],
                        [
                            "F.upsample(p4, scale_factor=4, mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_226": {
                "variable": {
                    "value": "p3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.p3_conv(out3)",
                            "Call"
                        ],
                        [
                            "F.interpolate(p3, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.inp_conv[1](out3)",
                            "Call"
                        ],
                        [
                            "F.upsample(p3, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.pan_lat_conv[1](pan3)",
                            "Call"
                        ],
                        [
                            "F.upsample(p3, scale_factor=2, mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "fuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p5, p4, p3, p2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_237": {
                "variable": {
                    "value": "self.ins_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_238": {
                "variable": {
                    "value": "self.inp_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_240": {
                "variable": {
                    "value": "self.pan_head_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_241": {
                "variable": {
                    "value": "self.pan_lat_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_314": {
                "variable": {
                    "value": "p5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.p5_conv(in5)",
                            "Call"
                        ],
                        [
                            "F.interpolate(p5, scale_factor=8, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.inp_conv[3](in5)",
                            "Call"
                        ],
                        [
                            "F.upsample(p5, scale_factor=8, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.pan_lat_conv[3](pan5)",
                            "Call"
                        ],
                        [
                            "F.upsample(p5, scale_factor=8, mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_315": {
                "variable": {
                    "value": "p4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.p4_conv(out4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(p4, scale_factor=4, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.inp_conv[2](out4)",
                            "Call"
                        ],
                        [
                            "F.upsample(p4, scale_factor=4, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.pan_lat_conv[2](pan4)",
                            "Call"
                        ],
                        [
                            "F.upsample(p4, scale_factor=4, mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_316": {
                "variable": {
                    "value": "p3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.p3_conv(out3)",
                            "Call"
                        ],
                        [
                            "F.interpolate(p3, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.inp_conv[1](out3)",
                            "Call"
                        ],
                        [
                            "F.upsample(p3, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.pan_lat_conv[1](pan3)",
                            "Call"
                        ],
                        [
                            "F.upsample(p3, scale_factor=2, mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_318": {
                "variable": {
                    "value": "fuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p5, p4, p3, p2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv_end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu6_8": {
                "input": {
                    "value": "x + 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_70": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "x + self.conv_end(inputs)",
                            "BinOp"
                        ],
                        [
                            "hard_swish(x)",
                            "Call"
                        ],
                        [
                            "self.in_conv(ins)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_142": {
                "input": {
                    "value": "in5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.in5_conv(c5)",
                            "Call"
                        ],
                        [
                            "self.ins_conv[3](c5)",
                            "Call"
                        ],
                        [
                            "self.ins_conv[3](c5)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_144": {
                "input": {
                    "value": "out4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in4 + F.interpolate(in5, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "in4 + F.upsample(in5, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "in4 + F.upsample(in5, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_146": {
                "input": {
                    "value": "out3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in3 + F.interpolate(out4, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "in3 + F.upsample(out4, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "in3 + F.upsample(out4, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_212": {
                "input": {
                    "value": "in5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.in5_conv(c5)",
                            "Call"
                        ],
                        [
                            "self.ins_conv[3](c5)",
                            "Call"
                        ],
                        [
                            "self.ins_conv[3](c5)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_214": {
                "input": {
                    "value": "out4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in4 + F.interpolate(in5, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "in4 + F.upsample(in5, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "in4 + F.upsample(in5, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_216": {
                "input": {
                    "value": "out3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in3 + F.interpolate(out4, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "in3 + F.upsample(out4, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "in3 + F.upsample(out4, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_293": {
                "input": {
                    "value": "in5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.in5_conv(c5)",
                            "Call"
                        ],
                        [
                            "self.ins_conv[3](c5)",
                            "Call"
                        ],
                        [
                            "self.ins_conv[3](c5)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_295": {
                "input": {
                    "value": "out4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in4 + F.interpolate(in5, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "in4 + F.upsample(in5, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "in4 + F.upsample(in5, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_297": {
                "input": {
                    "value": "out3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in3 + F.interpolate(out4, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "in3 + F.upsample(out4, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ],
                        [
                            "in3 + F.upsample(out4, scale_factor=2, mode='nearest')",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_254": {
                "in_channels": {
                    "value": "in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "in_channels": {
                    "value": "self.out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/necks/east_fpn.py": {
        "torch": {
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_69": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g, f[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g, f[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g, f[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/necks/fce_fpn.py": {
        "torch": {
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ch_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(filter_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias_attr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "ModuleList_128": {
                "variable": {
                    "value": "self.lateral_convs_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_130": {
                "variable": {
                    "value": "self.fpn_convs_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "variable": {
                    "value": "fpn_conv_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_293": {
                "variable": {
                    "value": "upsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "laterals[lvl]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SyncBatchNorm_60": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "variable": {
                    "value": "lateral",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels[i - st_stage]",
                            "Subscript"
                        ],
                        [
                            "in_channels[-1]",
                            "Subscript"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_215": {
                "variable": {
                    "value": "fpn_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_233": {
                "variable": {
                    "value": "extra_fpn_conv_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_64": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "norm_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "ch_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "bias_attr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_266": {
                "variable": {
                    "value": "extra_fpn_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels[i - st_stage]",
                            "Subscript"
                        ],
                        [
                            "in_channels[-1]",
                            "Subscript"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_307": {
                "input": {
                    "value": "fpn_output[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_318": {
                "input": {
                    "value": "fpn_output[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/necks/fpn.py": {
        "torch": {
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "fuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p2, p3, p4, p5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_83": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_86": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/necks/pg_fpn.py": {
        "torch": {
            "AvgPool2d_26": {
                "variable": {
                    "value": "self._pool2d_avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self._conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self._batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_69": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_255": {
                "variable": {
                    "value": "g[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "h[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_256": {
                "variable": {
                    "value": "g[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_260": {
                "variable": {
                    "value": "g[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "h[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_261": {
                "variable": {
                    "value": "g[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_276": {
                "variable": {
                    "value": "g[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "h[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_277": {
                "variable": {
                    "value": "g[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_281": {
                "variable": {
                    "value": "g[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "h[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_282": {
                "variable": {
                    "value": "g[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_286": {
                "variable": {
                    "value": "g[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "h[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_287": {
                "variable": {
                    "value": "g[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_291": {
                "variable": {
                    "value": "g[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "h[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_292": {
                "variable": {
                    "value": "g[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "g[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_295": {
                "variable": {
                    "value": "f_common",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_down",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_bn_layer_8(g[2])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.convf(g[4])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_296": {
                "variable": {
                    "value": "f_common",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_common",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(f_down, f_up)",
                            "Call"
                        ],
                        [
                            "F.relu(f_common)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorchocr/modeling/necks/rnn.py": {
        "torch": {
            "LSTM_24": {
                "variable": {
                    "value": "self.rnn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_25": {
                "variable": {
                    "value": "self.rnn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_39": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "48",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.svtr_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=hidden_dims, num_heads=num_heads, mixer='Global', HW=None, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, act_layer='swish', attn_drop=attn_drop_rate, drop_path=drop_path, norm_layer='nn.LayerNorm', epsilon=1e-05, prenorm=False) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_102": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "120",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "[out1, torch.flip(out2, [1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_31": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_reshape(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.encoder_reshape(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_32": {
                "input": {
                    "value": "out2",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/necks/sast_fpn.py": {
        "torch": {
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels[::-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[256, 256, 192, 192, 128]",
                            "List"
                        ],
                        [
                            "[32, 64, 128]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[256, 256, 192, 192, 128]",
                            "List"
                        ],
                        [
                            "[32, 64, 128]",
                            "List"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_75": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels[::-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[256, 256, 192, 192, 128]",
                            "List"
                        ],
                        [
                            "[32, 64, 128]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_83": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[256, 256, 192, 192, 128]",
                            "List"
                        ],
                        [
                            "[32, 64, 128]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.g1_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBNLayer(out_channels[1], out_channels[1], 3, 1, act='relu', name='fpn_up_g1_1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.g2_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBNLayer(out_channels[2], out_channels[2], 3, 1, act='relu', name='fpn_up_g2_1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.g3_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBNLayer(out_channels[3], out_channels[3], 3, 1, act='relu', name='fpn_up_g3_1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.g4_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBNLayer(out_channels[4], out_channels[4], 3, 1, act='relu', name='fpn_up_fusion_1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_132": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_133": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self._act(x)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self._act(x)",
                            "Call"
                        ],
                        [
                            "torch.add(x1, x2)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "self.g1_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBNLayer(out_channels[1], out_channels[1], 3, 1, act='relu', name='fpn_down_g1_1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "self.g2_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBNLayer(out_channels[2], out_channels[2], 3, 1, act='relu', name='fpn_down_fusion_1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_182": {
                "variable": {
                    "value": "g1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.g0_conv(h0)",
                            "Call"
                        ],
                        [
                            "self.g0_conv(h0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.h1_conv(f[1])",
                            "Call"
                        ],
                        [
                            "self.h1_conv(f[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_183": {
                "variable": {
                    "value": "g1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._add_relu(g0, h1)",
                            "Call"
                        ],
                        [
                            "self.g1_conv(g1)",
                            "Call"
                        ],
                        [
                            "torch.add(g0, h1)",
                            "Call"
                        ],
                        [
                            "F.relu(g1)",
                            "Call"
                        ],
                        [
                            "self.g1_conv(g1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_186": {
                "variable": {
                    "value": "g2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._add_relu(g0, h1)",
                            "Call"
                        ],
                        [
                            "self.g1_conv(g1)",
                            "Call"
                        ],
                        [
                            "torch.add(g0, h1)",
                            "Call"
                        ],
                        [
                            "F.relu(g1)",
                            "Call"
                        ],
                        [
                            "self.g1_conv(g1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.h2_conv(f[2])",
                            "Call"
                        ],
                        [
                            "self.h2_conv(f[2])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_187": {
                "variable": {
                    "value": "g2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.g2_conv(self._add_relu(g1, h2))",
                            "Call"
                        ],
                        [
                            "torch.add(g1, h2)",
                            "Call"
                        ],
                        [
                            "F.relu(g2)",
                            "Call"
                        ],
                        [
                            "self.g2_conv(g2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_213": {
                "variable": {
                    "value": "f_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f_theta.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(f_theta, [shape[0] * shape[1], shape[2], 128])",
                            "Call"
                        ],
                        [
                            "self.theta_conv(f_common)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0] * shape[1], shape[2], 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_217": {
                "variable": {
                    "value": "f_phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_phi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f_phi.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(f_phi, [shape[0] * shape[1], shape[2], 128])",
                            "Call"
                        ],
                        [
                            "self.phi_conv(f_common)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0] * shape[1], shape[2], 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_221": {
                "variable": {
                    "value": "f_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f_g.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(f_g, [shape[0] * shape[1], shape[2], 128])",
                            "Call"
                        ],
                        [
                            "self.g_conv(f_common)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0] * shape[1], shape[2], 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_224": {
                "variable": {
                    "value": "f_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f_theta.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(f_theta, [shape[0] * shape[1], shape[2], 128])",
                            "Call"
                        ],
                        [
                            "self.theta_conv(f_common)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_phi.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_227": {
                "variable": {
                    "value": "f_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(f_theta, f_phi.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "f_attn / 128 ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(f_attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([f_h, f_v], dim=1)",
                            "Call"
                        ],
                        [
                            "self.f_attn_conv(f_attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_230": {
                "variable": {
                    "value": "f_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(f_theta, f_phi.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "f_attn / 128 ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(f_attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([f_h, f_v], dim=1)",
                            "Call"
                        ],
                        [
                            "self.f_attn_conv(f_attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f_g.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(f_g, [shape[0] * shape[1], shape[2], 128])",
                            "Call"
                        ],
                        [
                            "self.g_conv(f_common)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_233": {
                "variable": {
                    "value": "f_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(f_attn, f_g)",
                            "Call"
                        ],
                        [
                            "torch.reshape(f_weight, [shape[0], shape[1], shape[2], 128])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], shape[1], shape[2], 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_254": {
                "variable": {
                    "value": "f_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fh_weight + fh_sc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_270": {
                "variable": {
                    "value": "f_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fv_weight + fv_sc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "f_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f_h, f_v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_298": {
                "variable": {
                    "value": "f_common",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_down",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.FPN_Down_Fusion(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.FPN_Up_Fusion(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_299": {
                "variable": {
                    "value": "f_common",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_common",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.add(f_down, f_up)",
                            "Call"
                        ],
                        [
                            "F.relu(f_common)",
                            "Call"
                        ],
                        [
                            "self.cross_attention(f_common)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorchocr/modeling/necks/table_fpn.py": {
        "torch": {
            "Conv2d_16": {
                "variable": {
                    "value": "self.in2_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.in3_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.in4_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.in5_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.p5_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.p4_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.p3_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.p2_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.fuse_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_83": {
                "variable": {
                    "value": "p4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in4 + F.interpolate(in5, size=in4.shape[2:4], mode='nearest')",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "in5.shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_84": {
                "variable": {
                    "value": "p3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in3 + F.interpolate(out4, size=in3.shape[2:4], mode='nearest')",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "in5.shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_85": {
                "variable": {
                    "value": "p2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in2 + F.interpolate(out3, size=in2.shape[2:4], mode='nearest')",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "in5.shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "fuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[in5, p4, p3, p2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_76": {
                "input": {
                    "value": "in5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.in5_conv(c5)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "in4.shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_78": {
                "input": {
                    "value": "out4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in4 + F.interpolate(in5, size=in4.shape[2:4], mode='nearest')",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "in3.shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_80": {
                "input": {
                    "value": "out3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in3 + F.interpolate(out4, size=in3.shape[2:4], mode='nearest')",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "in2.shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/transforms/stn.py": {
        "torch": {
            "Conv2d_21": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.stn_convnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_block(in_channels, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.stn_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * 256, 512, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.stn_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_ctrlpoints * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_82": {
                "variable": {
                    "value": "ctrl_points",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "fc2_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctrl_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([ctrl_pts_top, ctrl_pts_bottom], axis=0).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(ctrl_points)",
                            "Call"
                        ],
                        [
                            "-np.log(1.0 / ctrl_points - 1.0)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[ctrl_points.shape[0] * ctrl_points.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.stn_convnet(x)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=(batch_size, -1))",
                            "Call"
                        ],
                        [
                            "self.stn_fc2(0.1 * img_feat)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[-1, self.num_ctrlpoints, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.stn_convnet(x)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=(batch_size, -1))",
                            "Call"
                        ],
                        [
                            "self.stn_fc2(0.1 * img_feat)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[-1, self.num_ctrlpoints, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.num_ctrlpoints, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_117": {
                "variable": {
                    "value": "stn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "self.tps_inputsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.stn_convnet(x)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=(batch_size, -1))",
                            "Call"
                        ],
                        [
                            "self.stn_fc2(0.1 * img_feat)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, shape=[-1, self.num_ctrlpoints, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2d_40": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_43": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_49": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_52": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "2 * 256",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_60": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/transforms/tps.py": {
        "torch": {
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.block_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "F * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self._act(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "x.squeeze(dim=2).squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(shape=[-1, self.F, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "batch_C_prime_with_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_C_prime, batch_C_ex_part_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "variable": {
                    "value": "batch_T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inv_delta_C_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.build_inv_delta_C_paddle(C).type(torch.float32)",
                            "Call"
                        ],
                        [
                            "inv_delta_C_tensor.to(batch_C_prime_with_zeros.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch_C_prime_with_zeros",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([batch_C_prime, batch_C_ex_part_tensor], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_185": {
                "variable": {
                    "value": "batch_P_prime",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_hat_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.build_P_hat_paddle(C, torch.as_tensor(P)).type(torch.float32)",
                            "Call"
                        ],
                        [
                            "P_hat_tensor.to(batch_T.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "batch_T",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(inv_delta_C_tensor, batch_C_prime_with_zeros)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_191": {
                "variable": {
                    "value": "ctrl_pts_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "int(F / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_193": {
                "variable": {
                    "value": "ctrl_pts_y_bottom",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[int(F / 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_194": {
                "variable": {
                    "value": "ctrl_pts_top",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ctrl_pts_x, ctrl_pts_y_top]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_195": {
                "variable": {
                    "value": "ctrl_pts_bottom",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ctrl_pts_x, ctrl_pts_y_bottom]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ctrl_pts_top, ctrl_pts_bottom]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_210": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([I_r_grid_x, I_r_grid_y])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "hat_C",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(F, F)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "delta_C",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat([torch.ones((F, 1), dtype=torch.float64), C, hat_C], dim=1), torch.cat([torch.zeros((2, 3), dtype=torch.float64), C.permute(1, 0)], dim=1), torch.cat([torch.zeros((1, 3), dtype=torch.float64), torch.ones((1, F), dtype=torch.float64)], dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_249": {
                "variable": {
                    "value": "inv_delta_C",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([torch.ones((F, 1), dtype=torch.float64), C, hat_C], dim=1), torch.cat([torch.zeros((2, 3), dtype=torch.float64), C.permute(1, 0)], dim=1), torch.cat([torch.zeros((1, 3), dtype=torch.float64), torch.ones((1, F), dtype=torch.float64)], dim=1)], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_258": {
                "variable": {
                    "value": "P_tile",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.build_P_paddle(I_r_size)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.meshgrid([I_r_grid_x, I_r_grid_y]), dim=2)",
                            "Call"
                        ],
                        [
                            "P.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_259": {
                "variable": {
                    "value": "C_tile",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.build_C_paddle()",
                            "Call"
                        ],
                        [
                            "torch.cat([ctrl_pts_top, ctrl_pts_bottom], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_262": {
                "variable": {
                    "value": "rbf_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "P_tile - C_tile",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mul_267": {
                "variable": {
                    "value": "rbf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rbf_norm ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.log(rbf_norm + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "P_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones((n, 1), dtype=torch.float64), P, rbf]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_298": {
                "variable": {
                    "value": "batch_I_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "batch_P_prime",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(P_hat_tensor, batch_T)",
                            "Call"
                        ],
                        [
                            "self.grid_generator(batch_C_prime, image.shape[2:])",
                            "Call"
                        ],
                        [
                            "batch_P_prime.reshape([-1, image.shape[2], image.shape[3], 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_300": {
                "variable": {
                    "value": "batch_I_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "batch_P_prime",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(P_hat_tensor, batch_T)",
                            "Call"
                        ],
                        [
                            "self.grid_generator(batch_C_prime, image.shape[2:])",
                            "Call"
                        ],
                        [
                            "batch_P_prime.reshape([-1, image.shape[2], image.shape[3], 2])",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_85": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_88": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_192": {
                "*size": {
                    "value": "[int(F / 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_203": {
                "data": {
                    "value": "np.array([I_r_width]).astype(np.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_207": {
                "data": {
                    "value": "np.array([I_r_height]).astype(np.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "meshgrid_210": {
                "*tensors": {
                    "value": "[I_r_grid_x, I_r_grid_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_228": {
                "input": {
                    "value": "hat_C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((F, F), dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "hat_C ** 2 * torch.log(hat_C)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_268": {
                "input": {
                    "value": "rbf_norm + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_201": {
                "start": {
                    "value": "-I_r_width",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "I_r_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_205": {
                "start": {
                    "value": "-I_r_height",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "I_r_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_225": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C[i] - C[j]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_231": {
                "tensors": {
                    "value": "[torch.ones((F, 1), dtype=torch.float64), C, hat_C]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_234": {
                "tensors": {
                    "value": "[torch.zeros((2, 3), dtype=torch.float64), C.permute(1, 0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "tensors": {
                    "value": "[torch.zeros((1, 3), dtype=torch.float64), torch.ones((1, F), dtype=torch.float64)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_270": {
                "*size": {
                    "value": "(n, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_171": {
                "data": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.build_P_paddle(I_r_size)",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.meshgrid([I_r_grid_x, I_r_grid_y]), dim=2)",
                            "Call"
                        ],
                        [
                            "P.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_232": {
                "*size": {
                    "value": "(F, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "*size": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "*size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_243": {
                "*size": {
                    "value": "(1, F)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/modeling/transforms/tps_spatial_transformer.py": {
        "torch": {
            "Tensor_62": {
                "variable": {
                    "value": "output_ctrl_pts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grid_sample_25": {
                "variable": {
                    "value": "output_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.data.new(input.size()).fill_(1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(source_coordinate, shape=[-1, self.target_height, self.target_width, 2])",
                            "Call"
                        ],
                        [
                            "torch.clamp(grid, 0, 1)",
                            "Call"
                        ],
                        [
                            "2.0 * grid - 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "forward_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "N + 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_90": {
                "variable": {
                    "value": "inverse_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forward_kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(N + 3, N + 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_97": {
                "variable": {
                    "value": "target_coordinate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "target_coordinate",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, Y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "target_coordinate_repr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_coordinate_partial_repr, torch.ones(HW, 1), target_coordinate]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "self.padding_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source_control_points, self.padding_matrix.expand(batch_size, 3, 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "variable": {
                    "value": "mapping_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.inverse_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Y / (self.target_height - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([source_control_points, self.padding_matrix.expand(batch_size, 3, 2)], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_126": {
                "variable": {
                    "value": "source_coordinate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.target_coordinate_repr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "mapping_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.inverse_kernel, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_129": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_coordinate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.target_coordinate_repr, mapping_matrix)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.target_height, self.target_width, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_132": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(source_coordinate, shape=[-1, self.target_height, self.target_width, 2])",
                            "Call"
                        ],
                        [
                            "torch.clamp(grid, 0, 1)",
                            "Call"
                        ],
                        [
                            "2.0 * grid - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_19": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(source_coordinate, shape=[-1, self.target_height, self.target_width, 2])",
                            "Call"
                        ],
                        [
                            "torch.clamp(grid, 0, 1)",
                            "Call"
                        ],
                        [
                            "2.0 * grid - 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_35": {
                "input": {
                    "value": "input_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "input": {
                    "value": "control_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, M, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_42": {
                "input": {
                    "value": "pairwise_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pairwise_diff_square[:, :, 0] + pairwise_diff_square[:, :, 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_107": {
                "*size": {
                    "value": "HW",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.target_height * self.target_width",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorchocr/postprocess/cls_postprocess.py": {
        "torch": {}
    },
    "pytorchocr/postprocess/db_postprocess.py": {
        "torch": {}
    },
    "pytorchocr/postprocess/east_postprocess.py": {
        "torch": {}
    },
    "pytorchocr/postprocess/fce_postprocess.py": {
        "torch": {}
    },
    "pytorchocr/postprocess/pse_postprocess/pse_postprocess.py": {
        "torch": {
            "interpolate_41": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outs_dict['maps']",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(pred)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred, scale_factor=4 // self.scale, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4 // self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_44": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_tensor_40": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outs_dict['maps']",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(pred)",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred, scale_factor=4 // self.scale, mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorchocr/postprocess/rec_postprocess.py": {
        "torch": {}
    },
    "pytorchocr/postprocess/sast_postprocess.py": {
        "torch": {}
    },
    "pytorchocr/utils/e2e_utils/pgnet_pp_utils.py": {
        "torch": {}
    },
    "pytorchocr/utils/logging.py": {
        "torch": {}
    },
    "tools/infer/predict_cls.py": {
        "torch": {
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "norm_img_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(norm_img_batch)",
                            "Call"
                        ],
                        [
                            "norm_img_batch.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/infer/predict_det.py": {
        "torch": {
            "from_numpy_193": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(image_file)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=0)",
                            "Call"
                        ],
                        [
                            "img.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/infer/predict_e2e.py": {
        "torch": {
            "from_numpy_106": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(image_file)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=0)",
                            "Call"
                        ],
                        [
                            "img.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/infer/predict_rec.py": {
        "torch": {
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_303": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "norm_img_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(norm_img_batch)",
                            "Call"
                        ],
                        [
                            "norm_img_batch.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_304": {
                "variable": {
                    "value": "encoder_word_pos_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "encoder_word_pos_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate(encoder_word_pos_list)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_305": {
                "variable": {
                    "value": "gsrm_word_pos_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gsrm_word_pos_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate(gsrm_word_pos_list)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_306": {
                "variable": {
                    "value": "gsrm_slf_attn_bias1_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gsrm_slf_attn_bias1_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate(gsrm_slf_attn_bias1_list)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_307": {
                "variable": {
                    "value": "gsrm_slf_attn_bias2_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gsrm_slf_attn_bias2_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate(gsrm_slf_attn_bias2_list)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_330": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "norm_img_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(norm_img_batch)",
                            "Call"
                        ],
                        [
                            "norm_img_batch.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_347": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "norm_img_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(norm_img_batch)",
                            "Call"
                        ],
                        [
                            "norm_img_batch.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}