{
    "docking_baselines/models/predicted_docking_functions.py": {
        "sklearn": {
            "train_test_split_32": {
                "variable": {
                    "value": "(x_train, x_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_fraction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "docking_benchmark/data/proteins.py": {
        "sklearn": {
            "train_test_split_106": {
                "variable": {
                    "value": "(x_train, x_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "csv",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "stratify": {
                    "value": "stratify",
                    "type": "Name",
                    "possible_values": [
                        [
                            "csv[stratify_via_column] if stratify_via_column is not None else None",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "docking_baselines/models/cvae/sampled_rnn_tf.py": {
        "tensorflow": {
            "transpose_83": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, axes)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "axes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[1, 0] + list(range(2, ndim))",
                            "BinOp"
                        ],
                        [
                            "[1, 0] + list(range(2, len(outputs.get_shape())))",
                            "BinOp"
                        ],
                        [
                            "[1, 0] + list(range(2, K.ndim(output)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TensorArray_105": {
                "variable": {
                    "value": "output_ta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "outputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "time_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(inputs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "tensor_array_name": {
                    "value": "output_ta",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_109": {
                "variable": {
                    "value": "input_ta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "time_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(inputs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "tensor_array_name": {
                    "value": "input_ta",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_114": {
                "variable": {
                    "value": "time",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "time",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_143": {
                "variable": {
                    "value": "final_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda time, *_: time < time_steps",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(time, output_ta) + states",
                    "type": "BinOp",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_161": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output_ta.stack()[:, :, 1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(outputs, axes)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "axes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[1, 0] + list(range(2, ndim))",
                            "BinOp"
                        ],
                        [
                            "[1, 0] + list(range(2, len(outputs.get_shape())))",
                            "BinOp"
                        ],
                        [
                            "[1, 0] + list(range(2, K.ndim(output)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_random_seed_67": {
                "seed": {
                    "value": "random_seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_137": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(output, axes)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "axes",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[1, 0] + list(range(2, ndim))",
                            "BinOp"
                        ],
                        [
                            "[1, 0] + list(range(2, len(outputs.get_shape())))",
                            "BinOp"
                        ],
                        [
                            "[1, 0] + list(range(2, K.ndim(output)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_89": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, axes)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_95": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, axes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "docking_baselines/models/cvae/vae_utils.py": {
        "tensorflow": {
            "split_31": {
                "variable": {
                    "value": "(x_mean, x_log_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x_mean_log_var_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "docking_baselines/models/gvae/model_zinc.py": {
        "tensorflow": {
            "reshape_100": {
                "variable": {
                    "value": "most_likely",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "most_likely",
                    "type": "Call",
                    "possible_values": [
                        [
                            "K.argmax(x_true)",
                            "Call"
                        ],
                        [
                            "tf.reshape(most_likely, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_101": {
                "variable": {
                    "value": "ix2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(ind_of_ind_K, most_likely)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_102": {
                "variable": {
                    "value": "ix2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ix2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.gather(ind_of_ind_K, most_likely), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(ix2, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_103": {
                "variable": {
                    "value": "M2",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "masks_K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "K.variable(G.masks)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "ix2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.gather(ind_of_ind_K, most_likely), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(ix2, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "M3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "M2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather_nd(masks_K, ix2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, MAX_LEN, DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_105": {
                "variable": {
                    "value": "P2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "K.exp(x_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "M3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(M2, [-1, MAX_LEN, DIM])",
                            "Call"
                        ]
                    ]
                }
            },
            "div_106": {
                "variable": {
                    "value": "P2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "P2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.multiply(K.exp(x_pred), M3)",
                            "Call"
                        ],
                        [
                            "tf.div(P2, K.sum(P2, axis=-1, keepdims=True))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "K.sum(P2, axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_101": {
                "params": {
                    "value": "ind_of_ind_K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "K.variable(G.ind_of_ind)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "most_likely",
                    "type": "Call",
                    "possible_values": [
                        [
                            "K.argmax(x_true)",
                            "Call"
                        ],
                        [
                            "tf.reshape(most_likely, [-1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "docking_baselines/utils/scripting.py": {
        "tensorflow": {
            "ConfigProto_5": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "num_cores",
                    "type": "Variable",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "num_cores",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_6": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(intra_op_parallelism_threads=num_cores, inter_op_parallelism_threads=num_cores)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}