{
    "src/mask_inference.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_28": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.abspath(os.path.join(dataset_dir, 'test.pt'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_153": {
                "variable": {
                    "value": "data_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "pt_data['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_155": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(pt_data['input_ids'], pt_data['attention_masks'], pt_data['ground_labels'], pt_data[label_query_name])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_162": {
                "f": {
                    "value": "os.path.abspath(os.path.join(model_folder, 'sentence_classification_model.pt'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "ndarray": {
                    "value": "np.stack(mask_pos[x:x + batch_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/model.py": {
        "torch": {
            "Dropout_12": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_36": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_39": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/trainer.py": {
        "torch": {
            "device_66": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "TensorDataset_80": {
                "variable": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "self.train_data['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorDataset_82": {
                "variable": {
                    "value": "self.dev_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "self.dev_data['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorDataset_84": {
                "variable": {
                    "value": "self.test_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "self.test_data['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "self.dev_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dev_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_110": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "loader_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(os.path.join(dataset_dir, loader_name))",
                            "Call"
                        ],
                        [
                            "os.path.abspath(os.path.join(self.output_path, loader_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_124": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[result[0] for result in results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "attention_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[result[1] for result in results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "variable": {
                    "value": "ground_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ground_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[doc['sent_ground'] for doc in docs]",
                            "ListComp"
                        ],
                        [
                            "[int(label) for label in ground_labels]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(ground_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "agg_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "agg_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[doc['sent_agg'] for doc in docs]",
                            "ListComp"
                        ],
                        [
                            "[int(label) for label in agg_labels]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(agg_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "major_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "major_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[doc['sent_major'] for doc in docs]",
                            "ListComp"
                        ],
                        [
                            "[int(label) for label in major_labels]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(major_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_134": {
                "variable": {
                    "value": "minor_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "minor_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[doc['sent_minor'] for doc in docs]",
                            "ListComp"
                        ],
                        [
                            "[int(label) for label in minor_labels]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(minor_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_142": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(loader_file)",
                            "Call"
                        ],
                        [
                            "{'input_ids': input_ids, 'attention_masks': attention_masks, 'ground_labels': ground_labels, 'agg_labels': agg_labels, 'major_labels': major_labels, 'minor_labels': minor_labels}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "loader_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(os.path.join(dataset_dir, loader_name))",
                            "Call"
                        ],
                        [
                            "os.path.abspath(os.path.join(self.output_path, loader_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "avg_train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[total_train_loss / len(self.train_loader) * self.accum_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(model, self.test_loader, return_type='data')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_input_ids, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(model, self.test_loader, return_type='data')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_input_mask, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "all_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(model, self.test_loader, return_type='data')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_preds, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "all_last_hiddent_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_last_hiddent_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(model, self.test_loader, return_type='data')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_last_hiddent_states, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "all_pooled_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_pooled_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(model, self.test_loader, return_type='data')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_pooled_outputs, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_labels, dim=0).tolist()",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "truth_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "truth_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(truth_labels, dim=0).tolist()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "crowd_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "crowd_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[3].to(self.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(crowd_labels, dim=0).tolist()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_187": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "loader_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(os.path.join(dataset_dir, loader_name))",
                            "Call"
                        ],
                        [
                            "os.path.abspath(os.path.join(self.output_path, loader_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_188": {
                "obj": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(model, self.test_loader, return_type='data')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_input_ids, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.abspath(os.path.join(self.output_path, 'all_input_ids.pt'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_189": {
                "obj": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(model, self.test_loader, return_type='data')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_input_mask, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.abspath(os.path.join(self.output_path, 'all_input_mask.pt'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_190": {
                "obj": {
                    "value": "all_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(model, self.test_loader, return_type='data')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_preds, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.abspath(os.path.join(self.output_path, 'all_preds.pt'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_191": {
                "obj": {
                    "value": "all_last_hiddent_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(model, self.test_loader, return_type='data')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_last_hiddent_states, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.abspath(os.path.join(self.output_path, 'all_last_hiddent_states.pt'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_192": {
                "obj": {
                    "value": "all_pooled_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference(model, self.test_loader, return_type='data')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_pooled_outputs, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.abspath(os.path.join(self.output_path, 'all_pooled_outputs.pt'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_labels, dim=0).tolist()",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__172": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Softmax_223": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_227": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids, attention_mask=attention_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_231": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_ids, attention_mask=attention_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}