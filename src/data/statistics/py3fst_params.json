{
    "attack_eval.py": {
        "sklearn": {
            "roc_curve_216": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "clip_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((args.batch_size * n_eval_batches,), dtype=int)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "clip_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((args.batch_size * n_eval_batches,))",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_217": {
                "variable": {
                    "value": "auc_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(clip_gt, clip_predictions)",
                            "Call"
                        ],
                        [
                            "det_curve(clip_gt, clip_predictions)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(clip_gt, clip_predictions)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "get_default_graph_104": {
                "variable": {
                    "value": "g_combined",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_105": {
                "variable": {
                    "value": "combined_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g_combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_default_graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "combined_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, batch_item_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "time_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "export_meta_graph_108": {
                "variable": {
                    "value": "meta_graph2",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g_2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "export_meta_graph_112": {
                "variable": {
                    "value": "meta_graph1",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g_1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Saver_117": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "input_td_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, batch_item_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "time_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_81": {
                "variable": {
                    "value": "input_td",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_td_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, batch_item_length), name='time_input')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "((0, 0), (n_fft // 2, n_fft // 2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stft_83": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "signals": {
                    "value": "input_td",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_td_placeholder, ((0, 0), (n_fft // 2, n_fft // 2)), 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "hop_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "160",
                            "int"
                        ]
                    ]
                },
                "fft_length": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "window_fn": {
                    "value": "mywindow_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mywindow_fn",
                            "Call"
                        ]
                    ]
                },
                "pad_end": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "STFT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_92": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(spec, B, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.val_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.val_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(spec, B, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.val_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.val_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mel(sr, n_fft, n_mels=n_mels)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_97": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(spec, B, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.val_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.val_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_100": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(spec, B, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.val_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.val_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.val_shift",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_101": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(spec, B, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.val_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.val_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.val_center",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "spec_from_time",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_221": {
                "msg": {
                    "value": "msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SNR {:.2f} AUC {:.4f}'.format(sum(err_snrs) / eval_i, auc_)",
                            "Call"
                        ],
                        [
                            "'Need an exported model glob that resolves to at least 1 directory'",
                            "str"
                        ]
                    ]
                }
            },
            "Graph_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_50": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tf.saved_model.tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "exported_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted(glob.glob(os.path.join(args.model_root, '*')))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_64": {
                "variable": {
                    "value": "clip_probas",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "prob_wake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_probas[:, :, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "clip_probas",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_66": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_76": {
                "value": {
                    "value": "librosa_window_fn(win_length, n_fft)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_49": {
                "graph": {
                    "value": "g_1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tf_record_iterator_130": {
                "path": {
                    "value": "tfrecord_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_tfrecord_files",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "attack_trial.py": {
        "tensorflow": {
            "get_default_graph_87": {
                "variable": {
                    "value": "g_combined",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_88": {
                "variable": {
                    "value": "combined_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g_combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_default_graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "combined_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, batch_item_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "time_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "export_meta_graph_91": {
                "variable": {
                    "value": "meta_graph2",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g_2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "export_meta_graph_95": {
                "variable": {
                    "value": "meta_graph1",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g_1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "labels_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_101": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=out_final, labels=labels_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_104": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "input_td_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, batch_item_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "time_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stft_68": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "signals": {
                    "value": "input_td_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, batch_item_length), name='time_input')",
                            "Call"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "hop_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "160",
                            "int"
                        ]
                    ]
                },
                "fft_length": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "window_fn": {
                    "value": "mywindow_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mywindow_fn",
                            "Call"
                        ]
                    ]
                },
                "pad_end": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "STFT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_77": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td_placeholder, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.data_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.data_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_80": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td_placeholder, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.data_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.data_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_83": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td_placeholder, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.data_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.data_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.data_shift",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_84": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td_placeholder, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.data_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.data_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.data_center",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "spec_from_time",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tf.saved_model.tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "exported_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted(glob.glob(args.exported_model_glob))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name(y_tensor_name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "flat_logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_53": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_63": {
                "value": {
                    "value": "librosa_window_fn(win_length, n_fft)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_101": {
                "logits": {
                    "value": "out_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_combined.get_tensor_by_name('flat_logits:0')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_190": {
                "msg": {
                    "value": "msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'[{:03d}] Mask acc {:.4f}/{:.4f} ({:.4f}/{:.4f}). Det acc {:.4f}/{:.4f} ({:.4f}/{:.4f}). SNR {:.2f} ({:.2f})'.format(n, mask_acc_0, mask_acc_1, sum(mask_accs0) / n, sum(mask_accs1) / n, det_acc_0, det_acc_1, sum(det_accs0) / n, sum(det_accs1) / n, err_snr, sum(err_snrs) / n)",
                            "Call"
                        ],
                        [
                            "'Need an exported model glob that resolves to at least 1 directory'",
                            "str"
                        ]
                    ]
                }
            },
            "Session_37": {
                "graph": {
                    "value": "g_1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tf_record_iterator_135": {
                "path": {
                    "value": "tfrecord_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfrecord_files",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "attack_univ.py": {
        "tensorflow": {
            "get_default_graph_96": {
                "variable": {
                    "value": "g_combined",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_97": {
                "variable": {
                    "value": "combined_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g_combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_default_graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "combined_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, batch_item_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "time_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "export_meta_graph_100": {
                "variable": {
                    "value": "meta_graph2",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g_2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "export_meta_graph_104": {
                "variable": {
                    "value": "meta_graph1",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g_1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "labels_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_110": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=out_final, labels=labels_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_113": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "input_td_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, batch_item_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "time_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stft_75": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "signals": {
                    "value": "input_td_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, batch_item_length), name='time_input')",
                            "Call"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "hop_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "160",
                            "int"
                        ]
                    ]
                },
                "fft_length": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "window_fn": {
                    "value": "mywindow_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mywindow_fn",
                            "Call"
                        ]
                    ]
                },
                "pad_end": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "STFT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_84": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td_placeholder, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(spec, B, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.train_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.train_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td_placeholder, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(spec, B, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.train_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.train_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mel(sr, n_fft, n_mels=n_mels)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_89": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td_placeholder, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(spec, B, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.train_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.train_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_92": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td_placeholder, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(spec, B, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.train_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.train_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.train_shift",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_93": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td_placeholder, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(spec, B, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.train_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.train_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.train_center",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "spec_from_time",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_45": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tf.saved_model.tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "exported_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted(glob.glob(os.path.join(args.model_root, '*')))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name(y_tensor_name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "flat_logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_60": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_70": {
                "value": {
                    "value": "librosa_window_fn(win_length, n_fft)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_110": {
                "logits": {
                    "value": "out_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_combined.get_tensor_by_name('flat_logits:0')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_265": {
                "msg": {
                    "value": "msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'[itr {:05d}] [update {:05d}] Mask acc {:.4f}/{:.4f}. Det acc {:.4f}/{:.4f}. SNR {:.2f}'.format(itr, noise_updates, sum(mask_accs0) / eval_i, sum(mask_accs1) / eval_i, sum(det_accs0) / eval_i, sum(det_accs1) / eval_i, sum(err_snrs) / eval_i)",
                            "Call"
                        ],
                        [
                            "'Need an exported model glob that resolves to at least 1 directory'",
                            "str"
                        ]
                    ]
                }
            },
            "Session_44": {
                "graph": {
                    "value": "g_1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tf_record_iterator_166": {
                "path": {
                    "value": "tfrecord_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_tfrecord_files",
                            "variable"
                        ],
                        [
                            "eval_tfrecord_files",
                            "variable"
                        ]
                    ]
                }
            },
            "tf_record_iterator_143": {
                "path": {
                    "value": "tfrecord_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_tfrecord_files",
                            "variable"
                        ],
                        [
                            "eval_tfrecord_files",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "attack_univ_music.py": {
        "tensorflow": {
            "get_default_graph_97": {
                "variable": {
                    "value": "g_combined",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_98": {
                "variable": {
                    "value": "combined_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g_combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_default_graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "combined_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, batch_item_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "time_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "export_meta_graph_101": {
                "variable": {
                    "value": "meta_graph2",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g_2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "export_meta_graph_105": {
                "variable": {
                    "value": "meta_graph1",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g_1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "labels_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=out_final, labels=labels_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_114": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "input_td_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, batch_item_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "time_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stft_76": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "signals": {
                    "value": "input_td_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, batch_item_length), name='time_input')",
                            "Call"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "hop_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "160",
                            "int"
                        ]
                    ]
                },
                "fft_length": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "window_fn": {
                    "value": "mywindow_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mywindow_fn",
                            "Call"
                        ]
                    ]
                },
                "pad_end": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "STFT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_85": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td_placeholder, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(spec, B, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.train_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.train_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td_placeholder, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(spec, B, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.train_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.train_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mel(sr, n_fft, n_mels=n_mels)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_90": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td_placeholder, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(spec, B, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.train_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.train_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_93": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td_placeholder, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(spec, B, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.train_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.train_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.train_shift",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_94": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(input_td_placeholder, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(spec, B, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.subtract(spec, args.train_shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(spec, args.train_center, name='spec_from_time')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.train_center",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "spec_from_time",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_46": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tf.saved_model.tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "exported_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted(glob.glob(os.path.join(args.model_root, '*')))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name(y_tensor_name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "flat_logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_61": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_71": {
                "value": {
                    "value": "librosa_window_fn(win_length, n_fft)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_111": {
                "logits": {
                    "value": "out_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_combined.get_tensor_by_name('flat_logits:0')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_300": {
                "msg": {
                    "value": "msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'[itr {:05d}] [update {:05d}] Mask acc {:.4f}/{:.4f}. Det acc {:.4f}/{:.4f}. SNR {:.2f}'.format(itr, noise_updates, sum(mask_accs0) / eval_i, sum(mask_accs1) / eval_i, sum(det_accs0) / eval_i, sum(det_accs1) / eval_i, sum(err_snrs) / eval_i)",
                            "Call"
                        ],
                        [
                            "'Need an exported model glob that resolves to at least 1 directory'",
                            "str"
                        ]
                    ]
                }
            },
            "Session_45": {
                "graph": {
                    "value": "g_1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tf_record_iterator_167": {
                "path": {
                    "value": "tfrecord_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_tfrecord_files",
                            "variable"
                        ],
                        [
                            "eval_tfrecord_files",
                            "variable"
                        ]
                    ]
                }
            },
            "tf_record_iterator_144": {
                "path": {
                    "value": "tfrecord_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_tfrecord_files",
                            "variable"
                        ],
                        [
                            "eval_tfrecord_files",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "build_audio_tf_records.py": {
        "tensorflow": {
            "ConfigProto_28": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_144": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(samples, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_145": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.cast(samples, tf.float32), 0)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, ((0, 0), (n_fft // 2, n_fft // 2)), 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.cast(samples, tf.float32), 0)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, ((0, 0), (n_fft // 2, n_fft // 2)), 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "((0, 0), (n_fft // 2, n_fft // 2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stft_156": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "signals": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.cast(samples, tf.float32), 0)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, ((0, 0), (n_fft // 2, n_fft // 2)), 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.cast(samples, tf.float32), 0)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, ((0, 0), (n_fft // 2, n_fft // 2)), 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "hop_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hop_length",
                            "Method Argument"
                        ],
                        [
                            "hop_length",
                            "Method Argument"
                        ],
                        [
                            "hop_length",
                            "Method Argument"
                        ],
                        [
                            "hop_length",
                            "Method Argument"
                        ],
                        [
                            "hop_length",
                            "Method Argument"
                        ]
                    ]
                },
                "fft_length": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "window_fn": {
                    "value": "mywindow_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mywindow_fn",
                            "Call"
                        ],
                        [
                            "mywindow_fn",
                            "Call"
                        ]
                    ]
                },
                "pad_end": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "STFT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_165": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(x, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.signal.stft(x, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_182": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(samples, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_183": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.cast(samples, tf.float32), 0)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, ((0, 0), (n_fft // 2, n_fft // 2)), 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.cast(samples, tf.float32), 0)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, ((0, 0), (n_fft // 2, n_fft // 2)), 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "((0, 0), (n_fft // 2, n_fft // 2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stft_194": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "signals": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.cast(samples, tf.float32), 0)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, ((0, 0), (n_fft // 2, n_fft // 2)), 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.cast(samples, tf.float32), 0)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, ((0, 0), (n_fft // 2, n_fft // 2)), 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "hop_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hop_length",
                            "Method Argument"
                        ],
                        [
                            "hop_length",
                            "Method Argument"
                        ],
                        [
                            "hop_length",
                            "Method Argument"
                        ],
                        [
                            "hop_length",
                            "Method Argument"
                        ],
                        [
                            "hop_length",
                            "Method Argument"
                        ]
                    ]
                },
                "fft_length": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "window_fn": {
                    "value": "mywindow_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mywindow_fn",
                            "Call"
                        ],
                        [
                            "mywindow_fn",
                            "Call"
                        ]
                    ]
                },
                "pad_end": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "STFT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_203": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(x, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.signal.stft(x, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_205": {
                "variable": {
                    "value": "lfbe",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(x, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.signal.stft(x, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mel(sr, n_fft, n_mels=n_mels)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Feature_238": {
                "variable": {
                    "value": "feature[spectrogram]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "float_list": {
                    "value": "example_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audio2feature(samples, feature_type, win_length=win_length, hop_length=hop_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_241": {
                "variable": {
                    "value": "feature[spectrogram_label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "example_feature_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audio_labels2feature_labels(samples_label, feature_type, win_length=win_length, hop_length=hop_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_253": {
                "variable": {
                    "value": "feature[audio_label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=samples_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_256": {
                "variable": {
                    "value": "example_proto",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "executing_eagerly_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_eager_execution_30": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_99": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_104": {
                "float_list": {
                    "value": "tf.train.FloatList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_109": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatList_131": {
                "value": {
                    "value": "feat.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_169": {
                "a": {
                    "value": "tf.squeeze(spec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_209": {
                "a": {
                    "value": "tf.squeeze(lfbe)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_219": {
                "value": {
                    "value": "labs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_labels2spectrogam_labels(samples_label, **kwargs)",
                            "Call"
                        ],
                        [
                            "augment_audio_with_words(None, None, n_file, rand_p_duration, frequency_multiplier, example_length, target_dBFS=-15.0)",
                            "Call"
                        ],
                        [
                            "augment_audio_with_words(p_file, p_start_end, n_file, rand_p_duration, frequency_multiplier, example_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_268": {
                "variable": {
                    "value": "record_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "os.path.join(output_dir, record_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_144": {
                "x": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf.read(wav_file)",
                            "Call"
                        ],
                        [
                            "pad_center(samples, len(samples) + padding)",
                            "Call"
                        ],
                        [
                            "frame(samples, frame_length=example_length, hop_length=example_hop)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_154": {
                "value": {
                    "value": "librosa_window_fn(win_length, n_fft)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_182": {
                "x": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf.read(wav_file)",
                            "Call"
                        ],
                        [
                            "pad_center(samples, len(samples) + padding)",
                            "Call"
                        ],
                        [
                            "frame(samples, frame_length=example_length, hop_length=example_hop)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_192": {
                "value": {
                    "value": "librosa_window_fn(win_length, n_fft)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_97": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BytesList_99": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_104": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_109": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_253": {
                "value": {
                    "value": "samples_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples_label",
                            "Method Argument"
                        ],
                        [
                            "samples_label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Features_257": {
                "feature": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "squeeze_169": {
                "input": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(x, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.signal.stft(x, frame_length=n_fft, frame_step=hop_length, fft_length=n_fft, window_fn=mywindow_fn, pad_end=False, name='STFT')",
                            "Call"
                        ],
                        [
                            "tf.abs(spec)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_209": {
                "input": {
                    "value": "lfbe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(spec, B, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "lfbe ** 0.3",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "fst_3d.py": {
        "tensorflow": {}
    },
    "imperceptible_attack.py": {
        "tensorflow": {
            "placeholder_28": {
                "variable": {
                    "value": "self.spec_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_spec",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.target_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "self.psd_max_ori",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "psd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.th",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "masking_threshold",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, h, w), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "delta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.ones((batch_size, 1, 1), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "rescale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.ones(batch_size, dtype=np.float32) * 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_41": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t": {
                    "value": "self.new_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-2 ** 15",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "2 ** 15 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "self.output_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.output_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_48": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.target_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.output_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_49": {
                "variable": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_59": {
                "variable": {
                    "value": "self.loss_th",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.loss_th_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_61": {
                "variable": {
                    "value": "self.optimizer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_stage1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_64": {
                "variable": {
                    "value": "self.optimizer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_stage2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_67": {
                "variable": {
                    "value": "self.train2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self.train21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.train22",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_25": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_56": {
                "variable": {
                    "value": "loss_th",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(logits_delta - self.th[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_57": {
                "variable": {
                    "value": "loss_th",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_th",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attack.attack_stage2(adv, th_batch, psd_max_batch, verbose=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.relu(logits_delta - self.th[i]))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(loss_th, dim=0)",
                            "Call"
                        ],
                        [
                            "[np.inf] * self.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_75": {
                "ckpt_dir_or_file": {
                    "value": "warm_start_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "warm_start()",
                            "Call"
                        ],
                        [
                            "warm_start()",
                            "Call"
                        ]
                    ]
                },
                "assignment_map": {
                    "value": "id_assignment_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "warm_start()",
                            "Call"
                        ],
                        [
                            "warm_start()",
                            "Call"
                        ]
                    ]
                }
            },
            "init_from_checkpoint_148": {
                "ckpt_dir_or_file": {
                    "value": "warm_start_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "warm_start()",
                            "Call"
                        ],
                        [
                            "warm_start()",
                            "Call"
                        ]
                    ]
                },
                "assignment_map": {
                    "value": "id_assignment_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "warm_start()",
                            "Call"
                        ],
                        [
                            "warm_start()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_value_39": {
                "t": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-initial_bound",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "initial_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.08",
                            "float"
                        ]
                    ]
                }
            },
            "initialize_all_variables_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_79": {
                "ref": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones((self.batch_size, 1, 1), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_80": {
                "ref": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.zeros((self.batch_size, h, w), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "initialize_all_variables_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_151": {
                "ref": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones((self.batch_size, 1, 1), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_153": {
                "ref": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(self.batch_size, dtype=np.float64) * 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_156": {
                "ref": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(batched_input.shape)",
                            "Call"
                        ],
                        [
                            "adv_example - normalize(batched_input)",
                            "BinOp"
                        ],
                        [
                            "normalize(np.load('pgd adversarial examples.npy')) - normalize(batched_input)",
                            "BinOp"
                        ],
                        [
                            "adv",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_56": {
                "features": {
                    "value": "logits_delta - self.th[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_159": {
                "input_tensor": {
                    "value": "self.loss_th",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_127": {
                "ref": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "rescale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(self.rescale)",
                            "Call"
                        ],
                        [
                            "sess.run(self.rescale)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_224": {
                "ref": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(self.alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_218": {
                "ref": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(self.alpha)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "networks/deepvoice.py": {
        "tensorflow": {
            "get_variable_32": {
                "variable": {
                    "value": "lookup_table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lookup_table",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_39": {
                "params": {
                    "value": "lookup_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('lookup_table', dtype=tf.float32, shape=[vocab_size, num_units], initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.concat((tf.zeros(shape=[1, num_units]), lookup_table[1:, :]), 0)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [pad_len, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv1d_173": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_196": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(inputs=inputs, decay=decay, center=True, scale=True, updates_collections=None, is_training=is_training, scope=scope, reuse=reuse, fused=False)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inputs=inputs, decay=decay, center=True, scale=True, updates_collections=None, is_training=is_training, scope=scope, zero_debias_moving_mean=True, fused=True, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, -1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell, cell_bw, inputs, sequence_length=seqlens, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell, inputs, sequence_length=seqlens, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell_with_attention, inputs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs, units=num_units[0], activation=tf.nn.relu, name='dense1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=is_training, name='dropout1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(outputs, units=num_units[1], activation=tf.nn.relu, name='dense2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=is_training, name='dropout2')",
                            "Call"
                        ],
                        [
                            "H * T + inputs * C",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GRUCell_220": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.get_shape()[-1]",
                            "Subscript"
                        ],
                        [
                            "num_units",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_257": {
                "variable": {
                    "value": "decoder_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.get_shape()[-1]",
                            "Subscript"
                        ],
                        [
                            "num_units",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dynamic_rnn_259": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_with_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.seq2seq.AttentionWrapper(decoder_cell, attention_mechanism, num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [pad_len, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_276": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [pad_len, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "num_units[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.get_shape()[-1]",
                            "Subscript"
                        ],
                        [
                            "num_units",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_277": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(inputs=inputs, decay=decay, center=True, scale=True, updates_collections=None, is_training=is_training, scope=scope, reuse=reuse, fused=False)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inputs=inputs, decay=decay, center=True, scale=True, updates_collections=None, is_training=is_training, scope=scope, zero_debias_moving_mean=True, fused=True, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, -1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell, cell_bw, inputs, sequence_length=seqlens, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell, inputs, sequence_length=seqlens, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell_with_attention, inputs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs, units=num_units[0], activation=tf.nn.relu, name='dense1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=is_training, name='dropout1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(outputs, units=num_units[1], activation=tf.nn.relu, name='dense2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=is_training, name='dropout2')",
                            "Call"
                        ],
                        [
                            "H * T + inputs * C",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "dropout1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_278": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(inputs=inputs, decay=decay, center=True, scale=True, updates_collections=None, is_training=is_training, scope=scope, reuse=reuse, fused=False)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inputs=inputs, decay=decay, center=True, scale=True, updates_collections=None, is_training=is_training, scope=scope, zero_debias_moving_mean=True, fused=True, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, -1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell, cell_bw, inputs, sequence_length=seqlens, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell, inputs, sequence_length=seqlens, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell_with_attention, inputs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs, units=num_units[0], activation=tf.nn.relu, name='dense1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=is_training, name='dropout1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(outputs, units=num_units[1], activation=tf.nn.relu, name='dense2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=is_training, name='dropout2')",
                            "Call"
                        ],
                        [
                            "H * T + inputs * C",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "num_units[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.get_shape()[-1]",
                            "Subscript"
                        ],
                        [
                            "num_units",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_279": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(inputs=inputs, decay=decay, center=True, scale=True, updates_collections=None, is_training=is_training, scope=scope, reuse=reuse, fused=False)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inputs=inputs, decay=decay, center=True, scale=True, updates_collections=None, is_training=is_training, scope=scope, zero_debias_moving_mean=True, fused=True, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, -1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell, cell_bw, inputs, sequence_length=seqlens, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell, inputs, sequence_length=seqlens, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell_with_attention, inputs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs, units=num_units[0], activation=tf.nn.relu, name='dense1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=is_training, name='dropout1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(outputs, units=num_units[1], activation=tf.nn.relu, name='dense2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=is_training, name='dropout2')",
                            "Call"
                        ],
                        [
                            "H * T + inputs * C",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "dropout2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_301": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [pad_len, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.get_shape()[-1]",
                            "Subscript"
                        ],
                        [
                            "num_units",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_302": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [pad_len, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.get_shape()[-1]",
                            "Subscript"
                        ],
                        [
                            "num_units",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(-1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling1d_316": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(input, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + input",
                            "BinOp"
                        ],
                        [
                            "highwaynet(out, num_units=hidden_units, scope='highwaynet_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'normalize'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d_banks'",
                            "Method Argument"
                        ],
                        [
                            "'gru'",
                            "Method Argument"
                        ],
                        [
                            "'attention_decoder'",
                            "Method Argument"
                        ],
                        [
                            "'prenet'",
                            "Method Argument"
                        ],
                        [
                            "'highwaynet'",
                            "Method Argument"
                        ],
                        [
                            "'cbhg'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_37": {
                "variable": {
                    "value": "lookup_table",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.zeros(shape=[1, num_units]), lookup_table[1:, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'normalize'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d_banks'",
                            "Method Argument"
                        ],
                        [
                            "'gru'",
                            "Method Argument"
                        ],
                        [
                            "'attention_decoder'",
                            "Method Argument"
                        ],
                        [
                            "'prenet'",
                            "Method Argument"
                        ],
                        [
                            "'highwaynet'",
                            "Method Argument"
                        ],
                        [
                            "'cbhg'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_163": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [pad_len, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_len, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'normalize'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d_banks'",
                            "Method Argument"
                        ],
                        [
                            "'gru'",
                            "Method Argument"
                        ],
                        [
                            "'attention_decoder'",
                            "Method Argument"
                        ],
                        [
                            "'prenet'",
                            "Method Argument"
                        ],
                        [
                            "'highwaynet'",
                            "Method Argument"
                        ],
                        [
                            "'cbhg'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'normalize'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d_banks'",
                            "Method Argument"
                        ],
                        [
                            "'gru'",
                            "Method Argument"
                        ],
                        [
                            "'attention_decoder'",
                            "Method Argument"
                        ],
                        [
                            "'prenet'",
                            "Method Argument"
                        ],
                        [
                            "'highwaynet'",
                            "Method Argument"
                        ],
                        [
                            "'cbhg'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_222": {
                "variable": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.get_shape()[-1]",
                            "Subscript"
                        ],
                        [
                            "num_units",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bidirectional_dynamic_rnn_223": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(num_units)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [pad_len, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "seqlens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_228": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.GRUCell(num_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [pad_len, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "seqlens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'normalize'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d_banks'",
                            "Method Argument"
                        ],
                        [
                            "'gru'",
                            "Method Argument"
                        ],
                        [
                            "'attention_decoder'",
                            "Method Argument"
                        ],
                        [
                            "'prenet'",
                            "Method Argument"
                        ],
                        [
                            "'highwaynet'",
                            "Method Argument"
                        ],
                        [
                            "'cbhg'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_275": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'normalize'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d_banks'",
                            "Method Argument"
                        ],
                        [
                            "'gru'",
                            "Method Argument"
                        ],
                        [
                            "'attention_decoder'",
                            "Method Argument"
                        ],
                        [
                            "'prenet'",
                            "Method Argument"
                        ],
                        [
                            "'highwaynet'",
                            "Method Argument"
                        ],
                        [
                            "'cbhg'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_300": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'normalize'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d_banks'",
                            "Method Argument"
                        ],
                        [
                            "'gru'",
                            "Method Argument"
                        ],
                        [
                            "'attention_decoder'",
                            "Method Argument"
                        ],
                        [
                            "'prenet'",
                            "Method Argument"
                        ],
                        [
                            "'highwaynet'",
                            "Method Argument"
                        ],
                        [
                            "'cbhg'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_309": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'normalize'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d_banks'",
                            "Method Argument"
                        ],
                        [
                            "'gru'",
                            "Method Argument"
                        ],
                        [
                            "'attention_decoder'",
                            "Method Argument"
                        ],
                        [
                            "'prenet'",
                            "Method Argument"
                        ],
                        [
                            "'highwaynet'",
                            "Method Argument"
                        ],
                        [
                            "'cbhg'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_82": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [pad_len, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_83": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [pad_len, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_99": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(inputs=inputs, decay=decay, center=True, scale=True, updates_collections=None, is_training=is_training, scope=scope, reuse=reuse, fused=False)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inputs=inputs, decay=decay, center=True, scale=True, updates_collections=None, is_training=is_training, scope=scope, zero_debias_moving_mean=True, fused=True, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, -1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell, cell_bw, inputs, sequence_length=seqlens, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell, inputs, sequence_length=seqlens, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell_with_attention, inputs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs, units=num_units[0], activation=tf.nn.relu, name='dense1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=is_training, name='dropout1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(outputs, units=num_units[1], activation=tf.nn.relu, name='dense2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=is_training, name='dropout2')",
                            "Call"
                        ],
                        [
                            "H * T + inputs * C",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_118": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [pad_len, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[reduction_axis]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_122": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_226": {
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(inputs=inputs, decay=decay, center=True, scale=True, updates_collections=None, is_training=is_training, scope=scope, reuse=reuse, fused=False)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inputs=inputs, decay=decay, center=True, scale=True, updates_collections=None, is_training=is_training, scope=scope, zero_debias_moving_mean=True, fused=True, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, -1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell, cell_bw, inputs, sequence_length=seqlens, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell, inputs, sequence_length=seqlens, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell_with_attention, inputs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs, units=num_units[0], activation=tf.nn.relu, name='dense1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=is_training, name='dropout1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(outputs, units=num_units[1], activation=tf.nn.relu, name='dense2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=is_training, name='dropout2')",
                            "Call"
                        ],
                        [
                            "H * T + inputs * C",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_35": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_85": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(inputs, [[0, 0], [pad_len, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_101": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(inputs=inputs, decay=decay, center=True, scale=True, updates_collections=None, is_training=is_training, scope=scope, reuse=reuse, fused=False)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(inputs=inputs, decay=decay, center=True, scale=True, updates_collections=None, is_training=is_training, scope=scope, zero_debias_moving_mean=True, fused=True, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, -1)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell, cell_bw, inputs, sequence_length=seqlens, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell, inputs, sequence_length=seqlens, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell_with_attention, inputs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs, units=num_units[0], activation=tf.nn.relu, name='dense1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=is_training, name='dropout1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(outputs, units=num_units[1], activation=tf.nn.relu, name='dense2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=is_training, name='dropout2')",
                            "Call"
                        ],
                        [
                            "H * T + inputs * C",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'embedding'",
                            "Method Argument"
                        ],
                        [
                            "'normalize'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d'",
                            "Method Argument"
                        ],
                        [
                            "'conv1d_banks'",
                            "Method Argument"
                        ],
                        [
                            "'gru'",
                            "Method Argument"
                        ],
                        [
                            "'attention_decoder'",
                            "Method Argument"
                        ],
                        [
                            "'prenet'",
                            "Method Argument"
                        ],
                        [
                            "'highwaynet'",
                            "Method Argument"
                        ],
                        [
                            "'cbhg'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "'num_{}'.format(k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_302": {
                "value": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "shape": {
                    "value": "[1, num_units]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "networks/highway.py": {
        "tensorflow": {
            "dense_21": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape()[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_22": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.get_shape()[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(-1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dense2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'highwaynet'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_22": {
                "value": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "networks/highway_network.py": {
        "tensorflow": {}
    },
    "networks/spectrogram_data.py": {
        "tensorflow": {
            "parse_single_example_9": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "serialized_example",
                            "Method Argument"
                        ],
                        [
                            "serialized_example",
                            "Method Argument"
                        ],
                        [
                            "serialized_example",
                            "Method Argument"
                        ]
                    ]
                },
                "features": {
                    "value": "{'spectrogram': tf.FixedLenFeature([h * w], tf.float32), 'spectrogram_label': tf.FixedLenFeature([w], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cast_16": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['spectrogram_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_17": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['spectrogram']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(spec, (h, w))",
                            "Call"
                        ],
                        [
                            "features['spectrogram']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(spec, (h, in_w))",
                            "Call"
                        ],
                        [
                            "features['spectrogram']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(spec, (h, in_w))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "parse_single_example_27": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "serialized_example",
                            "Method Argument"
                        ],
                        [
                            "serialized_example",
                            "Method Argument"
                        ],
                        [
                            "serialized_example",
                            "Method Argument"
                        ]
                    ]
                },
                "features": {
                    "value": "{'spectrogram': tf.FixedLenFeature([h * in_w], tf.float32), 'spectrogram_label': tf.FixedLenFeature([in_w], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cast_34": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['spectrogram_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['spectrogram']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(spec, (h, w))",
                            "Call"
                        ],
                        [
                            "features['spectrogram']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(spec, (h, in_w))",
                            "Call"
                        ],
                        [
                            "features['spectrogram']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(spec, (h, in_w))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(h, in_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "parse_single_example_57": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "serialized_example",
                            "Method Argument"
                        ],
                        [
                            "serialized_example",
                            "Method Argument"
                        ],
                        [
                            "serialized_example",
                            "Method Argument"
                        ]
                    ]
                },
                "features": {
                    "value": "{'spectrogram': tf.FixedLenFeature([h * in_w], tf.float32), 'spectrogram_label': tf.FixedLenFeature([in_w], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cast_64": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['spectrogram_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['spectrogram']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(spec, (h, w))",
                            "Call"
                        ],
                        [
                            "features['spectrogram']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(spec, (h, in_w))",
                            "Call"
                        ],
                        [
                            "features['spectrogram']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(spec, (h, in_w))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(h, in_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "glob_97": {
                "variable": {
                    "value": "tfrecord_files",
                    "type": "variable",
                    "possible_values": []
                },
                "pattern": {
                    "value": "os.path.join(tfrecord_dir, '*.tfrecord')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordDataset_99": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfrecord_files",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.gfile.glob(os.path.join(tfrecord_dir, '*.tfrecord'))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_130": {
                "variable": {
                    "value": "serialized_tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_114": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.parse_single_example(serialized_example, features={'spectrogram': tf.FixedLenFeature([h * w], tf.float32), 'spectrogram_label': tf.FixedLenFeature([w], tf.int64)})",
                            "Call"
                        ],
                        [
                            "tf.parse_single_example(serialized_example, features={'spectrogram': tf.FixedLenFeature([h * in_w], tf.float32), 'spectrogram_label': tf.FixedLenFeature([in_w], tf.int64)})",
                            "Call"
                        ],
                        [
                            "tf.parse_single_example(serialized_example, features={'spectrogram': tf.FixedLenFeature([h * in_w], tf.float32), 'spectrogram_label': tf.FixedLenFeature([in_w], tf.int64)})",
                            "Call"
                        ],
                        [
                            "iterator.get_next()",
                            "Call"
                        ],
                        [
                            "tf.subtract(features, shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(features, center)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "divide_116": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.parse_single_example(serialized_example, features={'spectrogram': tf.FixedLenFeature([h * w], tf.float32), 'spectrogram_label': tf.FixedLenFeature([w], tf.int64)})",
                            "Call"
                        ],
                        [
                            "tf.parse_single_example(serialized_example, features={'spectrogram': tf.FixedLenFeature([h * in_w], tf.float32), 'spectrogram_label': tf.FixedLenFeature([in_w], tf.int64)})",
                            "Call"
                        ],
                        [
                            "tf.parse_single_example(serialized_example, features={'spectrogram': tf.FixedLenFeature([h * in_w], tf.float32), 'spectrogram_label': tf.FixedLenFeature([in_w], tf.int64)})",
                            "Call"
                        ],
                        [
                            "iterator.get_next()",
                            "Call"
                        ],
                        [
                            "tf.subtract(features, shift)",
                            "Call"
                        ],
                        [
                            "tf.divide(features, center)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ServingInputReceiver_133": {
                "features": {
                    "value": "model_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "user_input",
                            "variable"
                        ]
                    ]
                },
                "receiver_tensors": {
                    "value": "user_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'spectrograms': serialized_tf_example}",
                            "Dict"
                        ]
                    ]
                }
            },
            "FixedLenFeature_12": {
                "shape": {
                    "value": "[h * w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_13": {
                "shape": {
                    "value": "[w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_30": {
                "shape": {
                    "value": "[h * in_w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_31": {
                "shape": {
                    "value": "[in_w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_60": {
                "shape": {
                    "value": "[h * in_w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_61": {
                "shape": {
                    "value": "[in_w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "networks/spectrogram_networks.py": {
        "tensorflow": {
            "max_pooling1d_21": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_31": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_33": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_34": {
                "variable": {
                    "value": "prenet_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_39": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_40": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stft_mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stft_mag",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, nrate, nscale])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(U1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, sz - 1, sz - 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, h, w, nrate, nscale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_57": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, nrate, nscale])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(U1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, sz - 1, sz - 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 4, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_59": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, nrate, nscale])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(U1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, sz - 1, sz - 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pooling3d_62": {
                "variable": {
                    "value": "rategram",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, nrate, nscale])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(U1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, sz - 1, sz - 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(1, nscale, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, nscale, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "rategram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rategram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling3d(U1, (1, nscale, 1), (1, nscale, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rategram, [-1, nrate, h, w])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (1, ds, 1), (1, ds, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rategram, [-1, nsz, h, w])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nrate, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pooling3d_65": {
                "variable": {
                    "value": "scalegram",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, nrate, nscale])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(U1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, sz - 1, sz - 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(nrate, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(nrate, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "scalegram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scalegram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling3d(U1, (nrate, 1, 1), (nrate, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(scalegram, [-1, nscale, h, w])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (ds, 1, 1), (ds, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(scalegram, [-1, nsz, h, w])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nscale, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rategram, scalegram]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_69": {
                "variable": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(ry + iy, 0.5)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_82": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_118": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_152": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_162": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, spec_w // 2, bottleneck_size * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_172": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_194": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_195": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_207": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_211": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, spec_w // 2, bottleneck_size * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_218": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_240": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_241": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_250": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_254": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, spec_w // 2, bottleneck_size * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_261": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_285": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_286": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_296": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_309": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_317": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_346": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(z, (-1, spec_h, spec_w))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_350": {
                "variable": {
                    "value": "x_r",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z[:, :spec_h // 2, :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x_r, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_351": {
                "variable": {
                    "value": "x_i",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z[:, spec_h // 2:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x_i, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_373": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_386": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_394": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_423": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_427": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(ry + iy, 0.5)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_428": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, spec_w, spec_h * ncort]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_441": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_454": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_462": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_491": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_495": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_496": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=hidden_units * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cortical, 1, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "ncort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_499": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(ry + iy, 0.5)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_500": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, spec_w, spec_h * ncort]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_513": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_526": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_534": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_563": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_567": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_568": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=hidden_units * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cortical, 1, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "ncort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_569": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=hidden_units * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cortical, 1, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_572": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(ry + iy, 0.5)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_573": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, spec_w, spec_h * ncort]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_586": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_599": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_607": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_636": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_640": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_641": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=hidden_units * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cortical, 1, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "ncort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_642": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=hidden_units * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cortical, 1, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_645": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(ry + iy, 0.5)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_646": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, spec_w, spec_h * ncort]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_659": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_672": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_680": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_709": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_713": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_714": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=hidden_units * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cortical, 1, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "ncort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_715": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=hidden_units * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cortical, 1, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_718": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(ry + iy, 0.5)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_719": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, spec_w, spec_h * ncort]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_733": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_746": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_754": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_783": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_784": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_795": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "ncort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_796": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=hidden_units * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cortical, 1, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_799": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(ry + iy, 0.5)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_800": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, spec_w, spec_h * ncort]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_813": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_826": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_834": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_864": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_865": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_877": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "relu_879": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_881": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_888": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_901": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_909": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_938": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_942": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_943": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(ry + iy, 0.5)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_946": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=hidden_units * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cortical, 1, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_947": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, spec_w, spec_h * 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_960": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_973": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_981": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1010": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_1014": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_1015": {
                "variable": {
                    "value": "res1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_1016": {
                "variable": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(ry + iy, 0.5)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_1019": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, 4, 1, 1, activation=None, name='conv1a')",
                            "Call"
                        ],
                        [
                            "res1 + res2",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1020": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, spec_w, spec_h * 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_1033": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1046": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_1054": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1083": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_1086": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(ry + iy, 0.5)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1087": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, spec_w, spec_h * ncort]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_1088": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "transpose_1090": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_1091": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=hidden_units * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cortical, 1, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "relu_1094": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_1102": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1115": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_1123": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1152": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_1155": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(ry + iy, 0.5)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1156": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, spec_w, spec_h * ncort]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_1157": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_1158": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "transpose_1160": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_1161": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(res, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, ncort, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(res, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=hidden_units * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(cortical, 1, 1, 1, activation=None, name='conv1')",
                            "Call"
                        ],
                        [
                            "x + res",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(res, units=hidden_units, activation=None)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "relu_1164": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_1171": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1184": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_1192": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1221": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_1225": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(ry + iy, 0.5)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1226": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, spec_w, spec_h * ncort]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_1239": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1252": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_1260": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1289": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_1293": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(ry + iy, 0.5)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1294": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, spec_w, spec_h * ncort]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_1307": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bottleneck_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "hidden_units // 2",
                            "BinOp"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ],
                        [
                            "28",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1320": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_1328": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_1351": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, spec_h, spec_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_1352": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_1359": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, nrate, nscale])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(U1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, sz - 1, sz - 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, h, w, sz - 1, sz - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1361": {
                "variable": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, nrate, nscale])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(U1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, sz - 1, sz - 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 4, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pooling3d_1364": {
                "variable": {
                    "value": "rategram",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, nrate, nscale])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(U1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, sz - 1, sz - 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(1, ds, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, ds, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling3d_1365": {
                "variable": {
                    "value": "scalegram",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "U1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, nrate, nscale])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(U1, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "scat2d(x, psi, layer_params)",
                            "Call"
                        ],
                        [
                            "tf.reshape(U1, [-1, h, w, sz - 1, sz - 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(U1, [0, 3, 4, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(ds, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(ds, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_1368": {
                "variable": {
                    "value": "rategram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rategram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling3d(U1, (1, nscale, 1), (1, nscale, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rategram, [-1, nrate, h, w])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (1, ds, 1), (1, ds, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rategram, [-1, nsz, h, w])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nsz, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1369": {
                "variable": {
                    "value": "scalegram",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scalegram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling3d(U1, (nrate, 1, 1), (nrate, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(scalegram, [-1, nscale, h, w])",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling3d(U1, (ds, 1, 1), (ds, 1, 1), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.reshape(scalegram, [-1, nsz, h, w])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nsz, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_1371": {
                "variable": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rategram, scalegram]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_1372": {
                "variable": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(ry + iy, 0.5)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_1374": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(ry + iy, 0.5)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "concat_rategram_scalegram(x, rv, sv, filter_size, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat([rategram, scalegram], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "(7, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_1375": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(cortical, nfeat, (7, 1), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, (1, 7), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 4, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 8, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_1376": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(cortical, nfeat, (7, 1), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, (1, 7), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 4, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 8, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_1377": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(cortical, nfeat, (7, 1), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, (1, 7), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 4, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 8, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_1378": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(cortical, nfeat, (7, 1), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, (1, 7), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 4, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 8, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_1379": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(cortical, nfeat, (7, 1), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, (1, 7), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 4, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 8, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_1381": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(cortical, nfeat, (7, 1), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, (1, 7), 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 1, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 4, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv, nfeat, 5, 8, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_1382": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, 300)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_1383": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, 300)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_1384": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "CBHG",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_100": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "HG",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_133": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "amazon_net",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_174": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "CBHBH",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_220": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "amazon_net",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_263": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_283": {
                "name_or_scope": {
                    "value": "CBHBH",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_319": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_344": {
                "name_or_scope": {
                    "value": "CBHBH",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_354": {
                "variable": {
                    "value": "wrxr",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z[:, :spec_h // 2, :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x_r, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "wr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_355": {
                "variable": {
                    "value": "wixi",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z[:, spec_h // 2:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x_i, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "wi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_357": {
                "variable": {
                    "value": "wrxi",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z[:, spec_h // 2:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x_i, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "wr",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_358": {
                "variable": {
                    "value": "wixr",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z[:, :spec_h // 2, :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x_r, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "wi",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_363": {
                "x": {
                    "value": "iy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wrxi + wixr",
                            "BinOp"
                        ],
                        [
                            "tf.layers.conv2d(x, ncort, filter_size, 1, activation=tf.math.square, name='imag', padding='SAME')",
                            "Call"
                        ],
                        [
                            "wrx + wix",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_396": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_421": {
                "name_or_scope": {
                    "value": "CBHBH",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_464": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_489": {
                "name_or_scope": {
                    "value": "CBHBH",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_536": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_561": {
                "name_or_scope": {
                    "value": "CBHBH",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_609": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_634": {
                "name_or_scope": {
                    "value": "CBHBH",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_682": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_707": {
                "name_or_scope": {
                    "value": "CBHBH",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_724": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_756": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_781": {
                "name_or_scope": {
                    "value": "CBHBH",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_788": {
                "variable": {
                    "value": "ry",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "ncort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.math.square",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "real",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_789": {
                "variable": {
                    "value": "iy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "ncort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ],
                        [
                            "len(rv) + 2 * len(sv)",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.math.square",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "imag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_791": {
                "variable": {
                    "value": "cortical",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ry + iy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_836": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_862": {
                "name_or_scope": {
                    "value": "CBHBH",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_869": {
                "variable": {
                    "value": "wrx",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "wr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_870": {
                "variable": {
                    "value": "wix",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(stft_mag, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "x_dict['spectrograms']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, spec_h, spec_w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "wi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_875": {
                "x": {
                    "value": "iy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wrxi + wixr",
                            "BinOp"
                        ],
                        [
                            "tf.layers.conv2d(x, ncort, filter_size, 1, activation=tf.math.square, name='imag', padding='SAME')",
                            "Call"
                        ],
                        [
                            "wrx + wix",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_911": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_936": {
                "name_or_scope": {
                    "value": "CBHBH",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_983": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_1008": {
                "name_or_scope": {
                    "value": "CBHBH",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_1056": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_1081": {
                "name_or_scope": {
                    "value": "CBHBH",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_1125": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_1150": {
                "name_or_scope": {
                    "value": "CBHBH",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_1194": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_1219": {
                "name_or_scope": {
                    "value": "CBHBH",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_1262": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_1287": {
                "name_or_scope": {
                    "value": "CBHBH",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_1330": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_1349": {
                "name_or_scope": {
                    "value": "wst_net_v1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "prenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "gru",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "classification",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_102": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "prenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "gru",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "classification",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_135": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1d_banks(prenet_out, K=num_banks, num_units=hidden_units, norm_type=norm_type, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling1d(out, 2, 1, padding='same')",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_1')",
                            "Call"
                        ],
                        [
                            "normalize(out, type=norm_type, is_training=is_training, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv1d(out, hidden_units, 3, scope='conv1d_2')",
                            "Call"
                        ],
                        [
                            "out + prenet_out",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out, rate=dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "gru(out, hidden_units, True)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "conv_bank_1d(out, num_banks, hidden_units, norm_type, is_training)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w // 2, bottleneck_size * 2])",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pow(tf.pow(ry, 2) + tf.pow(iy, 2), 0.5)",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, 0.2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "cortical + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 1])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(res1, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * 4])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=hidden_units, activation=None)",
                            "Call"
                        ],
                        [
                            "out + res",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(cortical, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, spec_w, spec_h * ncort])",
                            "Call"
                        ],
                        [
                            "simple_prenet(out, hidden_units, is_training, dropout)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=hidden_units, scope='highwaynet_featextractor_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, units=bottleneck_size, activation=None, name='bottleneck')",
                            "Call"
                        ],
                        [
                            "tf.concat(contexts, axis=2)",
                            "Call"
                        ],
                        [
                            "highway_block(out, num_units=new_num_units, scope='highwaynet_classifier_{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, n_classes)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc, n_classes)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "prenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "conv_bank_1d",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_288": {
                "name_or_scope": {
                    "value": "prenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_353": {
                "name_or_scope": {
                    "value": "complex_projection",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_365": {
                "name_or_scope": {
                    "value": "prenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_432": {
                "name_or_scope": {
                    "value": "prenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_504": {
                "name_or_scope": {
                    "value": "prenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_577": {
                "name_or_scope": {
                    "value": "prenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_650": {
                "name_or_scope": {
                    "value": "prenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_723": {
                "name_or_scope": {
                    "value": "prenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_787": {
                "name_or_scope": {
                    "value": "cortical_approx",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_804": {
                "name_or_scope": {
                    "value": "prenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_867": {
                "name_or_scope": {
                    "value": "cortical_approx",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_951": {
                "name_or_scope": {
                    "value": "prenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1024": {
                "name_or_scope": {
                    "value": "prenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1230": {
                "name_or_scope": {
                    "value": "prenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_1298": {
                "name_or_scope": {
                    "value": "prenet",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/calculate_dataset_mean_std_dev.py": {
        "tensorflow": {
            "tf_record_iterator_30": {
                "path": {
                    "value": "tfrecord_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm(tfrecord_files)",
                            "Call"
                        ],
                        [
                            "tqdm(tfrecord_files)",
                            "Call"
                        ],
                        [
                            "tqdm(tfrecord_files)",
                            "Call"
                        ]
                    ]
                }
            },
            "tf_record_iterator_48": {
                "path": {
                    "value": "tfrecord_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm(tfrecord_files)",
                            "Call"
                        ],
                        [
                            "tqdm(tfrecord_files)",
                            "Call"
                        ],
                        [
                            "tqdm(tfrecord_files)",
                            "Call"
                        ]
                    ]
                }
            },
            "tf_record_iterator_70": {
                "path": {
                    "value": "tfrecord_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm(tfrecord_files)",
                            "Call"
                        ],
                        [
                            "tqdm(tfrecord_files)",
                            "Call"
                        ],
                        [
                            "tqdm(tfrecord_files)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/stream_inference.py": {
        "tensorflow": {
            "Session_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_238": {
                "export_dir": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tf.saved_model.tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "args.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "spectrogram_NN.py": {
        "tensorflow": {
            "TrainSpec_181": {
                "variable": {
                    "value": "train_spec_dnn",
                    "type": "variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "lambda : input_fn(args.train_data_root, bs, train_parser, shift=train_mean, center=train_std)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "max_steps": {
                    "value": "args.max_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BestExporter_191": {
                "variable": {
                    "value": "acc_exporter",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "best_acc_exporter",
                    "type": "str",
                    "possible_values": []
                },
                "serving_input_receiver_fn": {
                    "value": "saved_model_serving_input_receiver_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(identity_serving_input_receiver_fn, spec_h, inference_width)",
                            "Call"
                        ]
                    ]
                },
                "exports_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "compare_fn": {
                    "value": "partial(_key_better, key='mask_accuracy', higher_is_better=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BestExporter_196": {
                "variable": {
                    "value": "MR_exporter",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "MR_exporter",
                    "type": "str",
                    "possible_values": []
                },
                "serving_input_receiver_fn": {
                    "value": "saved_model_serving_input_receiver_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(identity_serving_input_receiver_fn, spec_h, inference_width)",
                            "Call"
                        ]
                    ]
                },
                "exports_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "compare_fn": {
                    "value": "partial(_key_better, key='whole_clip/sensitivity_at_1_FA_per_hour', higher_is_better=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BestExporter_201": {
                "variable": {
                    "value": "FAR_exporter",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "FAR_exporter",
                    "type": "str",
                    "possible_values": []
                },
                "serving_input_receiver_fn": {
                    "value": "saved_model_serving_input_receiver_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(identity_serving_input_receiver_fn, spec_h, inference_width)",
                            "Call"
                        ]
                    ]
                },
                "exports_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "compare_fn": {
                    "value": "partial(_key_better, key='whole_clip/specificity_at_sensitivity_0.9900', higher_is_better=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BestExporter_206": {
                "variable": {
                    "value": "loss_exporter",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "best_loss_exporter",
                    "type": "str",
                    "possible_values": []
                },
                "serving_input_receiver_fn": {
                    "value": "saved_model_serving_input_receiver_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(identity_serving_input_receiver_fn, spec_h, inference_width)",
                            "Call"
                        ]
                    ]
                },
                "exports_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LatestExporter_210": {
                "variable": {
                    "value": "latest_exporter",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "latest_exporter",
                    "type": "str",
                    "possible_values": []
                },
                "serving_input_receiver_fn": {
                    "value": "saved_model_serving_input_receiver_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(identity_serving_input_receiver_fn, spec_h, inference_width)",
                            "Call"
                        ]
                    ]
                },
                "exports_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "EvalSpec_217": {
                "variable": {
                    "value": "eval_spec_dnn",
                    "type": "variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "lambda : input_fn(args.val_data_root, bs, eval_parser, infinite=False, shift=val_mean, center=val_std)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "steps": {
                    "value": "90",
                    "type": "int",
                    "possible_values": []
                },
                "exporters": {
                    "value": "exporters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[MR_exporter, FAR_exporter, acc_exporter, loss_exporter, latest_exporter]",
                            "List"
                        ]
                    ]
                },
                "throttle_secs": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_105": {
                "variable": {
                    "value": "pred_probas",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(features, args.dropout, reuse=True, is_training=False, n_classes=n_classes, spec_h=spec_h, spec_w=network_spec_w)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_106": {
                "variable": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(features, args.dropout, reuse=True, is_training=False, n_classes=n_classes, spec_h=spec_h, spec_w=network_spec_w)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_107": {
                "variable": {
                    "value": "pred_wake",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_122": {
                "variable": {
                    "value": "acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[:, n_left:-n_right]",
                            "Subscript"
                        ],
                        [
                            "labels + 1",
                            "BinOp"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_val, axis=2, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_123": {
                "variable": {
                    "value": "acc2_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "detection_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.maximum(0, labels)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "pred_wake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0, pred_classes - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "clip_probas",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "prob_wake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_probas[:, :, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_129": {
                "variable": {
                    "value": "clip_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "detection_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.maximum(0, labels)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "EstimatorSpec_150": {
                "variable": {
                    "value": "estim_specs",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_val, axis=2, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=labels))",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss_op, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "myevalops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'mask_accuracy': acc_op, 'detection_accuracy': acc2_op}",
                            "Dict"
                        ]
                    ]
                },
                "evaluation_hooks": {
                    "value": "eval_hooks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Estimator_172": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn",
                            "Call"
                        ]
                    ]
                },
                "model_dir": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "warm_start_from": {
                    "value": "warm_starts[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sorted(glob.glob(args.warm_start_from)) if args.warm_start_from is not None else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Estimator_179": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn",
                            "Call"
                        ]
                    ]
                },
                "model_dir": {
                    "value": "args.model_root",
                    "type": "Attribute",
                    "possible_values": []
                },
                "warm_start_from": {
                    "value": "warm_start_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "warm_starts[-1] if warm_starts is not None and len(warm_starts) else None",
                            "IfExp"
                        ],
                        [
                            "os.path.join(warm_start_from, 'variables/variables')",
                            "Call"
                        ],
                        [
                            "tf.estimator.WarmStartSettings(ckpt_to_initialize_from=warm_start_from, vars_to_warm_start='.*')",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_76": {
                "variable": {
                    "value": "detection_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[:, n_left:-n_right]",
                            "Subscript"
                        ],
                        [
                            "labels + 1",
                            "BinOp"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "false_positives_at_thresholds_136": {
                "variable": {
                    "value": "myevalops[whole_clip/false_positives]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "clip_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(detection_labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "clip_probas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(prob_wake, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "thresholds": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(0.0, 1.0, 1.0 / 1000, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "false_negatives_at_thresholds_137": {
                "variable": {
                    "value": "myevalops[whole_clip/false_negatives]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "clip_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(detection_labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "clip_probas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(prob_wake, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "thresholds": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(0.0, 1.0, 1.0 / 1000, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sensitivity_at_specificity_144": {
                "variable": {
                    "value": "myevalops[whole_clip/sensitivity_at_1_FA_per_hour]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "clip_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(detection_labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "clip_probas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(prob_wake, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "specificity": {
                    "value": "specificity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(n_eval_examples_per_hour - 1) / n_eval_examples_per_hour",
                            "BinOp"
                        ],
                        [
                            "(n_eval_examples_per_hour * 10 - 1) / (n_eval_examples_per_hour * 10)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sensitivity_at_specificity_146": {
                "variable": {
                    "value": "myevalops[whole_clip/sensitivity_at_1_FA_per_10_hours]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "clip_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(detection_labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "clip_probas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(prob_wake, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "specificity": {
                    "value": "specificity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(n_eval_examples_per_hour - 1) / n_eval_examples_per_hour",
                            "BinOp"
                        ],
                        [
                            "(n_eval_examples_per_hour * 10 - 1) / (n_eval_examples_per_hour * 10)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "WarmStartSettings_178": {
                "variable": {
                    "value": "warm_start_from",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_to_initialize_from": {
                    "value": "warm_start_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "warm_starts[-1] if warm_starts is not None and len(warm_starts) else None",
                            "IfExp"
                        ],
                        [
                            "os.path.join(warm_start_from, 'variables/variables')",
                            "Call"
                        ],
                        [
                            "tf.estimator.WarmStartSettings(ckpt_to_initialize_from=warm_start_from, vars_to_warm_start='.*')",
                            "Call"
                        ]
                    ]
                },
                "vars_to_warm_start": {
                    "value": ".*",
                    "type": "str",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_102": {
                "ckpt_dir_or_file": {
                    "value": "args.pretrain_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "pretrain_assignment_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'CBHG/prenet/': 'CBHBH/prenet/', 'CBHG/highwaynet_featextractor_0/': 'CBHBH/highwaynet_featextractor_0/', 'CBHG/highwaynet_featextractor_1/': 'CBHBH/highwaynet_featextractor_1/', 'CBHG/highwaynet_featextractor_2/': 'CBHBH/highwaynet_featextractor_2/', 'CBHG/highwaynet_featextractor_3/': 'CBHBH/highwaynet_featextractor_3/'}",
                            "Dict"
                        ]
                    ]
                }
            },
            "EstimatorSpec_112": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "{'softmax': pred_probas, 'logits': logits_val}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_115": {
                "logits": {
                    "value": "logits_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(features, args.dropout, reuse=False, is_training=True, n_classes=n_classes, spec_h=spec_h, spec_w=network_spec_w)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[:, n_left:-n_right]",
                            "Subscript"
                        ],
                        [
                            "labels + 1",
                            "BinOp"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "specificity_at_sensitivity_141": {
                "variable": {
                    "value": "myevalops[whole_clip/specificity_at_sensitivity_%.4f % sensitivity]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "clip_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(detection_labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "clip_probas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(prob_wake, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "sensitivity": {
                    "value": "sensitivity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sensitivities",
                            "variable"
                        ]
                    ]
                }
            },
            "train_and_evaluate_231": {
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.Estimator(model_fn, model_dir=args.model_root, warm_start_from=warm_start_from)",
                            "Call"
                        ],
                        [
                            "tf.estimator.Estimator(model_fn, model_dir=None, warm_start_from=warm_starts[-1])",
                            "Call"
                        ]
                    ]
                },
                "train_spec": {
                    "value": "train_spec_dnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.TrainSpec(input_fn=lambda : input_fn(args.train_data_root, bs, train_parser, shift=train_mean, center=train_std), max_steps=args.max_steps)",
                            "Call"
                        ]
                    ]
                },
                "eval_spec": {
                    "value": "eval_spec_dnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.EvalSpec(input_fn=lambda : input_fn(args.val_data_root, bs, eval_parser, infinite=False, shift=val_mean, center=val_std), steps=90, exporters=exporters, throttle_secs=300)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_global_step_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "spectrogram_phoneme_classifier.py": {
        "tensorflow": {
            "Estimator_124": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn",
                            "Call"
                        ]
                    ]
                },
                "model_dir": {
                    "value": "args.model_root",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TrainSpec_126": {
                "variable": {
                    "value": "train_spec_dnn",
                    "type": "variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "lambda : input_fn(args.train_data_root, bs, train_parser, shift=args.train_shift, center=args.train_center)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "max_steps": {
                    "value": "args.max_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BestExporter_134": {
                "variable": {
                    "value": "acc_exporter",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "best_acc_exporter",
                    "type": "str",
                    "possible_values": []
                },
                "serving_input_receiver_fn": {
                    "value": "saved_model_serving_input_receiver_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(identity_serving_input_receiver_fn, spec_h, spec_cut_w)",
                            "Call"
                        ]
                    ]
                },
                "exports_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "compare_fn": {
                    "value": "_acc_higher",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_acc_higher",
                            "Call"
                        ]
                    ]
                }
            },
            "BestExporter_139": {
                "variable": {
                    "value": "loss_exporter",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "best_loss_exporter",
                    "type": "str",
                    "possible_values": []
                },
                "serving_input_receiver_fn": {
                    "value": "saved_model_serving_input_receiver_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(identity_serving_input_receiver_fn, spec_h, spec_cut_w)",
                            "Call"
                        ]
                    ]
                },
                "exports_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LatestExporter_143": {
                "variable": {
                    "value": "latest_exporter",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "latest_exporter",
                    "type": "str",
                    "possible_values": []
                },
                "serving_input_receiver_fn": {
                    "value": "saved_model_serving_input_receiver_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(identity_serving_input_receiver_fn, spec_h, spec_cut_w)",
                            "Call"
                        ]
                    ]
                },
                "exports_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "EvalSpec_149": {
                "variable": {
                    "value": "eval_spec_dnn",
                    "type": "variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "lambda : input_fn(args.val_data_root, bs, eval_parser, shift=args.val_shift, center=args.val_center)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "steps": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "exporters": {
                    "value": "exporters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[acc_exporter, loss_exporter, latest_exporter]",
                            "List"
                        ]
                    ]
                }
            },
            "softmax_58": {
                "variable": {
                    "value": "pred_probas",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(features, args.dropout, reuse=True, is_training=False, n_classes=n_classes, spec_h=spec_h, spec_w=spec_cut_w)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_59": {
                "variable": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(features, args.dropout, reuse=True, is_training=False, n_classes=n_classes, spec_h=spec_h, spec_w=spec_cut_w)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_66": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_68": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "accuracy_73": {
                "variable": {
                    "value": "acc_op",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[:, n_left:-n_right]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_val, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_87": {
                "variable": {
                    "value": "phones_table",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[true_phones, pred_phones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "confusion",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_classes, n_classes], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "confusion",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_92": {
                "variable": {
                    "value": "batch_confusion",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.reshape(labels, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.reshape(pred_classes, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(phns)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "batch_confusion",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "confusion_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(confusion, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, n_classes, n_classes, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SummarySaverHook_102": {
                "variable": {
                    "value": "eval_summary_hook",
                    "type": "variable",
                    "possible_values": []
                },
                "save_steps": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_dir": {
                    "value": "args.model_root + '/eval'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "summary_op": {
                    "value": "tf.summary.merge_all()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "EstimatorSpec_111": {
                "variable": {
                    "value": "estim_specs",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_val, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_train, labels=labels))",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss_op, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "myevalops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'phoneme_accuracy': acc_op}",
                            "Dict"
                        ]
                    ]
                },
                "evaluation_hooks": {
                    "value": "eval_hooks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "train_and_evaluate_153": {
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.Estimator(model_fn, model_dir=args.model_root)",
                            "Call"
                        ]
                    ]
                },
                "train_spec": {
                    "value": "train_spec_dnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.TrainSpec(input_fn=lambda : input_fn(args.train_data_root, bs, train_parser, shift=args.train_shift, center=args.train_center), max_steps=args.max_steps)",
                            "Call"
                        ]
                    ]
                },
                "eval_spec": {
                    "value": "eval_spec_dnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.EvalSpec(input_fn=lambda : input_fn(args.val_data_root, bs, eval_parser, shift=args.val_shift, center=args.val_center), steps=45, exporters=exporters)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_80": {
                "variable": {
                    "value": "as_str",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "phns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_vocab()",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indexes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_81": {
                "variable": {
                    "value": "phones_sep",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "as_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(phns, indexes)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sz",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "join_82": {
                "variable": {
                    "value": "phones_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "phones_sep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(as_str, num_or_size_splits=sz, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "separator": {
                    "value": "-",
                    "type": "str",
                    "possible_values": []
                }
            },
            "text_88": {
                "name": {
                    "value": "true_vs_pred_phones",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "phones_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([true_phones, pred_phones], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_99": {
                "name": {
                    "value": "confusion",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.log(1 + confusion_img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "EstimatorSpec_63": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "pred_probas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits_val)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_66": {
                "logits": {
                    "value": "logits_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network(features, args.dropout, reuse=False, is_training=True, n_classes=n_classes, spec_h=spec_h, spec_w=spec_cut_w)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[:, n_left:-n_right]",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_91": {
                "shape": {
                    "value": "[n_classes, n_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "tensor": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits_val, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "confusion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([n_classes, n_classes], dtype=tf.int32), name='confusion')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_99": {
                "x": {
                    "value": "1 + confusion_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_global_step_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "st_2d.py": {
        "tensorflow": {
            "conv2d_14": {
                "variable": {
                    "value": "real1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "win_params.nfilt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "layer_params.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer_params.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(win_params.filters.real, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_28": {
                "variable": {
                    "value": "imag1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "win_params.nfilt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "layer_params.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer_params.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(win_params.filters.imag, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "abs_42": {
                "x": {
                    "value": "tf.complex(real1, imag1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "complex_42": {
                "real": {
                    "value": "real1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, win_params.nfilt, win_params.kernel_size[:2], strides=layer_params.strides, padding=layer_params.padding, dilation_rate=(1, 1), activation=None, use_bias=False, kernel_initializer=tf.constant_initializer(win_params.filters.real, dtype=tf.float32), trainable=False, name=None)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "imag1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, win_params.nfilt, win_params.kernel_size[:2], strides=layer_params.strides, padding=layer_params.padding, dilation_rate=(1, 1), activation=None, use_bias=False, kernel_initializer=tf.constant_initializer(win_params.filters.imag, dtype=tf.float32), trainable=False, name=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_23": {
                "value": {
                    "value": "win_params.filters.real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_37": {
                "value": {
                    "value": "win_params.filters.imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tool.py": {
        "tensorflow": {
            "log_242": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_243": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(10, dtype=numerator.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_253": {
                "variable": {
                    "value": "log_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * tf_log10(tf.maximum(amin, S))",
                            "BinOp"
                        ],
                        [
                            "log_spec - 10.0 * tf_log10(tf.maximum(amin, ref))",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(log_spec, tf.reduce_max(log_spec) - top_db)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_max(log_spec) - top_db",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_270": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(audio, ((0, 0), (n_fft // 2, n_fft // 2)), 'REFLECT')",
                            "Call"
                        ],
                        [
                            "audio",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "((0, 0), (n_fft // 2, n_fft // 2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_271": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.signal.stft(signals=audio, frame_length=win_length, frame_step=hop_length, fft_length=n_fft)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_274": {
                "variable": {
                    "value": "spec_db",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "spec_db",
                    "type": "variable",
                    "possible_values": [
                        [
                            "power_to_db(spec ** 2)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(spec_db, -55, 65)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-55",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "65",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_279": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eg_np.features.feature['spectrogram'].float_list.value",
                            "Attribute"
                        ],
                        [
                            "np.array(spec).reshape(spec_h, -1)",
                            "Call"
                        ],
                        [
                            "spec ** (1 / 0.3)",
                            "BinOp"
                        ],
                        [
                            "tf.math.abs(tf.signal.stft(signals=audio, frame_length=win_length, frame_step=hop_length, fft_length=n_fft))",
                            "Call"
                        ],
                        [
                            "db_to_power(spec_db) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "spec ** 0.3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(spec)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_236": {
                "variable": {
                    "value": "psd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "abs(win / window_size)",
                            "Call"
                        ],
                        [
                            "self.scale * tf.abs(x / self.window_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_261": {
                "x": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "0.1 * S_db",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tf_record_iterator_45": {
                "path": {
                    "value": "tfrecord_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfrecord_files[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_243": {
                "value": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "numerator.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stft_271": {
                "signals": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(audio, ((0, 0), (n_fft // 2, n_fft // 2)), 'REFLECT')",
                            "Call"
                        ],
                        [
                            "audio",
                            "Method Argument"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "win_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "hop_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "160",
                            "Method Argument"
                        ]
                    ]
                },
                "fft_length": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_std_23": {
                "input_tensor": {
                    "value": "specs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "specs ** 0.3",
                            "BinOp"
                        ],
                        [
                            "specs * std_dev",
                            "BinOp"
                        ],
                        [
                            "specs + mean",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(specs, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "specs",
                            "Method Argument"
                        ],
                        [
                            "specs",
                            "Method Argument"
                        ],
                        [
                            "specs",
                            "Method Argument"
                        ],
                        [
                            "specs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_235": {
                "x": {
                    "value": "x / self.window_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_251": {
                "x": {
                    "value": "amin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-16",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_252": {
                "x": {
                    "value": "amin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-16",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_253": {
                "input_tensor": {
                    "value": "log_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * tf_log10(tf.maximum(amin, S))",
                            "BinOp"
                        ],
                        [
                            "log_spec - 10.0 * tf_log10(tf.maximum(amin, ref))",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(log_spec, tf.reduce_max(log_spec) - top_db)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_23": {
                "input_tensor": {
                    "value": "specs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "specs ** 0.3",
                            "BinOp"
                        ],
                        [
                            "specs * std_dev",
                            "BinOp"
                        ],
                        [
                            "specs + mean",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(specs, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "specs",
                            "Method Argument"
                        ],
                        [
                            "specs",
                            "Method Argument"
                        ],
                        [
                            "specs",
                            "Method Argument"
                        ],
                        [
                            "specs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_237": {
                "x": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "9.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_237": {
                "tensor": {
                    "value": "psd_max_ori",
                    "type": "variable",
                    "possible_values": [
                        [
                            "psd_max_ori",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}