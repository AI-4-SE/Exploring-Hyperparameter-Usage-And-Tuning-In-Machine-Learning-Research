{
    "utils/tusimple_metric.py": {
        "sklearn": {
            "LinearRegression_8": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/config.py": {
        "torch": {}
    },
    "lib/datasets/lane_dataset.py": {
        "torch": {}
    },
    "lib/experiment.py": {
        "torch": {
            "SummaryWriter_20": {
                "variable": {
                    "value": "self.tensorboard_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(tensorboard_dir, exp_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_85": {
                "variable": {
                    "value": "train_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "train_state_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_checkpoint_path(epoch)",
                            "Call"
                        ],
                        [
                            "self.get_checkpoint_path(epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_94": {
                "obj": {
                    "value": "{'epoch': epoch, 'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "train_state_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_checkpoint_path(epoch)",
                            "Call"
                        ],
                        [
                            "self.get_checkpoint_path(epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_80": {
                "f": {
                    "value": "self.get_checkpoint_path(epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/focal_loss.py": {
        "torch": {
            "zeros_50": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_90": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-input_soft + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_93": {
                "variable": {
                    "value": "loss_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_one_hot * focal",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_43": {
                "obj": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_64": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_84": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_92": {
                "input": {
                    "value": "input_soft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(input, dim=1) + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_98": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(target_one_hot * focal, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_100": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(target_one_hot * focal, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/models/laneatt.py": {
        "torch": {
            "linspace_36": {
                "variable": {
                    "value": "self.anchor_ys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.n_offsets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_37": {
                "variable": {
                    "value": "self.anchor_cut_ys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.fmap_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "backbone_nb_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.anchor_feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.cls_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.anchor_feat_channels * self.fmap_h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.reg_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.anchor_feat_channels * self.fmap_h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_offsets + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.attention_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.anchor_feat_channels * self.fmap_h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(self.anchors) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_79": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_82": {
                "variable": {
                    "value": "attention_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "attention.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_83": {
                "variable": {
                    "value": "non_diag_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_matrix == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_87": {
                "variable": {
                    "value": "attention_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(batch_anchor_features, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(attention_matrix, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_87": {
                "input": {
                    "value": "batch_anchor_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cut_anchor_features(batch_features)",
                            "Call"
                        ],
                        [
                            "batch_anchor_features.view(-1, self.anchor_feat_channels * self.fmap_h)",
                            "Call"
                        ],
                        [
                            "batch_anchor_features.reshape(x.shape[0], len(self.anchors), -1)",
                            "Call"
                        ],
                        [
                            "batch_anchor_features.reshape(-1, self.anchor_feat_channels * self.fmap_h)",
                            "Call"
                        ],
                        [
                            "torch.cat((attention_features, batch_anchor_features), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.zeros((batch_size, n_proposals, n_fmaps, self.fmap_h, 1), device=features.device)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "batch_anchor_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(attention_features, batch_anchor_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "reg_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(*cls_logits.shape[:2], 5 + self.n_offsets)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_113": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SmoothL1Loss_140": {
                "variable": {
                    "value": "smooth_l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_213": {
                "variable": {
                    "value": "unclamped_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(self.anchors_cut[:, 5:] / self.stride).round().long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "repeat_interleave_215": {
                "variable": {
                    "value": "unclamped_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unclamped_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip((self.anchors_cut[:, 5:] / self.stride).round().long(), dims=(1,))",
                            "Call"
                        ],
                        [
                            "unclamped_xs.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(unclamped_xs, n_fmaps, dim=0).reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "unclamped_xs.reshape(n_proposals, n_fmaps, fmaps_h, 1)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "n_fmaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_215": {
                "variable": {
                    "value": "unclamped_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_216": {
                "variable": {
                    "value": "cut_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unclamped_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip((self.anchors_cut[:, 5:] / self.stride).round().long(), dims=(1,))",
                            "Call"
                        ],
                        [
                            "unclamped_xs.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(unclamped_xs, n_fmaps, dim=0).reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "unclamped_xs.reshape(n_proposals, n_fmaps, fmaps_h, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "fmaps_w - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_219": {
                "variable": {
                    "value": "cut_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "fmaps_h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "variable": {
                    "value": "batch_anchor_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, n_proposals, n_fmaps, self.fmap_h, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_260": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_anchors, 2 + 2 + 1 + self.n_offsets)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_261": {
                "variable": {
                    "value": "anchors_cut",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_anchors, 2 + 2 + 1 + self.fmap_h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_343": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_50": {
                "variable": {
                    "value": "anchors_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "anchors_freq_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_116": {
                "variable": {
                    "value": "anchor_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_proposals.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "proposals.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "all_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positives, negatives]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_273": {
                "variable": {
                    "value": "anchor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 + 2 + 1 + self.fmap_h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_276": {
                "variable": {
                    "value": "anchor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 + 2 + 1 + self.n_offsets",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_332": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lane_xs.reshape(-1, 1), lane_ys.reshape(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_332": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_347": {
                "variable": {
                    "value": "proposals[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "proposals[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_386": {
                "variable": {
                    "value": "backbone",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet34(pretrained=pretrained).children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "arange_185": {
                "variable": {
                    "value": "all_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_positives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(positives)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "variable": {
                    "value": "invalid_offsets_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_positives, 1 + self.n_offsets + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_222": {
                "start": {
                    "value": "n_fmaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "repeat_interleave_222": {
                "input": {
                    "value": "fmaps_h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_246": {
                "tensors": {
                    "value": "[left_cut, bottom_cut, right_cut]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_390": {
                "variable": {
                    "value": "backbone",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet18(pretrained=pretrained).children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "argsort_52": {
                "input": {
                    "value": "anchors_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(anchors_freq_path).cpu()",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_88": {
                "input": {
                    "value": "attention_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(attention.shape[1], device=x.device).repeat(x.shape[0], 1, 1)",
                            "Call"
                        ],
                        [
                            "attention_matrix[anchor_inds]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/matching.py": {
        "torch": {
            "repeat_interleave_18": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals_pad",
                            "Name"
                        ],
                        [
                            "torch.repeat_interleave(proposals, num_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "num_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "num_proposals * [targets]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_26": {
                "variable": {
                    "value": "starts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[:, 2] * model.n_strips",
                            "BinOp"
                        ]
                    ]
                }
            },
            "round_26": {
                "variable": {
                    "value": "starts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_37": {
                "variable": {
                    "value": "all_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "valid_offsets_mask.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "target_positives_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "positives.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_50": {
                "input": {
                    "value": "(targets - proposals) * valid_offsets_mask.float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_50": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/resnet.py": {
        "torch": {
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_70": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nms/setup.py": {
        "torch": {}
    },
    "lib/runner.py": {
        "torch": {
            "DataLoader_110": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg.get_dataset('train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.cfg['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "self._worker_init_fn_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg.get_dataset('test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.cfg['batch_size'] if not self.view else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "self._worker_init_fn_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_128": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg.get_dataset('val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.cfg['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "self._worker_init_fn_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "initial_seed_137": {
                "variable": {
                    "value": "torch_seed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "cfg['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_48": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/gen_anchor_mask.py": {
        "torch": {
            "zeros_15": {
                "variable": {
                    "value": "anchors_frequency",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(model.anchors)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[targets[:, 1] == 1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_42": {
                "obj": {
                    "value": "frequency",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_anchors_use_frequency(cfg, split='train', t_pos=30.0, t_neg=35.0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_65": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/speed.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "(1, 3, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_32": {
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/viz_dataset.py": {
        "torch": {
            "manual_seed_25": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}