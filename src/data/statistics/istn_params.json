{
    "istn-reg.py": {
        "torch": {
            "is_available_79": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_80": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + args.dev if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_145": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(itn.parameters()) + list(stn.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ],
                        [
                            "set_up_model_and_preprocessing('TRAINING', args)",
                            "Call"
                        ],
                        [
                            "set_up_model_and_preprocessing('TESTING', args)",
                            "Call"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mse_loss_198": {
                "variable": {
                    "value": "loss_stn_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "warped_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stn.warp_image(source)",
                            "Call"
                        ],
                        [
                            "sitk.GetImageFromArray(images_dict['warped_source'].cpu().squeeze().numpy())",
                            "Call"
                        ],
                        [
                            "sitk.GetImageFromArray(images_dict['warped_source'].cpu().squeeze().numpy())",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_samples['target'].to(config.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_199": {
                "variable": {
                    "value": "loss_stn_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "warped_source_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stn.warp_image(source_seg)",
                            "Call"
                        ],
                        [
                            "sitk.GetImageFromArray(images_dict['warped_source_seg'].cpu().squeeze().numpy())",
                            "Call"
                        ],
                        [
                            "sitk.GetImageFromArray(images_dict['warped_source_seg'].cpu().squeeze().numpy())",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_samples['target_seg'].to(config.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_201": {
                "variable": {
                    "value": "loss_stn_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "warped_source_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stn.warp_image(source_prime)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "itn(target)",
                            "Call"
                        ],
                        [
                            "target",
                            "variable"
                        ],
                        [
                            "target",
                            "variable"
                        ]
                    ]
                }
            },
            "DataLoader_252": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageSegRegDataset(args.train, args.train_seg, args.train_msk, normalizer_img=config.normalizer_img, normalizer_seg=config.normalizer_seg, resampler_img=config.resampler_img, resampler_seg=config.resampler_seg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_354": {
                "variable": {
                    "value": "dataloader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageSegRegDataset(args.test, args.test_seg, args.test_msk, normalizer_img=config.normalizer_img, normalizer_seg=config.normalizer_seg, resampler_img=config.resampler_img, resampler_seg=config.resampler_seg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_78": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_261": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageSegRegDataset(args.val, args.val_seg, args.val_msk, normalizer_img=config.normalizer_img, normalizer_seg=config.normalizer_seg, resampler_img=config.resampler_img, resampler_seg=config.resampler_seg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_330": {
                "obj": {
                    "value": "config.itn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + '/itn.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_331": {
                "obj": {
                    "value": "config.stn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + '/stn.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_178": {
                "tensors": {
                    "value": "(source_prime, target_prime)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_197": {
                "input": {
                    "value": "target_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "itn(target)",
                            "Call"
                        ],
                        [
                            "target",
                            "variable"
                        ],
                        [
                            "target",
                            "variable"
                        ]
                    ]
                },
                "target": {
                    "value": "target_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_samples['target_seg'].to(config.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_200": {
                "input": {
                    "value": "warped_source_seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stn.warp_image(source_seg)",
                            "Call"
                        ],
                        [
                            "sitk.GetImageFromArray(images_dict['warped_source_seg'].cpu().squeeze().numpy())",
                            "Call"
                        ],
                        [
                            "sitk.GetImageFromArray(images_dict['warped_source_seg'].cpu().squeeze().numpy())",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "itn(target)",
                            "Call"
                        ],
                        [
                            "target",
                            "variable"
                        ],
                        [
                            "target",
                            "variable"
                        ]
                    ]
                }
            },
            "load_364": {
                "f": {
                    "value": "args.model + '/itn.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_367": {
                "f": {
                    "value": "args.model + '/stn.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_370": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_419": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "refine_config.stn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "refine_config.config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_327": {
                "obj": {
                    "value": "config.itn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + '/itn_' + str(epoch) + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_328": {
                "obj": {
                    "value": "config.stn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + '/stn_' + str(epoch) + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_416": {
                "f": {
                    "value": "args.model + '/stn.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_84": {
                "device": {
                    "value": "int(args.dev)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pymira/img/datasets.py": {
        "torch": {
            "from_numpy_82": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sitk.GetArrayFromImage(sample['source'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_82": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sitk.GetArrayFromImage(sample['target'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_83": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "source_msk",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sitk.GetArrayFromImage(sample['source_msk'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "source_msk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "target_msk",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sitk.GetArrayFromImage(sample['target_msk'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_85": {
                "variable": {
                    "value": "target_msk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_190": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sitk.GetArrayFromImage(sample['source'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_190": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_191": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sitk.GetArrayFromImage(sample['target'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_191": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_192": {
                "variable": {
                    "value": "source_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sitk.GetArrayFromImage(sample['source_seg'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_192": {
                "variable": {
                    "value": "source_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_193": {
                "variable": {
                    "value": "target_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sitk.GetArrayFromImage(sample['target_seg'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_193": {
                "variable": {
                    "value": "target_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_194": {
                "variable": {
                    "value": "source_msk",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sitk.GetArrayFromImage(sample['source_msk'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_194": {
                "variable": {
                    "value": "source_msk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_195": {
                "variable": {
                    "value": "target_msk",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sitk.GetArrayFromImage(sample['target_msk'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_195": {
                "variable": {
                    "value": "target_msk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pymira/nets/itn.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.down1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.down2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv31",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_16": {
                "variable": {
                    "value": "self.up2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_18": {
                "variable": {
                    "value": "self.up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv13",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv14",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv15",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv11(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv12(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv21(x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv31(x3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv22(x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv13(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv14(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_45": {
                "variable": {
                    "value": "self.conv11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv3d_46": {
                "variable": {
                    "value": "self.conv12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv3d_47": {
                "variable": {
                    "value": "self.down1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv3d_48": {
                "variable": {
                    "value": "self.conv21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv3d_49": {
                "variable": {
                    "value": "self.down2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv3d_50": {
                "variable": {
                    "value": "self.conv31",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_51": {
                "variable": {
                    "value": "self.up2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv3d_52": {
                "variable": {
                    "value": "self.conv22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_53": {
                "variable": {
                    "value": "self.up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv3d_54": {
                "variable": {
                    "value": "self.conv13",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv3d_55": {
                "variable": {
                    "value": "self.conv14",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv3d_56": {
                "variable": {
                    "value": "self.conv15",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "relu_59": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv11(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv12(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv21(x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv31(x3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv22(x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv13(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv14(x1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pymira/nets/stn.py": {
        "torch": {
            "prod_13": {
                "variable": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(((torch.tensor(input_size) - 4) / 2 - 4) / 2 - 4) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 0, 0, 0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.translation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.rotation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.scaling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.shearing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_46": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_47": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv2(xs))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_48": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv3(xs))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "affine_grid_61": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "img.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_62": {
                "variable": {
                    "value": "wrp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.narrow(dim=1, start=0, length=1)",
                            "Call"
                        ],
                        [
                            "x.narrow(dim=1, start=0, length=1)",
                            "Call"
                        ],
                        [
                            "x.narrow(dim=1, start=0, length=1)",
                            "Call"
                        ],
                        [
                            "x.narrow(dim=1, start=0, length=1)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(self.theta, img.size()).to(self.device)",
                            "Call"
                        ],
                        [
                            "self.affine_grid(self.theta, img.size()).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "translation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[b, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[b, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_81": {
                "variable": {
                    "value": "rotation_matrix[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rot.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_83": {
                "variable": {
                    "value": "rotation_matrix[:, 1, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rot.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_84": {
                "variable": {
                    "value": "rotation_matrix[:, 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rot.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "scaling_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[b, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_93": {
                "variable": {
                    "value": "scaling_matrix[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "scale[:, 0].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_94": {
                "variable": {
                    "value": "scaling_matrix[:, 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "scale[:, 1].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "shearing_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[b, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_100": {
                "variable": {
                    "value": "shearing_matrix[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "shear.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_102": {
                "variable": {
                    "value": "shearing_matrix[:, 1, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "shear.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_103": {
                "variable": {
                    "value": "shearing_matrix[:, 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "shear.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_107": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shearing_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 3, 3], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.bmm(shearing_matrix_1, shearing_matrix_2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(shearing_matrix, shearing_matrix_3)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "scaling_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 3, 3], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros([b, 4, 4], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_108": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(shearing_matrix, scaling_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, torch.transpose(shearing_matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, translation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(shearing_matrix, scaling_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, torch.transpose(shearing_matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, translation_matrix)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(shearing_matrix, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_109": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(shearing_matrix, scaling_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, torch.transpose(shearing_matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, translation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(shearing_matrix, scaling_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, torch.transpose(shearing_matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, translation_matrix)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 3, 3], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.bmm(rotation_matrix_1, rotation_matrix_2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(rotation_matrix, rotation_matrix_3)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_110": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(shearing_matrix, scaling_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, torch.transpose(shearing_matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, translation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(shearing_matrix, scaling_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, torch.transpose(shearing_matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, translation_matrix)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "translation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 3, 3], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros([b, 4, 4], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "prod_174": {
                "variable": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(((torch.tensor(input_size) - 4) / 2 - 4) / 2 - 4) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_cp_parameters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_186": {
                "variable": {
                    "value": "h_s",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_187": {
                "variable": {
                    "value": "w_s",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_189": {
                "variable": {
                    "value": "(h_s, w_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[h_s, w_s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_191": {
                "variable": {
                    "value": "mesh_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w_s, h_s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_195": {
                "variable": {
                    "value": "kernel_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*self.control_point_spacing",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "conv_transpose2d_205": {
                "variable": {
                    "value": "displacement",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_222": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_223": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv2(xs))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_224": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv3(xs))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_240": {
                "variable": {
                    "value": "wrp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.narrow(dim=1, start=0, length=1)",
                            "Call"
                        ],
                        [
                            "x.narrow(dim=1, start=0, length=1)",
                            "Call"
                        ],
                        [
                            "x.narrow(dim=1, start=0, length=1)",
                            "Call"
                        ],
                        [
                            "x.narrow(dim=1, start=0, length=1)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "self.displacement_field",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "prod_250": {
                "variable": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(((torch.tensor(input_size) - 4) / 2 - 4) / 2 - 4) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_254": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_255": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_256": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_257": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_268": {
                "variable": {
                    "value": "self.translation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_269": {
                "variable": {
                    "value": "self.rotation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "self.scaling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_271": {
                "variable": {
                    "value": "self.shearing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool3d_287": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool3d_288": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv2(xs))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool3d_289": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv3(xs))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_291": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_303": {
                "variable": {
                    "value": "d_s",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_304": {
                "variable": {
                    "value": "h_s",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_305": {
                "variable": {
                    "value": "w_s",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_307": {
                "variable": {
                    "value": "(d_s, h_s, w_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[d_s, h_s, w_s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_308": {
                "variable": {
                    "value": "one_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-1, 1, w)",
                            "Call"
                        ],
                        [
                            "torch.meshgrid([h_s, w_s])",
                            "Call"
                        ],
                        [
                            "torch.linspace(-1, 1, w)",
                            "Call"
                        ],
                        [
                            "torch.meshgrid([d_s, h_s, w_s])",
                            "Call"
                        ],
                        [
                            "torch.linspace(-1, 1, w)",
                            "Call"
                        ],
                        [
                            "torch.meshgrid([d_s, h_s, w_s])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_310": {
                "variable": {
                    "value": "mesh_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w_s, h_s, d_s, one_s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bmm_320": {
                "variable": {
                    "value": "mesh_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "mesh_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([w_s, h_s])",
                            "Call"
                        ],
                        [
                            "torch.stack([w_s, h_s, d_s, one_s])",
                            "Call"
                        ],
                        [
                            "self.gen_3d_mesh_grid(d, h, w)",
                            "Call"
                        ],
                        [
                            "mesh_grid.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "mesh_grid.repeat(b, 1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "mesh_grid.view(b, 4, -1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(theta, mesh_grid)",
                            "Call"
                        ],
                        [
                            "mesh_grid.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.stack([w_s, h_s, d_s])",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_326": {
                "variable": {
                    "value": "wrp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.narrow(dim=1, start=0, length=1)",
                            "Call"
                        ],
                        [
                            "x.narrow(dim=1, start=0, length=1)",
                            "Call"
                        ],
                        [
                            "x.narrow(dim=1, start=0, length=1)",
                            "Call"
                        ],
                        [
                            "x.narrow(dim=1, start=0, length=1)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(self.theta, img.size()).to(self.device)",
                            "Call"
                        ],
                        [
                            "self.affine_grid(self.theta, img.size()).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_335": {
                "variable": {
                    "value": "translation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[b, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_348": {
                "variable": {
                    "value": "rotation_matrix_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[b, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_349": {
                "variable": {
                    "value": "rotation_matrix_1[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot[:, 0].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_351": {
                "variable": {
                    "value": "rotation_matrix_1[:, 1, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot[:, 0].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_352": {
                "variable": {
                    "value": "rotation_matrix_1[:, 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot[:, 0].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_357": {
                "variable": {
                    "value": "rotation_matrix_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[b, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_358": {
                "variable": {
                    "value": "rotation_matrix_2[:, 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot[:, 1].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_360": {
                "variable": {
                    "value": "rotation_matrix_2[:, 2, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot[:, 1].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_361": {
                "variable": {
                    "value": "rotation_matrix_2[:, 2, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot[:, 1].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_366": {
                "variable": {
                    "value": "rotation_matrix_3",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[b, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_367": {
                "variable": {
                    "value": "rotation_matrix_3[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot[:, 2].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_369": {
                "variable": {
                    "value": "rotation_matrix_3[:, 1, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot[:, 2].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_370": {
                "variable": {
                    "value": "rotation_matrix_3[:, 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot[:, 2].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_374": {
                "variable": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotation_matrix_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 4, 4], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rotation_matrix_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 4, 4], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_375": {
                "variable": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 3, 3], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.bmm(rotation_matrix_1, rotation_matrix_2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(rotation_matrix, rotation_matrix_3)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rotation_matrix_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 4, 4], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_380": {
                "variable": {
                    "value": "scaling_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[b, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_384": {
                "variable": {
                    "value": "scaling_matrix[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "scale[:, 0].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_385": {
                "variable": {
                    "value": "scaling_matrix[:, 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "scale[:, 1].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_386": {
                "variable": {
                    "value": "scaling_matrix[:, 2, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "scale[:, 2].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_393": {
                "variable": {
                    "value": "shearing_matrix_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[b, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_394": {
                "variable": {
                    "value": "shearing_matrix_1[:, 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "shear_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shear[:, 0].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_396": {
                "variable": {
                    "value": "shearing_matrix_1[:, 2, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "shear_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shear[:, 0].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_397": {
                "variable": {
                    "value": "shearing_matrix_1[:, 2, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "shear_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shear[:, 0].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_402": {
                "variable": {
                    "value": "shearing_matrix_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[b, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_403": {
                "variable": {
                    "value": "shearing_matrix_2[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "shear_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shear[:, 1].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_404": {
                "variable": {
                    "value": "shearing_matrix_2[:, 0, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "shear_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shear[:, 1].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_406": {
                "variable": {
                    "value": "shearing_matrix_2[:, 2, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "shear_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shear[:, 1].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_411": {
                "variable": {
                    "value": "shearing_matrix_3",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[b, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_412": {
                "variable": {
                    "value": "shearing_matrix_3[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "shear_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shear[:, 2].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_414": {
                "variable": {
                    "value": "shearing_matrix_3[:, 1, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "shear_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shear[:, 2].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_415": {
                "variable": {
                    "value": "shearing_matrix_3[:, 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "shear_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shear[:, 2].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_419": {
                "variable": {
                    "value": "shearing_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shearing_matrix_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 4, 4], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "shearing_matrix_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 4, 4], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_420": {
                "variable": {
                    "value": "shearing_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shearing_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 3, 3], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.bmm(shearing_matrix_1, shearing_matrix_2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(shearing_matrix, shearing_matrix_3)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "shearing_matrix_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 4, 4], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_423": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shearing_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 3, 3], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.bmm(shearing_matrix_1, shearing_matrix_2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(shearing_matrix, shearing_matrix_3)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "scaling_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 3, 3], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros([b, 4, 4], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_424": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(shearing_matrix, scaling_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, torch.transpose(shearing_matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, translation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(shearing_matrix, scaling_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, torch.transpose(shearing_matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, translation_matrix)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(shearing_matrix, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_425": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(shearing_matrix, scaling_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, torch.transpose(shearing_matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, translation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(shearing_matrix, scaling_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, torch.transpose(shearing_matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, translation_matrix)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 3, 3], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.bmm(rotation_matrix_1, rotation_matrix_2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(rotation_matrix, rotation_matrix_3)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_426": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(shearing_matrix, scaling_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, torch.transpose(shearing_matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, translation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(shearing_matrix, scaling_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, torch.transpose(shearing_matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.bmm(matrix, translation_matrix)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "translation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 3, 3], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.zeros([b, 4, 4], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "prod_501": {
                "variable": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(((torch.tensor(input_size) - 4) / 2 - 4) / 2 - 4) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_502": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_503": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_504": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_505": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * num_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_control_points",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_513": {
                "variable": {
                    "value": "d_s",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_514": {
                "variable": {
                    "value": "h_s",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_515": {
                "variable": {
                    "value": "w_s",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_517": {
                "variable": {
                    "value": "(d_s, h_s, w_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[d_s, h_s, w_s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_519": {
                "variable": {
                    "value": "mesh_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w_s, h_s, d_s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_523": {
                "variable": {
                    "value": "kernel_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*self.control_point_spacing",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "conv_transpose3d_533": {
                "variable": {
                    "value": "displacement",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool3d_552": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool3d_553": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv2(xs))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool3d_554": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.conv3(xs))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_571": {
                "variable": {
                    "value": "wrp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.narrow(dim=1, start=0, length=1)",
                            "Call"
                        ],
                        [
                            "x.narrow(dim=1, start=0, length=1)",
                            "Call"
                        ],
                        [
                            "x.narrow(dim=1, start=0, length=1)",
                            "Call"
                        ],
                        [
                            "x.narrow(dim=1, start=0, length=1)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "self.displacement_field",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_46": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_47": {
                "input": {
                    "value": "self.conv2(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "input": {
                    "value": "self.conv3(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_70": {
                "input": {
                    "value": "self.translation(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_79": {
                "input": {
                    "value": "self.rotation(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_82": {
                "input": {
                    "value": "rot.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_89": {
                "input": {
                    "value": "self.scaling(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_98": {
                "input": {
                    "value": "self.shearing(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_101": {
                "input": {
                    "value": "shear.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_108": {
                "input": {
                    "value": "shearing_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 3, 3], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.bmm(shearing_matrix_1, shearing_matrix_2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(shearing_matrix, shearing_matrix_3)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_222": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_223": {
                "input": {
                    "value": "self.conv2(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_224": {
                "input": {
                    "value": "self.conv3(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_228": {
                "input": {
                    "value": "self.fc(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_275": {
                "data": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "data": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_279": {
                "data": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "data": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_287": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_288": {
                "input": {
                    "value": "self.conv2(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_289": {
                "input": {
                    "value": "self.conv3(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_334": {
                "input": {
                    "value": "self.translation(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_345": {
                "input": {
                    "value": "self.rotation(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_350": {
                "input": {
                    "value": "angle_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot[:, 0].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_359": {
                "input": {
                    "value": "angle_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot[:, 1].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_368": {
                "input": {
                    "value": "angle_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot[:, 2].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_379": {
                "input": {
                    "value": "self.scaling(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_390": {
                "input": {
                    "value": "self.shearing(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_395": {
                "input": {
                    "value": "shear_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shear[:, 0].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_405": {
                "input": {
                    "value": "shear_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shear[:, 1].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_413": {
                "input": {
                    "value": "shear_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shear[:, 2].view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_424": {
                "input": {
                    "value": "shearing_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([b, 3, 3], dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.bmm(shearing_matrix_1, shearing_matrix_2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(shearing_matrix, shearing_matrix_3)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_552": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_553": {
                "input": {
                    "value": "self.conv2(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_554": {
                "input": {
                    "value": "self.conv3(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_556": {
                "input": {
                    "value": "torch.abs(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_559": {
                "input": {
                    "value": "self.fc(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_199": {
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_ones",
                            "variable"
                        ],
                        [
                            "F.conv2d(kernel, kernel_ones, padding=self.control_point_spacing.tolist()) / self.area",
                            "BinOp"
                        ],
                        [
                            "kernel_ones",
                            "variable"
                        ],
                        [
                            "F.conv3d(kernel, kernel_ones, padding=self.control_point_spacing.tolist()) / self.area",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(1, 1, *self.control_point_spacing)",
                            "Call"
                        ],
                        [
                            "torch.ones(1, 1, *self.control_point_spacing)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.control_point_spacing.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_527": {
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_ones",
                            "variable"
                        ],
                        [
                            "F.conv2d(kernel, kernel_ones, padding=self.control_point_spacing.tolist()) / self.area",
                            "BinOp"
                        ],
                        [
                            "kernel_ones",
                            "variable"
                        ],
                        [
                            "F.conv3d(kernel, kernel_ones, padding=self.control_point_spacing.tolist()) / self.area",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(1, 1, *self.control_point_spacing)",
                            "Call"
                        ],
                        [
                            "torch.ones(1, 1, *self.control_point_spacing)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.control_point_spacing.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_556": {
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(F.relu(self.conv2(xs)), 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(F.relu(self.conv3(xs)), 2)",
                            "Call"
                        ],
                        [
                            "xs.view(xs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc(xs))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(F.relu(self.conv2(xs)), 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(F.relu(self.conv3(xs)), 2)",
                            "Call"
                        ],
                        [
                            "xs.view(xs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.fc(xs)) * self.max_disp",
                            "BinOp"
                        ],
                        [
                            "xs.view(-1, *self.cp_grid_shape)",
                            "Call"
                        ],
                        [
                            "F.avg_pool3d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool3d(F.relu(self.conv2(xs)), 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool3d(F.relu(self.conv3(xs)), 2)",
                            "Call"
                        ],
                        [
                            "xs.view(xs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc(xs))",
                            "Call"
                        ],
                        [
                            "F.avg_pool3d(F.relu(self.conv1(x)), 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool3d(F.relu(self.conv2(xs)), 2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool3d(F.relu(self.conv3(xs)), 2)",
                            "Call"
                        ],
                        [
                            "xs.view(xs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.fc(xs)) * self.max_disp",
                            "BinOp"
                        ],
                        [
                            "xs.view(-1, *self.cp_grid_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_13": {
                "data": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_174": {
                "data": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_250": {
                "data": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_501": {
                "data": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pymira/utils/metrics.py": {
        "torch": {
            "round_12": {
                "variable": {
                    "value": "class_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions[:, label_index, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "np.asarray(result)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "np.asarray(result)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}