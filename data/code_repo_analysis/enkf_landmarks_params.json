{
    "src/enkf.py": {
        "torch": {
            "eye_38": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "self.root_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "la.sqrtm(self.gamma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[default_sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "p_update",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_landmarks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_86": {
                "variable": {
                    "value": "cp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij,ik->ijk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.P - p_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "cqq_alpha_gamma_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_landmarks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_112": {
                "variable": {
                    "value": "cq",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij,ik->ijk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.Q - q_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_118": {
                "variable": {
                    "value": "prod_gamma_x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij,kj->ki",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.root_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "variable": {
                    "value": "q_update",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cq[k, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(self.target - self.Q)[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "p_update[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "cp[k, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "q_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(cq[k, :, :], (self.target - self.Q)[k])",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_101": {
                "variable": {
                    "value": "cqq_alpha_gamma_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cqq + _alpha * self.gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_103": {
                "variable": {
                    "value": "q_cqq_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ij->ik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cqq_alpha_gamma_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.num_landmarks, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "torch.inverse(cqq + _alpha * self.gamma)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_119": {
                "input": {
                    "value": "torch.einsum('ij,ij->', prod_gamma_x, prod_gamma_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_119": {
                "equation": {
                    "value": "ij,ij->",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "prod_gamma_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('ij,kj->ki', self.root_gamma, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_131": {
                "size": {
                    "value": "p_ensemble[0].size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/example_lddmm.py": {
        "torch": {
            "tensor_12": {
                "variable": {
                    "value": "template",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "utils.circle(num_landmarks)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_13": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "utils.circle(num_landmarks, shift=2.0, scale=2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/lddmm.py": {
        "torch": {
            "tensor_77": {
                "variable": {
                    "value": "_default_landmark_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.01]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "LBFGS_87": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[p0]",
                    "type": "List",
                    "possible_values": []
                },
                "max_eval": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_50": {
                "variable": {
                    "value": "(gp, gq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "h(p, q)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(p, q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "p0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "q0.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/manufacture_shape_data.py": {
        "torch": {
            "Normal_14": {
                "variable": {
                    "value": "_p",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std",
                            "Method Argument"
                        ],
                        [
                            "std",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Uniform_19": {
                "variable": {
                    "value": "_p",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "low",
                    "type": "variable",
                    "possible_values": [
                        [
                            "low",
                            "Method Argument"
                        ]
                    ]
                },
                "high": {
                    "value": "high",
                    "type": "variable",
                    "possible_values": [
                        [
                            "high",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "template",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "utils.circle(num_landmarks)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[landmark_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_32": {
                "size": {
                    "value": "(num_landmarks, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {}
    },
    "src/verify_gloo_pytorch.py": {
        "torch": {
            "tensor_15": {
                "variable": {
                    "value": "template",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "utils.circle(num_landmarks)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "utils.circle(num_landmarks, shift=2.0, scale=2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}