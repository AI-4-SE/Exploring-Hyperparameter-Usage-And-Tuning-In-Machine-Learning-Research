{
    "dataset.py": {
        "torch": {
            "load_19": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "out_degree_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 / count[i] for i in senders]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "in_degree_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 / count[i] for i in receivers]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "edge_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[pair[str(senders[i]) + '-' + str(receivers[i])] for i in range(len(senders))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[senders, receivers]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[y]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(sequence, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "sequence_len",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(sequence)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_91": {
                "obj": {
                    "value": "(data, slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "gru_set2set.py": {
        "torch": {
            "GRU_47": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bincount_66": {
                "variable": {
                    "value": "sections",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_67": {
                "variable": {
                    "value": "v_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "tuple(sections.cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "q_star",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q, r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_48": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_78": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_80": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=opt.lr, weight_decay=opt.l2)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "opt.lr_dc_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "opt.lr_dc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.W_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.W_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.W_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bincount_25": {
                "variable": {
                    "value": "sections",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_26": {
                "variable": {
                    "value": "v_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "session_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "tuple(sections.cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_32": {
                "variable": {
                    "value": "s_g_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "s_g_whole",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * session_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "tuple(sections.cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_40": {
                "variable": {
                    "value": "z_i_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_3(torch.cat((torch.cat(v_n, dim=0), torch.cat(s_g, dim=0)), dim=1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "all_item_embedding.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_54": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_61": {
                "variable": {
                    "value": "self.loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_30": {
                "input": {
                    "value": "self.W_1(torch.cat(v_n_repeat, dim=0)) + self.W_2(session_embedding)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "s_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple((torch.sum(embeddings, dim=0).view(1, -1) for embeddings in s_g_split))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_33": {
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "tensors": {
                    "value": "v_n_repeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple((nodes[-1].view(1, -1).repeat(nodes.shape[0], 1) for nodes in v_i))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {}
    },
    "weighted_gat.py": {
        "torch": {
            "Parameter_73": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, heads * out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_75": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, heads, 2 * out_channels + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(x, self.weight).view(-1, self.heads, self.out_channels)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_106": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.cat([x_i, x_j, edge_attr.view(-1, 1).repeat(1, x_i.shape[1]).view(-1, x_i.shape[1], 1)], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index[0], num_nodes)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=True)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(heads * out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_111": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.cat([x_i, x_j, edge_attr.view(-1, 1).repeat(1, x_i.shape[1]).view(-1, x_i.shape[1], 1)], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index[0], num_nodes)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_102": {
                "tensors": {
                    "value": "[x_i, x_j, edge_attr.view(-1, 1).repeat(1, x_i.shape[1]).view(-1, x_i.shape[1], 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "[x_i, x_j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}