{
    "efficientdet/aug/autoaugment.py": {
        "tensorflow": {
            "to_float_173": {
                "variable": {
                    "value": "image1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(image1)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_174": {
                "variable": {
                    "value": "image2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(image2)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_224": {
                "variable": {
                    "value": "lower_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "cutout_center_height - pad_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_225": {
                "variable": {
                    "value": "upper_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "image_height - cutout_center_height - pad_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_226": {
                "variable": {
                    "value": "left_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "cutout_center_width - pad_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_227": {
                "variable": {
                    "value": "right_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "image_width - cutout_center_width - pad_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_232": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.zeros(cutout_shape, dtype=image.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[lower_pad, upper_pad], [left_pad, right_pad]]",
                            "List"
                        ],
                        [
                            "[[lower_pad, upper_pad], [left_pad, right_pad]]",
                            "List"
                        ]
                    ]
                },
                "constant_values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_235": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)[min_y:max_y + 1, min_x:max_x + 1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros_like(bbox_content)",
                            "Call"
                        ],
                        [
                            "tf.pad(mask, [[min_y_, image_height - 1 - max_y_], [min_x_, image_width - 1 - max_x_], [0, 0]], constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ],
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_236": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)[min_y:max_y + 1, min_x:max_x + 1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros_like(bbox_content)",
                            "Call"
                        ],
                        [
                            "tf.pad(mask, [[min_y_, image_height - 1 - max_y_], [min_x_, image_width - 1 - max_x_], [0, 0]], constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ],
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_237": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(mask, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(image, dtype=image.dtype) * replace",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_257": {
                "variable": {
                    "value": "added_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(added_image, 0, 255)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_263": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.image.rgb_to_grayscale(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rgb_to_grayscale_269": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_271": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_276": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(degenerate, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_278": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_279": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.cast(degenerate, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_285": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_344": {
                "variable": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(image)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_345": {
                "variable": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(image)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_352": {
                "variable": {
                    "value": "min_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_height * bbox[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_353": {
                "variable": {
                    "value": "min_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_width * bbox[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_357": {
                "variable": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_int32_358": {
                "variable": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_397": {
                "variable": {
                    "value": "new_bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.to_float(new_min_y) / tf.to_float(image_height), tf.to_float(new_min_x) / tf.to_float(image_width), tf.to_float(new_max_y) / tf.to_float(image_height), tf.to_float(new_max_x) / tf.to_float(image_width)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_428": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_content",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image[shifted_min_y:shifted_max_y + 1, shifted_min_x:shifted_max_x + 1, :]",
                            "Subscript"
                        ],
                        [
                            "image[min_y:max_y + 1, min_x:max_x + 1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_by_value_447": {
                "variable": {
                    "value": "min_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "min_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_int32(image_height * bbox[0])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(min_y, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height * bbox[0])",
                            "Call"
                        ],
                        [
                            "-tf.to_int32(image_height * (bbox[0] - 0.5))",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.to_float(tf.reduce_max(new_coords[0, :])) / image_height - 0.5)",
                            "UnaryOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_height) * bbox[0])",
                            "Call"
                        ],
                        [
                            "tf.maximum(0, min_y - pixels)",
                            "Call"
                        ],
                        [
                            "tf.to_float(min_y) / tf.to_float(image_height)",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(image_height * bbox[0])",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reduce_min(new_coords[0, :])) / image_height",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_height) * bbox[0])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_448": {
                "variable": {
                    "value": "min_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "min_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_int32(image_width * bbox[1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(min_x, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width * bbox[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width * (bbox[1] - 0.5))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reduce_min(new_coords[1, :])) / image_width + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_width) * bbox[1])",
                            "Call"
                        ],
                        [
                            "tf.maximum(0, min_x - pixels)",
                            "Call"
                        ],
                        [
                            "tf.to_float(min_x) / tf.to_float(image_width)",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(image_width * bbox[1])",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reduce_min(new_coords[1, :])) / image_width",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_width) * bbox[1])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_449": {
                "variable": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "clip_y(tf.to_int32(image_height * bbox[2]))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(max_y, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height * bbox[2])",
                            "Call"
                        ],
                        [
                            "tf.minimum(max_y, image_height - 1)",
                            "Call"
                        ],
                        [
                            "-tf.to_int32(image_height * (bbox[2] - 0.5))",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.to_float(tf.reduce_min(new_coords[0, :])) / image_height - 0.5)",
                            "UnaryOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_height) * bbox[2])",
                            "Call"
                        ],
                        [
                            "tf.minimum(image_height, max_y - pixels)",
                            "Call"
                        ],
                        [
                            "tf.to_float(max_y) / tf.to_float(image_height)",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(image_height * bbox[2])",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reduce_max(new_coords[0, :])) / image_height",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_height) * bbox[2])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_450": {
                "variable": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "clip_x(tf.to_int32(image_width * bbox[3]))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(max_x, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width * bbox[3])",
                            "Call"
                        ],
                        [
                            "tf.minimum(max_x, image_width - 1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width * (bbox[3] - 0.5))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reduce_max(new_coords[1, :])) / image_width + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_width) * bbox[3])",
                            "Call"
                        ],
                        [
                            "tf.minimum(image_width, max_x - pixels)",
                            "Call"
                        ],
                        [
                            "tf.to_float(max_x) / tf.to_float(image_width)",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(image_width * bbox[3])",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reduce_max(new_coords[1, :])) / image_width",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_width) * bbox[3])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_477": {
                "variable": {
                    "value": "(min_y, max_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(height, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : _adjust_bbox_boundaries(min_y, max_y)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (min_y, max_y)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_480": {
                "variable": {
                    "value": "(min_x, max_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(width, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : _adjust_bbox_boundaries(min_x, max_x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (min_x, max_x)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_float_519": {
                "variable": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(image)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_520": {
                "variable": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(image)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_521": {
                "variable": {
                    "value": "min_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_height * bbox[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_522": {
                "variable": {
                    "value": "min_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_width * bbox[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_523": {
                "variable": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_height * bbox[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_524": {
                "variable": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_width * bbox[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_525": {
                "variable": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_int32_526": {
                "variable": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "minimum_529": {
                "variable": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "clip_y(tf.to_int32(image_height * bbox[2]))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(max_y, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height * bbox[2])",
                            "Call"
                        ],
                        [
                            "tf.minimum(max_y, image_height - 1)",
                            "Call"
                        ],
                        [
                            "-tf.to_int32(image_height * (bbox[2] - 0.5))",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.to_float(tf.reduce_min(new_coords[0, :])) / image_height - 0.5)",
                            "UnaryOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_height) * bbox[2])",
                            "Call"
                        ],
                        [
                            "tf.minimum(image_height, max_y - pixels)",
                            "Call"
                        ],
                        [
                            "tf.to_float(max_y) / tf.to_float(image_height)",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(image_height * bbox[2])",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reduce_max(new_coords[0, :])) / image_height",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_height) * bbox[2])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "image_height - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_530": {
                "variable": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "clip_x(tf.to_int32(image_width * bbox[3]))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(max_x, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width * bbox[3])",
                            "Call"
                        ],
                        [
                            "tf.minimum(max_x, image_width - 1)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width * (bbox[3] - 0.5))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reduce_max(new_coords[1, :])) / image_width + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_width) * bbox[3])",
                            "Call"
                        ],
                        [
                            "tf.minimum(image_width, max_x - pixels)",
                            "Call"
                        ],
                        [
                            "tf.to_float(max_x) / tf.to_float(image_width)",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(image_width * bbox[3])",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reduce_max(new_coords[1, :])) / image_width",
                            "BinOp"
                        ],
                        [
                            "tf.to_int32(tf.to_float(image_width) * bbox[3])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_540": {
                "variable": {
                    "value": "augmented_bbox_content",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "augmented_bbox_content",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "augmentation_func(bbox_content, *args)",
                            "Call"
                        ],
                        [
                            "tf.pad(augmented_bbox_content, [[min_y, image_height - 1 - max_y], [min_x, image_width - 1 - max_x], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[min_y, image_height - 1 - max_y], [min_x, image_width - 1 - max_x], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_546": {
                "variable": {
                    "value": "mask_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_content",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image[shifted_min_y:shifted_max_y + 1, shifted_min_x:shifted_max_x + 1, :]",
                            "Subscript"
                        ],
                        [
                            "image[min_y:max_y + 1, min_x:max_x + 1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_548": {
                "variable": {
                    "value": "mask_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(bbox_content)",
                            "Call"
                        ],
                        [
                            "tf.pad(mask_tensor, [[min_y, image_height - 1 - max_y], [min_x, image_width - 1 - max_x], [0, 0]], constant_values=1)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[min_y, image_height - 1 - max_y], [min_x, image_width - 1 - max_x], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_563": {
                "variable": {
                    "value": "bboxes_sum_check",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(bboxes_sum_check, -4.0), lambda : bbox, lambda : tf.concat([bboxes, bbox], 0))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : tf.constant(_INVALID_BOX), lambda : bboxes)",
                            "Call"
                        ],
                        [
                            "tf.ensure_shape(bboxes, (None, 4))",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_rotate_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shift_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shear_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_564": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(bbox, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(bbox)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_566": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(bboxes_sum_check, -4.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : bbox",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.concat([bboxes, bbox], 0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_601": {
                "variable": {
                    "value": "should_apply_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(tf.random_uniform([], dtype=tf.float32) + prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_644": {
                "variable": {
                    "value": "new_bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "_INVALID_BOX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[-1.0, -1.0, -1.0, -1.0]]",
                            "List"
                        ]
                    ]
                }
            },
            "cond_648": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(bboxes)[0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.constant(_INVALID_BOX)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : bboxes",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ensure_shape_652": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(bboxes_sum_check, -4.0), lambda : bbox, lambda : tf.concat([bboxes, bbox], 0))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : tf.constant(_INVALID_BOX), lambda : bboxes)",
                            "Call"
                        ],
                        [
                            "tf.ensure_shape(bboxes, (None, 4))",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_rotate_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shift_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shear_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(None, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_663": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_685": {
                "variable": {
                    "value": "(_, (image, new_bboxes))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda _idx, _images_and_bboxes: tf.less(_idx, num_bboxes)",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda _idx, _images_and_bboxes: [_idx + 1, wrapped_aug_func(_images_and_bboxes[0], loop_bboxes[_idx], _images_and_bboxes[1])]",
                            "Lambda"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[idx, (image, new_bboxes)]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[idx.get_shape(), (image.get_shape(), tf.TensorShape([None, 4]))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_703": {
                "variable": {
                    "value": "(image, bboxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(num_bboxes, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : (image, bboxes)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : _apply_multi_bbox_augmentation(image, bboxes, prob, aug_func, func_changes_bbox, *args)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_int32_813": {
                "variable": {
                    "value": "min_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_width * (bbox[1] - 0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_815": {
                "variable": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_width * (bbox[3] - 0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_816": {
                "variable": {
                    "value": "coordinates",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[min_y, min_x], [min_y, max_x], [max_y, min_x], [max_y, max_x]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_818": {
                "variable": {
                    "value": "coordinates",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([[min_y, min_x], [min_y, max_x], [max_y, min_x], [max_y, max_x]])",
                            "Call"
                        ],
                        [
                            "tf.cast(coordinates, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.stack([[min_y, min_x], [min_y, max_x], [max_y, min_x], [max_y, max_x]])",
                            "Call"
                        ],
                        [
                            "tf.cast(coordinates, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_821": {
                "variable": {
                    "value": "rotation_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[tf.cos(radians), tf.sin(radians)], [-tf.sin(radians), tf.cos(radians)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_824": {
                "variable": {
                    "value": "new_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(rotation_matrix, tf.transpose(coordinates))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_865": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "wrapped_rotate_bbox",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda bbox: _rotate_bbox(bbox, image_height, image_width, degrees)",
                            "Lambda"
                        ]
                    ]
                },
                "elems": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(bboxes_sum_check, -4.0), lambda : bbox, lambda : tf.concat([bboxes, bbox], 0))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : tf.constant(_INVALID_BOX), lambda : bboxes)",
                            "Call"
                        ],
                        [
                            "tf.ensure_shape(bboxes, (None, 4))",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_rotate_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shift_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shear_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_896": {
                "variable": {
                    "value": "pixels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pixels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_int32(pixels)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_898": {
                "variable": {
                    "value": "min_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(image_height) * bbox[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_899": {
                "variable": {
                    "value": "min_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(image_width) * bbox[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_900": {
                "variable": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(image_height) * bbox[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_901": {
                "variable": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(image_width) * bbox[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "map_fn_952": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "wrapped_shift_bbox",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda bbox: _shift_bbox(bbox, image_height, image_width, pixels, shift_horizontal)",
                            "Lambda"
                        ]
                    ]
                },
                "elems": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(bboxes_sum_check, -4.0), lambda : bbox, lambda : tf.concat([bboxes, bbox], 0))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : tf.constant(_INVALID_BOX), lambda : bboxes)",
                            "Call"
                        ],
                        [
                            "tf.ensure_shape(bboxes, (None, 4))",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_rotate_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shift_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shear_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_997": {
                "variable": {
                    "value": "min_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_height * bbox[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_998": {
                "variable": {
                    "value": "min_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_width * bbox[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_999": {
                "variable": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_height * bbox[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_1000": {
                "variable": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_width * bbox[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_1001": {
                "variable": {
                    "value": "coordinates",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[min_y, min_x], [min_y, max_x], [max_y, min_x], [max_y, max_x]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_1003": {
                "variable": {
                    "value": "coordinates",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([[min_y, min_x], [min_y, max_x], [max_y, min_x], [max_y, max_x]])",
                            "Call"
                        ],
                        [
                            "tf.cast(coordinates, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.stack([[min_y, min_x], [min_y, max_x], [max_y, min_x], [max_y, max_x]])",
                            "Call"
                        ],
                        [
                            "tf.cast(coordinates, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1012": {
                "variable": {
                    "value": "translation_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "translation_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([[1, 0], [-level, 1]])",
                            "Call"
                        ],
                        [
                            "tf.stack([[1, -level], [0, 1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(translation_matrix, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1013": {
                "variable": {
                    "value": "new_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(translation_matrix, tf.transpose(coordinates))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_1059": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "wrapped_shear_bbox",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda bbox: _shear_bbox(bbox, image_height, image_width, level, shear_horizontal)",
                            "Lambda"
                        ]
                    ]
                },
                "elems": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(bboxes_sum_check, -4.0), lambda : bbox, lambda : tf.concat([bboxes, bbox], 0))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : tf.constant(_INVALID_BOX), lambda : bboxes)",
                            "Call"
                        ],
                        [
                            "tf.ensure_shape(bboxes, (None, 4))",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_rotate_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shift_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shear_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1098": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s1, s2, s3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_1105": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_1107": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_1113": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 1, 1], [1, 5, 1], [1, 1, 1]], dtype=tf.float32, shape=[3, 3, 1, 1]) / 13.0",
                            "BinOp"
                        ],
                        [
                            "tf.tile(kernel, [1, 1, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_1118": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_1119": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(degenerate, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_1123": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_1124": {
                "variable": {
                    "value": "padded_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)[min_y:max_y + 1, min_x:max_x + 1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros_like(bbox_content)",
                            "Call"
                        ],
                        [
                            "tf.pad(mask, [[min_y_, image_height - 1 - max_y_], [min_x_, image_width - 1 - max_x_], [0, 0]], constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ],
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_1125": {
                "variable": {
                    "value": "padded_degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_1126": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(padded_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "padded_degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(degenerate, [[1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "orig_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image",
                            "Name"
                        ]
                    ]
                }
            },
            "stack_1168": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s1, s2, s3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_1174": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_1175": {
                "variable": {
                    "value": "extended_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0], shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_1176": {
                "variable": {
                    "value": "extended",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, extended_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_1198": {
                "variable": {
                    "value": "image_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1200": {
                "variable": {
                    "value": "flattened_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, image_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_1205": {
                "variable": {
                    "value": "replace",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[replace, tf.ones([1], image.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_1208": {
                "variable": {
                    "value": "flattened_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(alpha_channel, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(flattened_image, dtype=image.dtype) * replace",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "flattened_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(image, [-1, image_shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(alpha_channel, 0), tf.ones_like(flattened_image, dtype=image.dtype) * replace, flattened_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1213": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flattened_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(image, [-1, image_shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(alpha_channel, 0), tf.ones_like(flattened_image, dtype=image.dtype) * replace, flattened_image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "image_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_1214": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_shape[0], image_shape[1], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_1243": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(bbox, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_1245": {
                "variable": {
                    "value": "min_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(image_height) * bbox[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_1246": {
                "variable": {
                    "value": "min_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(image_width) * bbox[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_1247": {
                "variable": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(image_height) * bbox[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_1248": {
                "variable": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(image_width) * bbox[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_1252": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image[min_y:max_y + 1, min_x:max_x + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_1259": {
                "variable": {
                    "value": "pad_size_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pad_fraction * (box_height / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_1260": {
                "variable": {
                    "value": "pad_size_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pad_fraction * (box_width / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1271": {
                "variable": {
                    "value": "lower_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "cutout_center_height - pad_size_height",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1273": {
                "variable": {
                    "value": "upper_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "image_height - cutout_center_height - pad_size_height",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1275": {
                "variable": {
                    "value": "left_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "cutout_center_width - pad_size_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1277": {
                "variable": {
                    "value": "right_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "image_width - cutout_center_width - pad_size_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_1284": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.zeros(cutout_shape, dtype=image.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[lower_pad, upper_pad], [left_pad, right_pad]]",
                            "List"
                        ],
                        [
                            "[[lower_pad, upper_pad], [left_pad, right_pad]]",
                            "List"
                        ]
                    ]
                },
                "constant_values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1288": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)[min_y:max_y + 1, min_x:max_x + 1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros_like(bbox_content)",
                            "Call"
                        ],
                        [
                            "tf.pad(mask, [[min_y_, image_height - 1 - max_y_], [min_x_, image_width - 1 - max_x_], [0, 0]], constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ],
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_1289": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)[min_y:max_y + 1, min_x:max_x + 1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros_like(bbox_content)",
                            "Call"
                        ],
                        [
                            "tf.pad(mask, [[min_y_, image_height - 1 - max_y_], [min_x_, image_width - 1 - max_x_], [0, 0]], constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ],
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_1344": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(bboxes)[0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : apply_bbox_cutout(image, bboxes, pad_fraction)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_1387": {
                "variable": {
                    "value": "should_flip",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(tf.random_uniform([]) + 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_1388": {
                "variable": {
                    "value": "final_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "should_flip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(tf.random_uniform([]) + 0.5), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tensor",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : -tensor",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_1516": {
                "variable": {
                    "value": "should_apply_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(tf.random_uniform([], dtype=tf.float32) + prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_1518": {
                "variable": {
                    "value": "(augmented_image, augmented_bboxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "should_apply_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(tf.random_uniform([], dtype=tf.float32) + prob), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.floor(tf.random_uniform([], dtype=tf.float32) + prob), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : func(image, bboxes, *args)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (image, bboxes)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_190": {
                "x": {
                    "value": "tf.clip_by_value(temp, 0.0, 255.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_248": {
                "condition": {
                    "value": "image < threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "255 - image",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_258": {
                "condition": {
                    "value": "image < threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "added_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.int64) + addition",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(added_image, 0, 255), tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "left_shift_292": {
                "x": {
                    "value": "tf.bitwise.right_shift(image, shift)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "shift",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8 - bits",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pad_411": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)[min_y:max_y + 1, min_x:max_x + 1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros_like(bbox_content)",
                            "Call"
                        ],
                        [
                            "tf.pad(mask, [[min_y_, image_height - 1 - max_y_], [min_x_, image_width - 1 - max_x_], [0, 0]], constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ],
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[min_y_, image_height - 1 - max_y_], [min_x_, image_width - 1 - max_x_], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_415": {
                "variable": {
                    "value": "content_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "content_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(content_tensor, [[min_y_, image_height - 1 - max_y_], [min_x_, image_width - 1 - max_x_], [0, 0]], constant_values=0)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[min_y_, image_height - 1 - max_y_], [min_x_, image_width - 1 - max_x_], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_474": {
                "variable": {
                    "value": "max_coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_coord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(max_coord, 0.0 + delta)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0 + delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_475": {
                "variable": {
                    "value": "min_coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min_coord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.minimum(min_coord, 1.0 - delta)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 - delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_604": {
                "variable": {
                    "value": "(augmented_image, bbox)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "should_apply_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(tf.random_uniform([], dtype=tf.float32) + prob), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.floor(tf.random_uniform([], dtype=tf.float32) + prob), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : augmentation_func(image, bbox, *args)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (image, bbox)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_609": {
                "variable": {
                    "value": "augmented_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "should_apply_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(tf.random_uniform([], dtype=tf.float32) + prob), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.floor(tf.random_uniform([], dtype=tf.float32) + prob), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _apply_bbox_augmentation(image, bbox, augmentation_func, *args)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shuffle_672": {
                "variable": {
                    "value": "loop_bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(bboxes_sum_check, -4.0), lambda : bbox, lambda : tf.concat([bboxes, bbox], 0))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : tf.constant(_INVALID_BOX), lambda : bboxes)",
                            "Call"
                        ],
                        [
                            "tf.ensure_shape(bboxes, (None, 4))",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_rotate_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shift_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shear_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_835": {
                "values": {
                    "value": "[min_y, min_x, max_y, max_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_904": {
                "variable": {
                    "value": "min_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "min_x - pixels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_905": {
                "variable": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "max_x - pixels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_907": {
                "variable": {
                    "value": "min_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "min_y - pixels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_908": {
                "variable": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "max_y - pixels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_919": {
                "values": {
                    "value": "[min_y, min_x, max_y, max_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1007": {
                "variable": {
                    "value": "translation_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[1, 0], [-level, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1010": {
                "variable": {
                    "value": "translation_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[1, -level], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1025": {
                "values": {
                    "value": "[min_y, min_x, max_y, max_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_1079": {
                "variable": {
                    "value": "lo",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_min(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_1080": {
                "variable": {
                    "value": "hi",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_1090": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "hi > lo",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : scale_values(image)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_1116": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 1, 1], [1, 5, 1], [1, 1, 1]], dtype=tf.float32, shape=[3, 3, 1, 1]) / 13.0",
                            "BinOp"
                        ],
                        [
                            "tf.tile(kernel, [1, 1, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "rate": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_1136": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im[:, :, c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_fixed_width_1138": {
                "variable": {
                    "value": "histo",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(im) * scale + offset",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(im, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(im[:, :, c], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "value_range": {
                    "value": "[0, 255]",
                    "type": "List",
                    "possible_values": []
                },
                "nbins": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_1141": {
                "variable": {
                    "value": "nonzero",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(histo, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1142": {
                "variable": {
                    "value": "nonzero_histo",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(histo, nonzero)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_1157": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(step, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : im",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.gather(build_lut(histo, step), im)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "gather_1327": {
                "variable": {
                    "value": "chosen_bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(bboxes_sum_check, -4.0), lambda : bbox, lambda : tf.concat([bboxes, bbox], 0))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : tf.constant(_INVALID_BOX), lambda : bboxes)",
                            "Call"
                        ],
                        [
                            "tf.ensure_shape(bboxes, (None, 4))",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_rotate_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shift_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shear_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "random_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[], maxval=tf.shape(bboxes)[0], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_1336": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(mask, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_1531": {
                "variable": {
                    "value": "(image, bboxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(i, policy_to_select)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda selected_policy=policy: selected_policy(image, bboxes)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (image, bboxes)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "info_1635": {
                "msg": {
                    "value": "Using RandAugment.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_1652": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_169": {
                "value": {
                    "value": "image1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(image1)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_171": {
                "value": {
                    "value": "image2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(image2)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_180": {
                "x": {
                    "value": "image1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(image1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_185": {
                "x": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(image1) + scaled",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_190": {
                "t": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(image1) + scaled",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_212": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_213": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_233": {
                "shape": {
                    "value": "cutout_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[image_height - (lower_pad + upper_pad), image_width - (left_pad + right_pad)]",
                            "List"
                        ],
                        [
                            "[image_height - (lower_pad + upper_pad), image_width - (left_pad + right_pad)]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_238": {
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)[min_y:max_y + 1, min_x:max_x + 1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros_like(bbox_content)",
                            "Call"
                        ],
                        [
                            "tf.pad(mask, [[min_y_, image_height - 1 - max_y_], [min_x_, image_width - 1 - max_x_], [0, 0]], constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ],
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_256": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_257": {
                "t": {
                    "value": "added_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.int64) + addition",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(added_image, 0, 255), tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rgb_to_grayscale_263": {
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_276": {
                "x": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_277": {
                "input": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_279": {
                "x": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "right_shift_292": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "shift",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8 - bits",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_347": {
                "t": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "tf.to_int32(image_height) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_349": {
                "t": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "tf.to_int32(image_width) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_354": {
                "x": {
                    "value": "image_height * bbox[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_355": {
                "x": {
                    "value": "image_width * bbox[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_422": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_423": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)[min_y:max_y + 1, min_x:max_x + 1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros_like(bbox_content)",
                            "Call"
                        ],
                        [
                            "tf.pad(mask, [[min_y_, image_height - 1 - max_y_], [min_x_, image_width - 1 - max_x_], [0, 0]], constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ],
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_477": {
                "x": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_y - min_y",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_480": {
                "x": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_x - min_x",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_566": {
                "x": {
                    "value": "bboxes_sum_check",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(bboxes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-4.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "floor_602": {
                "x": {
                    "value": "tf.random_uniform([], dtype=tf.float32) + prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_648": {
                "x": {
                    "value": "tf.shape(bboxes)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_662": {
                "input": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(bboxes_sum_check, -4.0), lambda : bbox, lambda : tf.concat([bboxes, bbox], 0))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : tf.constant(_INVALID_BOX), lambda : bboxes)",
                            "Call"
                        ],
                        [
                            "tf.ensure_shape(bboxes, (None, 4))",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_rotate_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shift_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shear_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_667": {
                "x": {
                    "value": "_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "num_bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(bboxes)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(bboxes)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_702": {
                "input": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(bboxes_sum_check, -4.0), lambda : bbox, lambda : tf.concat([bboxes, bbox], 0))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : tf.constant(_INVALID_BOX), lambda : bboxes)",
                            "Call"
                        ],
                        [
                            "tf.ensure_shape(bboxes, (None, 4))",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_rotate_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shift_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shear_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_704": {
                "x": {
                    "value": "num_bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(bboxes)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(bboxes)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_801": {
                "x": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_int32_812": {
                "x": {
                    "value": "image_height * (bbox[0] - 0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_814": {
                "x": {
                    "value": "image_height * (bbox[2] - 0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_825": {
                "a": {
                    "value": "rotation_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([[tf.cos(radians), tf.sin(radians)], [-tf.sin(radians), tf.cos(radians)]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(coordinates)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_859": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_860": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_911": {
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_912": {
                "x": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_913": {
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_914": {
                "x": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_946": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_947": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_994": {
                "x": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_1014": {
                "a": {
                    "value": "translation_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([[1, 0], [-level, 1]])",
                            "Call"
                        ],
                        [
                            "tf.stack([[1, -level], [0, 1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(translation_matrix, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(coordinates)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_1017": {
                "x": {
                    "value": "tf.reduce_min(new_coords[0, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_1018": {
                "x": {
                    "value": "tf.reduce_min(new_coords[1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_1019": {
                "x": {
                    "value": "tf.reduce_max(new_coords[0, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_1020": {
                "x": {
                    "value": "tf.reduce_max(new_coords[1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_1053": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1054": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_1087": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(im) * scale + offset",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(im, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(im[:, :, c], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_1109": {
                "value": {
                    "value": "[[1, 1, 1], [1, 5, 1], [1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_1115": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_1119": {
                "x": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_1126": {
                "x": {
                    "value": "padded_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(mask, [[1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1150": {
                "variable": {
                    "value": "lut",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[0], lut[:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_1161": {
                "x": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(hi > lo, lambda : scale_values(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(padded_mask, 1), padded_degenerate, orig_image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(step, 0), lambda : im, lambda : tf.gather(build_lut(histo, step), im))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_1209": {
                "x": {
                    "value": "alpha_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "flattened_image[:, 3]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_1240": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1241": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_1285": {
                "shape": {
                    "value": "cutout_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[image_height - (lower_pad + upper_pad), image_width - (left_pad + right_pad)]",
                            "List"
                        ],
                        [
                            "[image_height - (lower_pad + upper_pad), image_width - (left_pad + right_pad)]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_1344": {
                "x": {
                    "value": "tf.shape(bboxes)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_1387": {
                "x": {
                    "value": "tf.random_uniform([]) + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_1517": {
                "x": {
                    "value": "tf.random_uniform([], dtype=tf.float32) + prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_239": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_344": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_345": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_363": {
                "x": {
                    "value": "pixel_scaling * tf.to_float(bbox_height) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_365": {
                "x": {
                    "value": "pixel_scaling * tf.to_float(bbox_height) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_367": {
                "x": {
                    "value": "pixel_scaling * tf.to_float(bbox_width) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_369": {
                "x": {
                    "value": "pixel_scaling * tf.to_float(bbox_width) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_519": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_520": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_568": {
                "values": {
                    "value": "[bboxes, bbox]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_649": {
                "value": {
                    "value": "_INVALID_BOX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[-1.0, -1.0, -1.0, -1.0]]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_825": {
                "a": {
                    "value": "coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([[min_y, min_x], [min_y, max_x], [max_y, min_x], [max_y, max_x]])",
                            "Call"
                        ],
                        [
                            "tf.cast(coordinates, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.stack([[min_y, min_x], [min_y, max_x], [max_y, min_x], [max_y, max_x]])",
                            "Call"
                        ],
                        [
                            "tf.cast(coordinates, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_828": {
                "x": {
                    "value": "tf.reduce_min(new_coords[1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_830": {
                "x": {
                    "value": "tf.reduce_max(new_coords[1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_898": {
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_899": {
                "x": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_900": {
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_901": {
                "x": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_1014": {
                "a": {
                    "value": "coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([[min_y, min_x], [min_y, max_x], [max_y, min_x], [max_y, max_x]])",
                            "Call"
                        ],
                        [
                            "tf.cast(coordinates, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.stack([[min_y, min_x], [min_y, max_x], [max_y, min_x], [max_y, max_x]])",
                            "Call"
                        ],
                        [
                            "tf.cast(coordinates, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_1017": {
                "input_tensor": {
                    "value": "new_coords[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_min_1018": {
                "input_tensor": {
                    "value": "new_coords[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_max_1019": {
                "input_tensor": {
                    "value": "new_coords[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_max_1020": {
                "input_tensor": {
                    "value": "new_coords[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_min_1079": {
                "input_tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_1080": {
                "input_tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_1088": {
                "x": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(im) * scale + offset",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(im, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(im[:, :, c], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_1141": {
                "x": {
                    "value": "histo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.histogram_fixed_width(im, [0, 255], nbins=256)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1142": {
                "params": {
                    "value": "histo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.histogram_fixed_width(im, [0, 255], nbins=256)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nonzero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(histo, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_1153": {
                "t": {
                    "value": "lut",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(tf.cumsum(histo) + step // 2) // step",
                            "BinOp"
                        ],
                        [
                            "tf.concat([[0], lut[:-1]], 0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_1157": {
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(tf.reduce_sum(nonzero_histo) - nonzero_histo[-1]) // 255",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_1205": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_1210": {
                "input": {
                    "value": "flattened_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(image, [-1, image_shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(alpha_channel, 0), tf.ones_like(flattened_image, dtype=image.dtype) * replace, flattened_image)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_1245": {
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_1246": {
                "x": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_1247": {
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_1248": {
                "x": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_1337": {
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)[min_y:max_y + 1, min_x:max_x + 1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros_like(bbox_content)",
                            "Call"
                        ],
                        [
                            "tf.pad(mask, [[min_y_, image_height - 1 - max_y_], [min_x_, image_width - 1 - max_x_], [0, 0]], constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ],
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, 2)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_1338": {
                "x": {
                    "value": "tf.ones_like(image, dtype=image.dtype) * replace",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_1532": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "policy_to_select",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=len(policies), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_1658": {
                "name": {
                    "value": "'randaug_layer_{}'.format(layer_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_1663": {
                "variable": {
                    "value": "(image, bboxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(i, op_to_select)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda fn=func, fn_args=args: fn(image, bboxes, *fn_args)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (image, bboxes)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_int32_347": {
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_int32_349": {
                "x": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_398": {
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_399": {
                "x": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_400": {
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[0])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_height)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_401": {
                "x": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.shape(image)[1])",
                            "Call"
                        ],
                        [
                            "tf.to_int32(image_width)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_648": {
                "input": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(bboxes_sum_check, -4.0), lambda : bbox, lambda : tf.concat([bboxes, bbox], 0))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : tf.constant(_INVALID_BOX), lambda : bboxes)",
                            "Call"
                        ],
                        [
                            "tf.ensure_shape(bboxes, (None, 4))",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_rotate_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shift_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shear_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_822": {
                "x": {
                    "value": "radians",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "degrees * degrees_to_radians",
                            "BinOp"
                        ],
                        [
                            "degrees * degrees_to_radians",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_822": {
                "x": {
                    "value": "radians",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "degrees * degrees_to_radians",
                            "BinOp"
                        ],
                        [
                            "degrees * degrees_to_radians",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_823": {
                "x": {
                    "value": "radians",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "degrees * degrees_to_radians",
                            "BinOp"
                        ],
                        [
                            "degrees * degrees_to_radians",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_827": {
                "x": {
                    "value": "tf.reduce_max(new_coords[0, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_min_828": {
                "input_tensor": {
                    "value": "new_coords[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_829": {
                "x": {
                    "value": "tf.reduce_min(new_coords[0, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_830": {
                "input_tensor": {
                    "value": "new_coords[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_1143": {
                "input_tensor": {
                    "value": "nonzero_histo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gather(histo, nonzero), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_1159": {
                "params": {
                    "value": "build_lut(histo, step)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(im) * scale + offset",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(im, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(im[:, :, c], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1344": {
                "input": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(bboxes_sum_check, -4.0), lambda : bbox, lambda : tf.concat([bboxes, bbox], 0))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : tf.constant(_INVALID_BOX), lambda : bboxes)",
                            "Call"
                        ],
                        [
                            "tf.ensure_shape(bboxes, (None, 4))",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_rotate_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shift_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shear_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_688": {
                "dims": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sin_823": {
                "x": {
                    "value": "radians",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "degrees * degrees_to_radians",
                            "BinOp"
                        ],
                        [
                            "degrees * degrees_to_radians",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_827": {
                "input_tensor": {
                    "value": "new_coords[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_min_829": {
                "input_tensor": {
                    "value": "new_coords[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_1086": {
                "x": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.to_float(im) * scale + offset",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(im, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(im[:, :, c], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_1148": {
                "x": {
                    "value": "histo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.histogram_fixed_width(im, [0, 255], nbins=256)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1325": {
                "input": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(bboxes_sum_check, -4.0), lambda : bbox, lambda : tf.concat([bboxes, bbox], 0))",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : tf.constant(_INVALID_BOX), lambda : bboxes)",
                            "Call"
                        ],
                        [
                            "tf.ensure_shape(bboxes, (None, 4))",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_rotate_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shift_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(wrapped_shear_bbox, bboxes)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_1338": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(min_y, min_x, max_y, max_x, mask, grey_tensor, image)",
                            "Call"
                        ],
                        [
                            "mask_and_add_image(new_min_y, new_min_x, new_max_y, new_max_x, mask, bbox_content, image)",
                            "Call"
                        ],
                        [
                            "image * mask_tensor + augmented_bbox_content",
                            "BinOp"
                        ],
                        [
                            "rotate(image, degrees, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "translate_x(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "translate_y(image, pixels, replace)",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "shear_x(image, level, replace)",
                            "Call"
                        ],
                        [
                            "shear_y(image, level, replace)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(tf.shape(bboxes)[0], 0), lambda : image, lambda : apply_bbox_cutout(image, bboxes, pad_fraction))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(mask, 0), tf.cast(tf.ones_like(image, dtype=image.dtype) * replace, dtype=image.dtype), image)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_1664": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "op_to_select",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=len(available_ops), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_363": {
                "x": {
                    "value": "bbox_height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_float_365": {
                "x": {
                    "value": "bbox_height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_float_367": {
                "x": {
                    "value": "bbox_width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_float_369": {
                "x": {
                    "value": "bbox_width",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/aug/autoaugment_test.py": {
        "tensorflow": {
            "placeholder_26": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[640, 640, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[320, 320, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "disable_eager_execution_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/aug/gridmask.py": {
        "tensorflow": {
            "cast_68": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(h, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_69": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(w, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_70": {
                "variable": {
                    "value": "mask_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(self.gridmask_size_ratio + 1, tf.float32) * tf.math.maximum(h, w)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mask_h, mask_w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_76": {
                "variable": {
                    "value": "gridblock",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "int(tf.math.minimum(h * 0.5, w * 0.3))",
                    "type": "Call",
                    "possible_values": []
                },
                "maxval": {
                    "value": "int(tf.math.maximum(h * 0.5, w * 0.3)) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_113": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask[(hh - h) // 2:(hh - h) // 2 + h, (ww - w) // 2:(ww - w) // 2 + w]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros(shape=[mask_h, mask_w], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(mask, indices, updates)",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask)",
                            "Call"
                        ],
                        [
                            "self.crop(grid, h, w)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, image.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, (h, w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1) if image._rank() != mask._rank() else mask",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask[(hh - h) // 2:(hh - h) // 2 + h, (ww - w) // 2:(ww - w) // 2 + w]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros(shape=[mask_h, mask_w], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(mask, indices, updates)",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask)",
                            "Call"
                        ],
                        [
                            "self.crop(grid, h, w)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, image.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, (h, w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1) if image._rank() != mask._rank() else mask",
                            "IfExp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cond_117": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "occur",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random.normal([], 0, 1) < self.prob",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : image * mask",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "uniform_83": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "gridblock + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_86": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.minimum(tf.math.maximum(int(tf.cast(gridblock, tf.float32) * self.ratio + 0.5), 1), gridblock - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_93": {
                "variable": {
                    "value": "start_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "gridblock + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_102": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask[(hh - h) // 2:(hh - h) // 2 + h, (ww - w) // 2:(ww - w) // 2 + w]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros(shape=[mask_h, mask_w], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(mask, indices, updates)",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask)",
                            "Call"
                        ],
                        [
                            "self.crop(grid, h, w)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, image.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, (h, w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1) if image._rank() != mask._rank() else mask",
                            "IfExp"
                        ]
                    ]
                }
            },
            "normal_53": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_60": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask[(hh - h) // 2:(hh - h) // 2 + h, (ww - w) // 2:(ww - w) // 2 + w]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros(shape=[mask_h, mask_w], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(mask, indices, updates)",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask)",
                            "Call"
                        ],
                        [
                            "self.crop(grid, h, w)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, image.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, (h, w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1) if image._rank() != mask._rank() else mask",
                            "IfExp"
                        ]
                    ]
                }
            },
            "minimum_97": {
                "variable": {
                    "value": "end",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "start + length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "mask_w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(start, end)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[end - start, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_scatter_nd_update_101": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask[(hh - h) // 2:(hh - h) // 2 + h, (ww - w) // 2:(ww - w) // 2 + w]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros(shape=[mask_h, mask_w], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(mask, indices, updates)",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask)",
                            "Call"
                        ],
                        [
                            "self.crop(grid, h, w)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, image.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, (h, w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1) if image._rank() != mask._rank() else mask",
                            "IfExp"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(start, end), [end - start, 1])",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "updates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones(shape=[end - start, mask_w], dtype=tf.int32) * self.fill",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_108": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(occur, lambda : image * mask, lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_109": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(occur, lambda : image * mask, lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_115": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask[(hh - h) // 2:(hh - h) // 2 + h, (ww - w) // 2:(ww - w) // 2 + w]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros(shape=[mask_h, mask_w], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.tensor_scatter_nd_update(mask, indices, updates)",
                            "Call"
                        ],
                        [
                            "tf.transpose(mask)",
                            "Call"
                        ],
                        [
                            "self.crop(grid, h, w)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, image.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, (h, w))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1) if image._rank() != mask._rank() else mask",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normal_116": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_71": {
                "x": {
                    "value": "self.gridmask_size_ratio + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_72": {
                "x": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(h, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(w, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "minimum_87": {
                "x": {
                    "value": "tf.math.maximum(int(tf.cast(gridblock, tf.float32) * self.ratio + 0.5), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "gridblock - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_78": {
                "x": {
                    "value": "h * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "w * 0.3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_88": {
                "x": {
                    "value": "int(tf.cast(gridblock, tf.float32) * self.ratio + 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_100": {
                "shape": {
                    "value": "[end - start, mask_w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_79": {
                "x": {
                    "value": "h * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "w * 0.3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_89": {
                "x": {
                    "value": "gridblock",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[], minval=int(tf.math.minimum(h * 0.5, w * 0.3)), maxval=int(tf.math.maximum(h * 0.5, w * 0.3)) + 1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/aug/gridmask_test.py": {
        "tensorflow": {
            "uniform_30": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(512, 512, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_32": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "511",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(4, 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "uniform_40": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "511",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1028, 512, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "uniform_48": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "511",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "disable_eager_execution_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_26": {
                "seed": {
                    "value": "111111",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/aug/mosaic.py": {
        "tensorflow": {
            "uniform_62": {
                "variable": {
                    "value": "x_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "tf.cast(self.out_size[0] * (self._minimum_mosaic_image_dim / 100), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "maxval": {
                    "value": "tf.cast(self.out_size[0] * ((100 - self._minimum_mosaic_image_dim) / 100), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_73": {
                "variable": {
                    "value": "y_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "tf.cast(self.out_size[1] * (self._minimum_mosaic_image_dim / 100), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "maxval": {
                    "value": "tf.cast(self.out_size[1] * ((100 - self._minimum_mosaic_image_dim) / 100), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_116": {
                "variable": {
                    "value": "mosaic_image_topleft",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "images[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "resize_117": {
                "variable": {
                    "value": "mosaic_image_topright",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "images[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.out_size[0] - x, y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "resize_119": {
                "variable": {
                    "value": "mosaic_image_bottomleft",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "images[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(x, self.out_size[1] - y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "resize_121": {
                "variable": {
                    "value": "mosaic_image_bottomright",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "images[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.out_size[0] - x, self.out_size[1] - y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_153": {
                "variable": {
                    "value": "mosaic_box_topleft",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.vectorized_map(functools.partial(self._scale_box, image=images[0], mosaic_image=mosaic_image_topleft), boxes[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "vectorized_map_164": {
                "variable": {
                    "value": "mosaic_box_topright",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "functools.partial(self._scale_box, image=images[1], mosaic_image=mosaic_image_topright)",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "boxes[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_172": {
                "variable": {
                    "value": "idx_tp",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1], [3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_177": {
                "variable": {
                    "value": "mosaic_box_topright",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.tensor_scatter_nd_add(mosaic_box_topright, idx_tp, update_tp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "vectorized_map_182": {
                "variable": {
                    "value": "mosaic_box_bottomleft",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "functools.partial(self._scale_box, image=images[2], mosaic_image=mosaic_image_bottomleft)",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "boxes[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_191": {
                "variable": {
                    "value": "idx_bl",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0], [2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_196": {
                "variable": {
                    "value": "mosaic_box_bottomleft",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.tensor_scatter_nd_add(mosaic_box_bottomleft, idx_bl, update_bl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "vectorized_map_200": {
                "variable": {
                    "value": "mosaic_box_bottomright",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "functools.partial(self._scale_box, image=images[3], mosaic_image=mosaic_image_bottomright)",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "boxes[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_209": {
                "variable": {
                    "value": "idx_br",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0], [2], [1], [3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_216": {
                "variable": {
                    "value": "mosaic_box_bottomright",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.tensor_scatter_nd_add(mosaic_box_bottomright, idx_br, update_br)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_246": {
                "variable": {
                    "value": "upper_stack",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mosaic_sub_images[0], mosaic_sub_images[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_248": {
                "variable": {
                    "value": "lower_stack",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mosaic_sub_images[2], mosaic_sub_images[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_250": {
                "variable": {
                    "value": "mosaic_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upper_stack, lower_stack]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "vectorized_map_154": {
                "fn": {
                    "value": "functools.partial(self._scale_box, image=images[0], mosaic_image=mosaic_image_topleft)",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "boxes[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_scatter_nd_add_178": {
                "tensor": {
                    "value": "mosaic_box_topright",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.vectorized_map(functools.partial(self._scale_box, image=images[1], mosaic_image=mosaic_image_topright), boxes[1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.tensor_scatter_nd_add(mosaic_box_topright, idx_tp, update_tp))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_tp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[1], [3]])",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "update_tp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[tf.shape(mosaic_image_topleft)[0]] * num_boxes, [tf.shape(mosaic_image_topleft)[0]] * num_boxes]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_scatter_nd_add_197": {
                "tensor": {
                    "value": "mosaic_box_bottomleft",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.vectorized_map(functools.partial(self._scale_box, image=images[2], mosaic_image=mosaic_image_bottomleft), boxes[2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.tensor_scatter_nd_add(mosaic_box_bottomleft, idx_bl, update_bl))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_bl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[0], [2]])",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "update_bl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[tf.shape(mosaic_image_topleft)[1]] * num_boxes, [tf.shape(mosaic_image_topleft)[1]] * num_boxes]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_scatter_nd_add_217": {
                "tensor": {
                    "value": "mosaic_box_bottomright",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.vectorized_map(functools.partial(self._scale_box, image=images[3], mosaic_image=mosaic_image_bottomright), boxes[3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.tensor_scatter_nd_add(mosaic_box_bottomright, idx_br, update_br))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_br",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[0], [2], [1], [3]])",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "update_br",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[tf.shape(mosaic_image_topright)[1]] * num_boxes, [tf.shape(mosaic_image_topright)[1]] * num_boxes, [tf.shape(mosaic_image_bottomleft)[0]] * num_boxes, [tf.shape(mosaic_image_bottomleft)[0]] * num_boxes]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_64": {
                "x": {
                    "value": "self.out_size[0] * (self._minimum_mosaic_image_dim / 100)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_67": {
                "x": {
                    "value": "self.out_size[0] * ((100 - self._minimum_mosaic_image_dim) / 100)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_75": {
                "x": {
                    "value": "self.out_size[1] * (self._minimum_mosaic_image_dim / 100)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_78": {
                "x": {
                    "value": "self.out_size[1] * ((100 - self._minimum_mosaic_image_dim) / 100)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_99": {
                "input": {
                    "value": "mosaic_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([upper_stack, lower_stack], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_100": {
                "input": {
                    "value": "mosaic_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([upper_stack, lower_stack], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_101": {
                "input": {
                    "value": "mosaic_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([upper_stack, lower_stack], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_102": {
                "input": {
                    "value": "mosaic_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([upper_stack, lower_stack], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_174": {
                "input": {
                    "value": "mosaic_image_topleft",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize(images[0], (x, y))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_175": {
                "input": {
                    "value": "mosaic_image_topleft",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize(images[0], (x, y))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_193": {
                "input": {
                    "value": "mosaic_image_topleft",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize(images[0], (x, y))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_194": {
                "input": {
                    "value": "mosaic_image_topleft",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize(images[0], (x, y))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_211": {
                "input": {
                    "value": "mosaic_image_topright",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize(images[1], (self.out_size[0] - x, y))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_212": {
                "input": {
                    "value": "mosaic_image_topright",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize(images[1], (self.out_size[0] - x, y))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_213": {
                "input": {
                    "value": "mosaic_image_bottomleft",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize(images[2], (x, self.out_size[1] - y))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_214": {
                "input": {
                    "value": "mosaic_image_bottomleft",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize(images[2], (x, self.out_size[1] - y))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "efficientdet/aug/mosaic_test.py": {
        "tensorflow": {
            "uniform_32": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(4, 512, 512, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_34": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(4, 2, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "511",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(4, 4, 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "uniform_41": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(4, 2, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "511",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "disable_eager_execution_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_28": {
                "seed": {
                    "value": "111111",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/backbone/backbone_factory.py": {
        "tensorflow": {
            "exists_71": {
                "path": {
                    "value": "param_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model_params.txt')",
                            "Call"
                        ]
                    ]
                }
            },
            "exists_72": {
                "path": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mkdir_73": {
                "path": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GFile_74": {
                "name": {
                    "value": "param_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model_params.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/backbone/efficientnet_builder.py": {
        "tensorflow": {
            "convert_to_tensor_159": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(features, name='features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'pooled_features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_tensor_250": {
                "x": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "identity_284": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(features, name='features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'pooled_features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "swish_154": {
                "x": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(features, name='features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'pooled_features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_160": {
                "x": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(features, name='features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'pooled_features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'logits')",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_286": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(features, name='features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'pooled_features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pooled_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_288": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(features, name='features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'pooled_features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exists_267": {
                "path": {
                    "value": "param_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model_params.txt')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu6_157": {
                "features": {
                    "value": "features + np.float32(3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exists_268": {
                "path": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "makedirs_269": {
                "path": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GFile_270": {
                "name": {
                    "value": "param_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model_params.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/backbone/efficientnet_builder_test.py": {
        "tensorflow": {
            "zeros_32": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "disable_eager_execution_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/backbone/efficientnet_lite_builder.py": {
        "tensorflow": {
            "identity_167": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(features, 'features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'pooled_features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_169": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(features, 'features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'pooled_features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pooled_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_171": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(features, 'features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'pooled_features')",
                            "Call"
                        ],
                        [
                            "tf.identity(features, 'logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_150": {
                "filename": {
                    "value": "param_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model_params.txt')",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_151": {
                "filename": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MakeDirs_152": {
                "dirname": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GFile_153": {
                "name": {
                    "value": "param_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model_params.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/backbone/efficientnet_lite_builder_test.py": {
        "tensorflow": {
            "zeros_32": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "disable_eager_execution_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/backbone/efficientnet_model.py": {
        "tensorflow": {
            "normal_73": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(2.0 / fan_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "uniform_95": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "minval": {
                    "value": "-init_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "init_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / np.sqrt(shape[1])",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_165": {
                "variable": {
                    "value": "self._se_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "se_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self._data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_174": {
                "variable": {
                    "value": "self._se_expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "output_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "round_filters(block_args.output_filters, self._global_params)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self._data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2d_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_204": {
                "variable": {
                    "value": "self._superpixel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "block_args.input_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "global_params.data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_346": {
                "variable": {
                    "value": "self._project_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros([2, 2, depth, 4 * depth], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "filters * multiplier",
                            "BinOp"
                        ],
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ],
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self._data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "get_conv_name()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_449": {
                "variable": {
                    "value": "self._project_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros([2, 2, depth, 4 * depth], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "filters * multiplier",
                            "BinOp"
                        ],
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ],
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "self._block_args.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "get_conv_name()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_512": {
                "variable": {
                    "value": "self._conv_stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "round_filters(stem_filters, global_params, global_params.fix_head_stem)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "global_params.data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2D_540": {
                "variable": {
                    "value": "self._conv_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "round_filters(1280, global_params, global_params.fix_head_stem)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "global_params.data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_555": {
                "variable": {
                    "value": "self._avg_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "global_params.data_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool_187": {
                "variable": {
                    "value": "se_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, inputs.shape[h_axis], inputs.shape[w_axis], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_193": {
                "variable": {
                    "value": "se_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[h_axis, w_axis]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2D_292": {
                "variable": {
                    "value": "self._fused_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros([2, 2, depth, 4 * depth], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "filters * multiplier",
                            "BinOp"
                        ],
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ],
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[kernel_size, kernel_size]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "self._block_args.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self._data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "get_conv_name()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DepthwiseConv2D_321": {
                "variable": {
                    "value": "self._depthwise_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[kernel_size, kernel_size]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "self._block_args.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depthwise_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self._data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "depthwise_conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_403": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.super_pixel(x, training)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(self._fused_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(self._depthwise_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._se(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._bn1(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_434": {
                "variable": {
                    "value": "self._expand_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros([2, 2, depth, 4 * depth], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "filters * multiplier",
                            "BinOp"
                        ],
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ],
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[kernel_size, kernel_size]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "get_conv_name()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_489": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.super_pixel(x, training)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(self._fused_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(self._depthwise_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._se(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._bn1(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_558": {
                "variable": {
                    "value": "self._fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "global_params.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "dense_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_565": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "global_params.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool_581": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._relu_fn(self._bn(self._conv_head(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(outputs, ksize=kernel_size, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "self._avg_pooling(outputs)",
                            "Call"
                        ],
                        [
                            "self._dropout(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "self._dropout(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, [self.h_axis, self.w_axis])",
                            "Call"
                        ],
                        [
                            "self._fc(outputs)",
                            "Call"
                        ],
                        [
                            "self._fc(outputs)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._stem(inputs, training)",
                            "Call"
                        ],
                        [
                            "self._head(outputs, training, pooled_features_only)",
                            "Call"
                        ],
                        [
                            "block(outputs, training=training, survival_prob=survival_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._block_args.kernel_size",
                            "Attribute"
                        ],
                        [
                            "self._block_args.kernel_size",
                            "Attribute"
                        ],
                        [
                            "[1, shape[self.h_axis], shape[self.w_axis], 1]",
                            "List"
                        ],
                        [
                            "block_args.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_196": {
                "x": {
                    "value": "se_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, inputs.shape[h_axis], inputs.shape[w_axis], 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(inputs, [h_axis, w_axis], keepdims=True)",
                            "Call"
                        ],
                        [
                            "self._se_expand(self._relu_fn(self._se_reduce(se_tensor)))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_305": {
                "variable": {
                    "value": "self._expand_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros([2, 2, depth, 4 * depth], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "filters * multiplier",
                            "BinOp"
                        ],
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ],
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self._data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "get_conv_name()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_405": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.super_pixel(x, training)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(self._fused_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(self._depthwise_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._se(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._bn1(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_491": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.super_pixel(x, training)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(self._fused_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(self._depthwise_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._se(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._bn1(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_413": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.super_pixel(x, training)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(self._fused_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(self._depthwise_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._se(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._bn1(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_500": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.super_pixel(x, training)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(self._fused_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn1(self._depthwise_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._se(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ],
                        [
                            "self._relu_fn(self._bn0(self._expand_conv(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._bn1(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x, -6, 6)",
                            "Call"
                        ],
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_589": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._relu_fn(self._bn(self._conv_head(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(outputs, ksize=kernel_size, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "self._avg_pooling(outputs)",
                            "Call"
                        ],
                        [
                            "self._dropout(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "self._dropout(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, [self.h_axis, self.w_axis])",
                            "Call"
                        ],
                        [
                            "self._fc(outputs)",
                            "Call"
                        ],
                        [
                            "self._fc(outputs)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._stem(inputs, training)",
                            "Call"
                        ],
                        [
                            "self._head(outputs, training, pooled_features_only)",
                            "Call"
                        ],
                        [
                            "block(outputs, training=training, survival_prob=survival_prob)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[self.h_axis, self.w_axis]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/backbone/efficientnet_model_test.py": {
        "tensorflow": {
            "zeros_27": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 128, 128, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 128, 128, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 128, 128, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 128, 128, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 128, 128, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 128, 128, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_192": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 128, 128, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 128, 128, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/coco_metric.py": {
        "tensorflow": {
            "get_logger_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_258": {
                "name": {
                    "value": "coco_metric",
                    "type": "str",
                    "possible_values": []
                }
            },
            "numpy_function_260": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "self.update_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[groundtruth_data, detections]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "numpy_function_262": {
                "variable": {
                    "value": "metrics",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "self.result",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "numpy_function_266": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "self.update_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[groundtruth_data, detections]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "numpy_function_268": {
                "variable": {
                    "value": "metrics",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "self.result",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_135": {
                "name": {
                    "value": "output_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.testdev_dir, fname + '.json')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/coco_metric_test.py": {
        "tensorflow": {
            "constant_27": {
                "variable": {
                    "value": "self.groundtruth_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[10.0, 10.0, 20.0, 20.0, 0.0, 100.0, 1], [10.0, 10.0, 30.0, 15.0, 0.0, 100.0, 2], [30.0, 30.0, 40.0, 50.0, 0.0, 100.0, 3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_33": {
                "variable": {
                    "value": "self.detections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1.0, 10.0, 10.0, 10.0, 10.0, 0.6, 1], [1.0, 10.0, 10.0, 5.0, 20.0, 0.5, 2]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/dataloader.py": {
        "tensorflow": {
            "reshape_224": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, [-1, dimension])",
                            "Call"
                        ],
                        [
                            "example_decoder.decode(value)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_231": {
                "variable": {
                    "value": "padded_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[data, paddings]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_232": {
                "variable": {
                    "value": "padded_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "padded_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([data, paddings], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(padded_data, output_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_43": {
                "variable": {
                    "value": "self._image_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_48": {
                "variable": {
                    "value": "self._crop_offset_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_49": {
                "variable": {
                    "value": "self._crop_offset_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_62": {
                "variable": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_88": {
                "variable": {
                    "value": "random_scale_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "scale_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxval": {
                    "value": "scale_max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_89": {
                "variable": {
                    "value": "scaled_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "random_scale_factor * target_size[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_90": {
                "variable": {
                    "value": "scaled_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "random_scale_factor * target_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_93": {
                "variable": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(self._image)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_94": {
                "variable": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(self._image)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_97": {
                "variable": {
                    "value": "image_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_scale_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(scaled_x, tf.float32) / width",
                            "BinOp"
                        ],
                        [
                            "tf.cast(self._output_size[1], tf.float32) / width",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "image_scale_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(scaled_y, tf.float32) / height",
                            "BinOp"
                        ],
                        [
                            "tf.cast(self._output_size[0], tf.float32) / height",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_101": {
                "variable": {
                    "value": "scaled_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height * image_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_102": {
                "variable": {
                    "value": "scaled_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width * image_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_103": {
                "variable": {
                    "value": "offset_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scaled_height - self._output_size[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_104": {
                "variable": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scaled_width - self._output_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_107": {
                "variable": {
                    "value": "offset_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "offset_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(scaled_height - self._output_size[0], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.0, offset_y) * tf.random.uniform([], 0, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(offset_y, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_108": {
                "variable": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(scaled_width - self._output_size[1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.0, offset_x) * tf.random.uniform([], 0, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(offset_x, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_118": {
                "variable": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(self._image)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_119": {
                "variable": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(self._image)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_122": {
                "variable": {
                    "value": "image_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_scale_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(scaled_x, tf.float32) / width",
                            "BinOp"
                        ],
                        [
                            "tf.cast(self._output_size[1], tf.float32) / width",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "image_scale_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(scaled_y, tf.float32) / height",
                            "BinOp"
                        ],
                        [
                            "tf.cast(self._output_size[0], tf.float32) / height",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_123": {
                "variable": {
                    "value": "scaled_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height * image_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_124": {
                "variable": {
                    "value": "scaled_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width * image_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_132": {
                "variable": {
                    "value": "scaled_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[self._scaled_height, self._scaled_width]",
                    "type": "List",
                    "possible_values": []
                },
                "method": {
                    "value": "method",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.ResizeMethod.BILINEAR",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_to_bounding_box_138": {
                "variable": {
                    "value": "output_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "scaled_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize(self._image, [self._scaled_height, self._scaled_width], method=method)",
                            "Call"
                        ],
                        [
                            "scaled_image[self._crop_offset_y:self._crop_offset_y + self._output_size[0], self._crop_offset_x:self._crop_offset_x + self._output_size[1], :]",
                            "Subscript"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "target_height": {
                    "value": "self._output_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target_width": {
                    "value": "self._output_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_141": {
                "variable": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "output_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.pad_to_bounding_box(scaled_image, 0, 0, self._output_size[0], self._output_size[1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._image.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.keras.mixed_precision.global_policy().compute_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unstack_160": {
                "variable": {
                    "value": "(ymin, xmin, ymax, xmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([ymin, xmin, ymax, xmax], axis=1)",
                            "Call"
                        ],
                        [
                            "preprocessor.box_list_scale(boxlist, self._scaled_height, self._scaled_width).get()",
                            "Call"
                        ],
                        [
                            "boxes * image_scale",
                            "BinOp"
                        ],
                        [
                            "self.clip_boxes(boxes)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_boxes']",
                            "Subscript"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(boxes, -1, [self._max_instances_per_image, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_161": {
                "variable": {
                    "value": "ymin",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "ymin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(ymin, 0, self._output_size[0] - 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self._output_size[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_162": {
                "variable": {
                    "value": "xmin",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "xmin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(xmin, 0, self._output_size[1] - 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self._output_size[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_163": {
                "variable": {
                    "value": "ymax",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "ymax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(ymax, 0, self._output_size[0] - 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self._output_size[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_164": {
                "variable": {
                    "value": "xmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "xmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(xmax, 0, self._output_size[1] - 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self._output_size[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_165": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_176": {
                "variable": {
                    "value": "box_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self._crop_offset_y, self._crop_offset_x, self._crop_offset_y, self._crop_offset_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_186": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal((boxes[:, 2] - boxes[:, 0]) * (boxes[:, 3] - boxes[:, 1]), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_189": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([ymin, xmin, ymax, xmax], axis=1)",
                            "Call"
                        ],
                        [
                            "preprocessor.box_list_scale(boxlist, self._scaled_height, self._scaled_width).get()",
                            "Call"
                        ],
                        [
                            "boxes * image_scale",
                            "BinOp"
                        ],
                        [
                            "self.clip_boxes(boxes)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_boxes']",
                            "Subscript"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(boxes, -1, [self._max_instances_per_image, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal((boxes[:, 2] - boxes[:, 0]) * (boxes[:, 3] - boxes[:, 1]), 0))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_not(data['groundtruth_is_crowd']))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_190": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self._classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal((boxes[:, 2] - boxes[:, 0]) * (boxes[:, 3] - boxes[:, 1]), 0))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_not(data['groundtruth_is_crowd']))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_371": {
                "variable": {
                    "value": "num_positives_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "num_positives",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_372": {
                "variable": {
                    "value": "labels[mean_num_positives]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.expand_dims(num_positives_batch, 0), [batch_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_389": {
                "variable": {
                    "value": "groundtruth_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[boxes, is_crowds, areas, classes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Options_398": {
                "variable": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_63": {
                "value": {
                    "value": "mean_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_64": {
                "value": {
                    "value": "stddev_rgb",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_182": {
                "x": {
                    "value": "tf.reshape(box_offset, [1, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_225": {
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(data, [-1, dimension])",
                            "Call"
                        ],
                        [
                            "example_decoder.decode(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_227": {
                "control_inputs": {
                    "value": "[tf.assert_less(num_instances, max_instances_per_image, message=msg)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_230": {
                "shape": {
                    "value": "[pad_length, dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_295": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(classes, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_299": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(classes, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_340": {
                "variable": {
                    "value": "source_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(source_id, tf.constant(''))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "-1",
                    "type": "str",
                    "possible_values": []
                },
                "y": {
                    "value": "source_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data['source_id']",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.equal(source_id, tf.constant('')), '-1', source_id)",
                            "Call"
                        ],
                        [
                            "tf.strings.to_number(source_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_number_342": {
                "variable": {
                    "value": "source_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data['source_id']",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.equal(source_id, tf.constant('')), '-1', source_id)",
                            "Call"
                        ],
                        [
                            "tf.strings.to_number(source_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_347": {
                "variable": {
                    "value": "is_crowds",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "is_crowds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data['groundtruth_is_crowd']",
                            "Subscript"
                        ],
                        [
                            "tf.cast(is_crowds, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(is_crowds, 0, [self._max_instances_per_image, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_378": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_45": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data['image']",
                            "Subscript"
                        ],
                        [
                            "input_processor.resize_and_crop_image()",
                            "Call"
                        ],
                        [
                            "image * 2.0 / 255 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_46": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data['image']",
                            "Subscript"
                        ],
                        [
                            "input_processor.resize_and_crop_image()",
                            "Call"
                        ],
                        [
                            "image * 2.0 / 255 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_95": {
                "x": {
                    "value": "scaled_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(random_scale_factor * target_size[0], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_96": {
                "x": {
                    "value": "scaled_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(random_scale_factor * target_size[1], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_105": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "offset_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(scaled_height - self._output_size[0], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.0, offset_y) * tf.random.uniform([], 0, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(offset_y, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_105": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_106": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(scaled_width - self._output_size[1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.0, offset_x) * tf.random.uniform([], 0, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(offset_x, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_106": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_120": {
                "x": {
                    "value": "self._output_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_121": {
                "x": {
                    "value": "self._output_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_182": {
                "tensor": {
                    "value": "box_offset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([self._crop_offset_y, self._crop_offset_x, self._crop_offset_y, self._crop_offset_x])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "not_equal_187": {
                "x": {
                    "value": "(boxes[:, 2] - boxes[:, 0]) * (boxes[:, 3] - boxes[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_289": {
                "name": {
                    "value": "parser",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_358": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data['image']",
                            "Subscript"
                        ],
                        [
                            "input_processor.resize_and_crop_image()",
                            "Call"
                        ],
                        [
                            "image * 2.0 / 255 - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._image.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.keras.mixed_precision.global_policy().compute_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "map_structure_359": {
                "variable": {
                    "value": "box_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda box_target: tf.cast(box_target, dtype=dtype)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "box_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nest.map_structure(lambda box_target: tf.cast(box_target, dtype=dtype), box_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_373": {
                "input": {
                    "value": "tf.expand_dims(num_positives_batch, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_384": {
                "variable": {
                    "value": "labels[cls_targets_%d % level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "labels['cls_targets_%d' % level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_386": {
                "variable": {
                    "value": "labels[box_targets_%d % level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "labels['box_targets_%d' % level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordDataset_428": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_93": {
                "input": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_94": {
                "input": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_118": {
                "input": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_119": {
                "input": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_less_228": {
                "x": {
                    "value": "num_instances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(data)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "max_instances_per_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_shape[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "message": {
                    "value": "msg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'ERROR: please increase config.max_instances_per_image'",
                            "Constant"
                        ]
                    ]
                }
            },
            "cast_295": {
                "x": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(self._classes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_classes']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.cast(classes, dtype=tf.float32), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(classes, dtype=tf.float32), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(classes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(classes, -1, [self._max_instances_per_image, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_299": {
                "x": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(self._classes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_classes']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.cast(classes, dtype=tf.float32), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(classes, dtype=tf.float32), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(classes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(classes, -1, [self._max_instances_per_image, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_304": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_not(data['groundtruth_is_crowd'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_305": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(self._classes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_classes']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(tf.cast(classes, dtype=tf.float32), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(classes, dtype=tf.float32), [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(classes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(classes, -1, [self._max_instances_per_image, 1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal((boxes[:, 2] - boxes[:, 0]) * (boxes[:, 3] - boxes[:, 1]), 0))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_not(data['groundtruth_is_crowd']))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_306": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([ymin, xmin, ymax, xmax], axis=1)",
                            "Call"
                        ],
                        [
                            "preprocessor.box_list_scale(boxlist, self._scaled_height, self._scaled_width).get()",
                            "Call"
                        ],
                        [
                            "boxes * image_scale",
                            "BinOp"
                        ],
                        [
                            "self.clip_boxes(boxes)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "data['groundtruth_boxes']",
                            "Subscript"
                        ],
                        [
                            "tf.gather_nd(boxes, indices)",
                            "Call"
                        ],
                        [
                            "pad_to_fixed_size(boxes, -1, [self._max_instances_per_image, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal((boxes[:, 2] - boxes[:, 0]) * (boxes[:, 3] - boxes[:, 1]), 0))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_not(data['groundtruth_is_crowd']))",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_341": {
                "x": {
                    "value": "source_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data['source_id']",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.equal(source_id, tf.constant('')), '-1', source_id)",
                            "Call"
                        ],
                        [
                            "tf.strings.to_number(source_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant('')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_373": {
                "input": {
                    "value": "num_positives_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(num_positives)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_341": {
                "value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_policy_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logical_not_304": {
                "x": {
                    "value": "data['groundtruth_is_crowd']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_360": {
                "x": {
                    "value": "box_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._image.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.keras.mixed_precision.global_policy().compute_dtype",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "efficientdet/dataloader_test.py": {
        "tensorflow": {
            "TFRecordDataset_41": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "[tfrecord_path]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_seed_30": {
                "seed": {
                    "value": "111111",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/dataset/create_coco_tfrecord.py": {
        "tensorflow": {
            "Example_197": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_108": {
                "name": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(image_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_207": {
                "name": {
                    "value": "object_annotations_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_233": {
                "name": {
                    "value": "caption_annotations_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_255": {
                "name": {
                    "value": "image_info_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.image_info_file",
                            "Attribute"
                        ],
                        [
                            "FLAGS.object_annotations_file",
                            "Attribute"
                        ],
                        [
                            "FLAGS.caption_annotations_file",
                            "Attribute"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordWriter_287": {
                "path": {
                    "value": "output_path + '-%05d-of-%05d.tfrecord' % (i, num_shards)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isdir_351": {
                "path": {
                    "value": "directory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.dirname(FLAGS.output_file_prefix)",
                            "Call"
                        ]
                    ]
                }
            },
            "mkdir_352": {
                "path": {
                    "value": "directory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.dirname(FLAGS.output_file_prefix)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_197": {
                "feature": {
                    "value": "feature_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'image/height': tfrecord_util.int64_feature(image_height), 'image/width': tfrecord_util.int64_feature(image_width), 'image/filename': tfrecord_util.bytes_feature(filename.encode('utf8')), 'image/source_id': tfrecord_util.bytes_feature(str(image_id).encode('utf8')), 'image/key/sha256': tfrecord_util.bytes_feature(key.encode('utf8')), 'image/encoded': tfrecord_util.bytes_feature(encoded_jpg), 'image/format': tfrecord_util.bytes_feature('jpeg'.encode('utf8'))}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "efficientdet/dataset/create_coco_tfrecord_test.py": {
        "tensorflow": {
            "main_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/dataset/create_pascal_tfrecord.py": {
        "tensorflow": {
            "Example_197": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': tfrecord_util.int64_feature(height), 'image/width': tfrecord_util.int64_feature(width), 'image/filename': tfrecord_util.bytes_feature(data['filename'].encode('utf8')), 'image/source_id': tfrecord_util.bytes_feature(str(image_id).encode('utf8')), 'image/key/sha256': tfrecord_util.bytes_feature(key.encode('utf8')), 'image/encoded': tfrecord_util.bytes_feature(encoded_jpg), 'image/format': tfrecord_util.bytes_feature('jpeg'.encode('utf8')), 'image/object/bbox/xmin': tfrecord_util.float_list_feature(xmin), 'image/object/bbox/xmax': tfrecord_util.float_list_feature(xmax), 'image/object/bbox/ymin': tfrecord_util.float_list_feature(ymin), 'image/object/bbox/ymax': tfrecord_util.float_list_feature(ymax), 'image/object/area': tfrecord_util.float_list_feature(area), 'image/object/class/text': tfrecord_util.bytes_list_feature(classes_text), 'image/object/class/label': tfrecord_util.int64_list_feature(classes), 'image/object/difficult': tfrecord_util.int64_list_feature(difficult_obj), 'image/object/truncated': tfrecord_util.int64_list_feature(truncated), 'image/object/view': tfrecord_util.bytes_list_feature(poses)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_129": {
                "name": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(images_dir, data['filename'])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exists_252": {
                "path": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.dirname(FLAGS.output_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "makedirs_253": {
                "path": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.dirname(FLAGS.output_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_257": {
                "path": {
                    "value": "FLAGS.output_path + '-%05d-of-%05d.tfrecord' % (i, FLAGS.num_shards)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GFile_316": {
                "name": {
                    "value": "json_file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(FLAGS.output_path), 'json_' + os.path.basename(FLAGS.output_path) + '.json')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Features_198": {
                "feature": {
                    "value": "{'image/height': tfrecord_util.int64_feature(height), 'image/width': tfrecord_util.int64_feature(width), 'image/filename': tfrecord_util.bytes_feature(data['filename'].encode('utf8')), 'image/source_id': tfrecord_util.bytes_feature(str(image_id).encode('utf8')), 'image/key/sha256': tfrecord_util.bytes_feature(key.encode('utf8')), 'image/encoded': tfrecord_util.bytes_feature(encoded_jpg), 'image/format': tfrecord_util.bytes_feature('jpeg'.encode('utf8')), 'image/object/bbox/xmin': tfrecord_util.float_list_feature(xmin), 'image/object/bbox/xmax': tfrecord_util.float_list_feature(xmax), 'image/object/bbox/ymin': tfrecord_util.float_list_feature(ymin), 'image/object/bbox/ymax': tfrecord_util.float_list_feature(ymax), 'image/object/area': tfrecord_util.float_list_feature(area), 'image/object/class/text': tfrecord_util.bytes_list_feature(classes_text), 'image/object/class/label': tfrecord_util.int64_list_feature(classes), 'image/object/difficult': tfrecord_util.int64_list_feature(difficult_obj), 'image/object/truncated': tfrecord_util.int64_list_feature(truncated), 'image/object/view': tfrecord_util.bytes_list_feature(poses)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "GFile_263": {
                "name": {
                    "value": "FLAGS.label_map_json_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_294": {
                "name": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(annotations_dir, example + '.xml')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/dataset/create_pascal_tfrecord_test.py": {
        "tensorflow": {
            "main_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/dataset/inspect_tfrecords.py": {
        "tensorflow": {
            "constant_75": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([0.485, 0.456, 0.406])",
                            "Call"
                        ],
                        [
                            "tf.reshape(offset, (1, 1, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_77": {
                "variable": {
                    "value": "scale_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "variable": {
                    "value": "scale_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scale_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([0.229, 0.224, 0.225])",
                            "Call"
                        ],
                        [
                            "tf.reshape(scale_image, (1, 1, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/dataset/tfrecord_util.py": {
        "tensorflow": {
            "Feature_21": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_25": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_29": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_33": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_37": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_57": {
                "name": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Int64List_21": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_25": {
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BytesList_29": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_33": {
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "FloatList_37": {
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TFRecordWriter_106": {
                "path": {
                    "value": "file_name",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/det_model_fn.py": {
        "tensorflow": {
            "where_68": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "global_step < lr_warmup_step",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "linear_warmup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "adjusted_lr_warmup_init + tf.cast(global_step, dtype=tf.float32) / lr_warmup_step * (adjusted_learning_rate - adjusted_lr_warmup_init)",
                            "BinOp"
                        ],
                        [
                            "adjusted_lr_warmup_init + tf.cast(step, dtype=tf.float32) / lr_warmup_step * (adjusted_lr - adjusted_lr_warmup_init)",
                            "BinOp"
                        ],
                        [
                            "adjusted_lr_warmup_init + tf.cast(step, dtype=tf.float32) / lr_warmup_step * (adjusted_lr - adjusted_lr_warmup_init)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "adjusted_learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_86": {
                "variable": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "total_steps - lr_warmup_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_178": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "huber_loss_179": {
                "variable": {
                    "value": "box_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "box_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "box_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "postprocess.to_list(box_outputs)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.not_equal(box_targets, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "delta": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "tf.losses.Reduction.SUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_280": {
                "variable": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "cls_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_353": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_73": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "global_step < start_global_step",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(global_step < lr_warmup_step, linear_warmup, adjusted_learning_rate)",
                            "Call"
                        ],
                        [
                            "tf.where(global_step < start_global_step, learning_rate, adjusted_learning_rate * mult)",
                            "Call"
                        ],
                        [
                            "learning_rate_schedule(params, global_step)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "adjusted_learning_rate * mult",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_89": {
                "condition": {
                    "value": "step < lr_warmup_step",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "linear_warmup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "adjusted_lr_warmup_init + tf.cast(global_step, dtype=tf.float32) / lr_warmup_step * (adjusted_learning_rate - adjusted_lr_warmup_init)",
                            "BinOp"
                        ],
                        [
                            "adjusted_lr_warmup_init + tf.cast(step, dtype=tf.float32) / lr_warmup_step * (adjusted_lr - adjusted_lr_warmup_init)",
                            "BinOp"
                        ],
                        [
                            "adjusted_lr_warmup_init + tf.cast(step, dtype=tf.float32) / lr_warmup_step * (adjusted_lr - adjusted_lr_warmup_init)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "cosine_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5 * adjusted_lr * (1 + tf.cos(np.pi * tf.cast(step, tf.float32) / decay_steps))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_101": {
                "condition": {
                    "value": "step < lr_warmup_step",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "linear_warmup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "adjusted_lr_warmup_init + tf.cast(global_step, dtype=tf.float32) / lr_warmup_step * (adjusted_learning_rate - adjusted_lr_warmup_init)",
                            "BinOp"
                        ],
                        [
                            "adjusted_lr_warmup_init + tf.cast(step, dtype=tf.float32) / lr_warmup_step * (adjusted_lr - adjusted_lr_warmup_init)",
                            "BinOp"
                        ],
                        [
                            "adjusted_lr_warmup_init + tf.cast(step, dtype=tf.float32) / lr_warmup_step * (adjusted_lr - adjusted_lr_warmup_init)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "polynomial_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "adjusted_lr * tf.pow(1 - tf.cast(step, tf.float32) / total_steps, power)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_154": {
                "variable": {
                    "value": "normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "normalizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(normalizer, dtype=y_pred.dtype)",
                            "Call"
                        ],
                        [
                            "num_positives * 4.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y_pred.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_158": {
                "variable": {
                    "value": "pred_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_166": {
                "variable": {
                    "value": "ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_true * (1.0 - label_smoothing) + 0.5 * label_smoothing",
                            "BinOp"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Variable_216": {
                "variable": {
                    "value": "moving_normalizer_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_normalizer",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "synchronization": {
                    "value": "tf.VariableSynchronization.ON_READ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "aggregation": {
                    "value": "tf.VariableAggregation.MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_235": {
                "variable": {
                    "value": "cls_targets_at_level",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels['cls_targets_%d' % level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "params['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cls_outputs[level].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_268": {
                "variable": {
                    "value": "cls_loss_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(cls_losses)",
                            "Call"
                        ],
                        [
                            "focal_loss(cls_outputs[level], cls_targets_at_level, params['alpha'], params['gamma'], normalizer=num_positives_sum, label_smoothing=params['label_smoothing'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_loss, [bs, -1, width, height, params['num_classes']])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_loss, [bs, width, height, -1, params['num_classes']])",
                            "Call"
                        ],
                        [
                            "cls_loss * tf.cast(tf.expand_dims(tf.not_equal(labels['cls_targets_%d' % level], -2), -1), cls_loss.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.metrics.mean(kwargs['cls_loss_repeat'])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_348": {
                "variable": {
                    "value": "cls_outputs[level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_outputs[level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_349": {
                "variable": {
                    "value": "box_outputs[level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "box_outputs[level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_374": {
                "variable": {
                    "value": "ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "moving_average_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['moving_average_decay']",
                            "Subscript"
                        ]
                    ]
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_391": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_392": {
                "variable": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_492": {
                "variable": {
                    "value": "cls_loss_repeat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.expand_dims(cls_loss, 0), [params['batch_size']])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params['batch_size'], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_496": {
                "variable": {
                    "value": "box_loss_repeat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.expand_dims(box_loss, 0), [params['batch_size']])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params['batch_size'], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LoggingTensorHook_586": {
                "variable": {
                    "value": "logging_hook",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "{'step': global_step, 'det_loss': det_loss, 'cls_loss': cls_loss, 'box_loss': box_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "every_n_iter": {
                    "value": "params.get('iterations_per_loop', 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_99": {
                "x": {
                    "value": "1 - tf.cast(step, tf.float32) / total_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "power",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_153": {
                "name": {
                    "value": "focal_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_212": {
                "input_tensor": {
                    "value": "labels['mean_num_positives']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_242": {
                "variable": {
                    "value": "cls_targets_at_level",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cls_targets_at_level",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels['cls_targets_%d' % level], params['num_classes'], dtype=cls_outputs[level].dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_targets_at_level, [bs, -1, width, height])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_targets_at_level, [bs, width, height, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, -1, width, height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_246": {
                "variable": {
                    "value": "cls_targets_at_level",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cls_targets_at_level",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels['cls_targets_%d' % level], params['num_classes'], dtype=cls_outputs[level].dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_targets_at_level, [bs, -1, width, height])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_targets_at_level, [bs, width, height, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, width, height, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_259": {
                "variable": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(cls_losses)",
                            "Call"
                        ],
                        [
                            "focal_loss(cls_outputs[level], cls_targets_at_level, params['alpha'], params['gamma'], normalizer=num_positives_sum, label_smoothing=params['label_smoothing'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_loss, [bs, -1, width, height, params['num_classes']])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_loss, [bs, width, height, -1, params['num_classes']])",
                            "Call"
                        ],
                        [
                            "cls_loss * tf.cast(tf.expand_dims(tf.not_equal(labels['cls_targets_%d' % level], -2), -1), cls_loss.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.metrics.mean(kwargs['cls_loss_repeat'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, -1, width, height, params['num_classes']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_262": {
                "variable": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(cls_losses)",
                            "Call"
                        ],
                        [
                            "focal_loss(cls_outputs[level], cls_targets_at_level, params['alpha'], params['gamma'], normalizer=num_positives_sum, label_smoothing=params['label_smoothing'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_loss, [bs, -1, width, height, params['num_classes']])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_loss, [bs, width, height, -1, params['num_classes']])",
                            "Call"
                        ],
                        [
                            "cls_loss * tf.cast(tf.expand_dims(tf.not_equal(labels['cls_targets_%d' % level], -2), -1), cls_loss.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.metrics.mean(kwargs['cls_loss_repeat'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, width, height, -1, params['num_classes']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_265": {
                "x": {
                    "value": "tf.expand_dims(tf.not_equal(labels['cls_targets_%d' % level], -2), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cls_loss.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_281": {
                "inputs": {
                    "value": "box_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_281": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "add_n_292": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tf.trainable_variables() if var_match.match(v.name)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_380": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(global_step < lr_warmup_step, linear_warmup, adjusted_learning_rate)",
                            "Call"
                        ],
                        [
                            "tf.where(global_step < start_global_step, learning_rate, adjusted_learning_rate * mult)",
                            "Call"
                        ],
                        [
                            "learning_rate_schedule(params, global_step)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "params['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossShardOptimizer_388": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.MomentumOptimizer(learning_rate, momentum=params['momentum'])",
                            "Call"
                        ],
                        [
                            "tf.train.AdamOptimizer(learning_rate)",
                            "Call"
                        ],
                        [
                            "tf.tpu.CrossShardOptimizer(optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_483": {
                "variable": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "kwargs['cls_loss_repeat']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_484": {
                "variable": {
                    "value": "box_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "kwargs['box_loss_repeat']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_561": {
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_loss + params['box_loss_weight'] * box_loss",
                            "BinOp"
                        ],
                        [
                            "det_loss + reg_l2loss",
                            "BinOp"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "optimizer.minimize(total_loss, global_step, var_list=var_list)",
                            "Call"
                        ],
                        [
                            "optimizer.apply_gradients(grads_and_vars, global_step)",
                            "Call"
                        ],
                        [
                            "ema.apply(ema_vars)",
                            "Call"
                        ]
                    ]
                },
                "eval_metrics": {
                    "value": "eval_metrics",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(metric_fn, metric_fn_inputs)",
                            "Tuple"
                        ]
                    ]
                },
                "host_call": {
                    "value": "utils.get_tpu_host_call(global_step, params)",
                    "type": "Call",
                    "possible_values": []
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "training_hooks": {
                    "value": "training_hooks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ProfilerHook_572": {
                "variable": {
                    "value": "profile_hook",
                    "type": "Variable",
                    "possible_values": []
                },
                "save_steps": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "output_dir": {
                    "value": "params['model_dir']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "show_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "EstimatorSpec_599": {
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_loss + params['box_loss_weight'] * box_loss",
                            "BinOp"
                        ],
                        [
                            "det_loss + reg_l2loss",
                            "BinOp"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "optimizer.minimize(total_loss, global_step, var_list=var_list)",
                            "Call"
                        ],
                        [
                            "optimizer.apply_gradients(grads_and_vars, global_step)",
                            "Call"
                        ],
                        [
                            "ema.apply(ema_vars)",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "eval_metric_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "eval_metrics[0](**eval_metrics[1]) if eval_metrics else None",
                            "IfExp"
                        ]
                    ]
                },
                "scaffold": {
                    "value": "scaffold_fn() if scaffold_fn else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "training_hooks": {
                    "value": "training_hooks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cos_88": {
                "x": {
                    "value": "np.pi * tf.cast(step, tf.float32) / decay_steps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_266": {
                "input": {
                    "value": "tf.not_equal(labels['cls_targets_%d' % level], -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_269": {
                "x": {
                    "value": "cls_loss_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(cls_loss)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_369": {
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_383": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(global_step < lr_warmup_step, linear_warmup, adjusted_learning_rate)",
                            "Call"
                        ],
                        [
                            "tf.where(global_step < start_global_step, learning_rate, adjusted_learning_rate * mult)",
                            "Call"
                        ],
                        [
                            "learning_rate_schedule(params, global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_408": {
                "variable": {
                    "value": "(clipped_grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "clipped_grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.clip_by_norm(g, clip_norm) if g is not None else None for g in grads]",
                            "ListComp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "abs(params['clip_gradients_norm'])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_456": {
                "variable": {
                    "value": "img_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(kwargs['image_ids'], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nms_scores.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_467": {
                "variable": {
                    "value": "detections_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "detections_bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[img_ids * tf.ones_like(nms_scores), nms_boxes[:, :, 1], nms_boxes[:, :, 0], nms_boxes[:, :, 3] - nms_boxes[:, :, 1], nms_boxes[:, :, 2] - nms_boxes[:, :, 0], nms_scores, nms_classes]",
                            "List"
                        ],
                        [
                            "tf.stack(detections_bs, axis=-1, name='detnections')",
                            "Call"
                        ],
                        [
                            "postprocess.transform_detections(tf.stack(detections_bs))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "detnections",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_493": {
                "input": {
                    "value": "tf.expand_dims(cls_loss, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[params['batch_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_497": {
                "input": {
                    "value": "tf.expand_dims(box_loss, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[params['batch_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_547": {
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.get('ckpt') or params.get('backbone_ckpt')",
                            "BoolOp"
                        ]
                    ]
                },
                "assignment_map": {
                    "value": "var_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.get_ckpt_var_map(ckpt_path=checkpoint, ckpt_scope=ckpt_scope, var_scope=var_scope, skip_mismatch=params['skip_mismatch'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_548": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_555": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_vars_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ema.variables_to_restore(ema_vars)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_66": {
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_84": {
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_266": {
                "x": {
                    "value": "labels['cls_targets_%d' % level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_loss_293": {
                "t": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_399": {
                "name": {
                    "value": "clip",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_413": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_416": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_421": {
                "control_inputs": {
                    "value": "[train_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "numpy_function_436": {
                "variable": {
                    "value": "detections",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "functools.partial(nms_np.per_class_nms, nms_configs=nms_configs)",
                    "type": "Call",
                    "possible_values": []
                },
                "inp": {
                    "value": "[kwargs['boxes'][index], kwargs['scores'][index], kwargs['classes'][index], tf.slice(kwargs['image_ids'], [index], [1]), tf.slice(kwargs['image_scales'], [index], [1]), params['num_classes'], nms_configs['max_output_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_493": {
                "input": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(cls_losses)",
                            "Call"
                        ],
                        [
                            "focal_loss(cls_outputs[level], cls_targets_at_level, params['alpha'], params['gamma'], normalizer=num_positives_sum, label_smoothing=params['label_smoothing'])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_loss, [bs, -1, width, height, params['num_classes']])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_loss, [bs, width, height, -1, params['num_classes']])",
                            "Call"
                        ],
                        [
                            "cls_loss * tf.cast(tf.expand_dims(tf.not_equal(labels['cls_targets_%d' % level], -2), -1), cls_loss.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.metrics.mean(kwargs['cls_loss_repeat'])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_497": {
                "input": {
                    "value": "box_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.losses.huber_loss(box_targets, box_outputs, weights=mask, delta=delta, reduction=tf.losses.Reduction.SUM)",
                            "Call"
                        ],
                        [
                            "box_loss / normalizer",
                            "BinOp"
                        ],
                        [
                            "tf.add_n(box_losses) if box_losses else tf.constant(0.0)",
                            "IfExp"
                        ],
                        [
                            "tf.metrics.mean(kwargs['box_loss_repeat'])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Scaffold_556": {
                "saver": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(restore_vars_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_100": {
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_norm_409": {
                "t_list": {
                    "value": "clipped_grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.clip_by_norm(g, clip_norm) if g is not None else None for g in grads]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_449": {
                "values": {
                    "value": "detections_bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[img_ids * tf.ones_like(nms_scores), nms_boxes[:, :, 1], nms_boxes[:, :, 0], nms_boxes[:, :, 3] - nms_boxes[:, :, 1], nms_boxes[:, :, 2] - nms_boxes[:, :, 0], nms_scores, nms_classes]",
                            "List"
                        ],
                        [
                            "tf.stack(detections_bs, axis=-1, name='detnections')",
                            "Call"
                        ],
                        [
                            "postprocess.transform_detections(tf.stack(detections_bs))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_457": {
                "input": {
                    "value": "kwargs['image_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_474": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SessionRunArgs_580": {
                "fetches": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "tf.RunOptions(report_tensor_allocations_upon_oom=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_88": {
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_norm_405": {
                "t": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "abs(params['clip_gradients_norm'])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_459": {
                "input": {
                    "value": "nms_scores",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "slice_442": {
                "input_": {
                    "value": "kwargs['image_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[index]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_443": {
                "input_": {
                    "value": "kwargs['image_scales']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[index]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "RunOptions_582": {
                "report_tensor_allocations_upon_oom": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/det_model_fn_test.py": {
        "tensorflow": {
            "equal_23": {
                "variable": {
                    "value": "positive_label_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_25": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_28": {
                "variable": {
                    "value": "modulator",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gamma * targets * neg_logits - gamma * tf.math.log1p(tf.exp(neg_logits))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_31": {
                "variable": {
                    "value": "weighted_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "positive_label_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(targets, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "alpha * loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "(1.0 - alpha) * loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "uniform_41": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 32, 32, 90]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_42": {
                "variable": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 32, 32, 90]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_51": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[2, 2, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "main_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_22": {
                "name": {
                    "value": "focal_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_seed_40": {
                "seed": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_seed_49": {
                "seed": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_55": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[2, 2, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_56": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[2, 2, 2, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "log1p_29": {
                "x": {
                    "value": "tf.exp(neg_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_29": {
                "x": {
                    "value": "neg_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1.0 * logits",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "efficientdet/efficientdet_arch.py": {
        "tensorflow": {
            "softmax_436": {
                "variable": {
                    "value": "normalized_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.stack(edge_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_437": {
                "variable": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_438": {
                "variable": {
                    "value": "new_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "nodes * normalized_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_81": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.resize_nearest_neighbor(tf.cast(feat, tf.float32), [target_height, target_width]), dtype=feat.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(feat, filters=target_num_channels, kernel_size=(1, 1), padding='same', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "utils.batch_norm_act(feat, is_training_bn=is_training, act_type=None, data_format=data_format, strategy=strategy, name='bn')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "target_num_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "'resample_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling2d_107": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.resize_nearest_neighbor(tf.cast(feat, tf.float32), [target_height, target_width]), dtype=feat.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(feat, filters=target_num_channels, kernel_size=(1, 1), padding='same', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "utils.batch_norm_act(feat, is_training_bn=is_training, act_type=None, data_format=data_format, strategy=strategy, name='bn')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[height_stride_size + 1, width_stride_size + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[height_stride_size, width_stride_size]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_267": {
                "name_or_scope": {
                    "value": "class_net",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_286": {
                "name_or_scope": {
                    "value": "box_net",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_396": {
                "name_or_scope": {
                    "value": "fpn_cells",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_444": {
                "variable": {
                    "value": "weights_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "edge_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.cast(tf.Variable(1.0, name='WSM'), dtype=dtype) for _ in nodes]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.relu(tf.cast(tf.Variable(1.0, name='WSM'), dtype=dtype)) for _ in nodes]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(tf.Variable(lambda : tf.ones([num_filters]), name='WSM'), dtype=dtype) for _ in nodes]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.relu(tf.cast(tf.Variable(lambda : tf.ones([num_filters]), name='WSM'), dtype=dtype)) for _ in nodes]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "add_n_447": {
                "variable": {
                    "value": "new_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_initializer_188": {
                "value": {
                    "value": "-np.log((1 - 0.01) / 0.01)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_434": {
                "x": {
                    "value": "tf.Variable(1.0, name='WSM')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nodes[0].dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_436": {
                "values": {
                    "value": "edge_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.cast(tf.Variable(1.0, name='WSM'), dtype=dtype) for _ in nodes]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.relu(tf.cast(tf.Variable(1.0, name='WSM'), dtype=dtype)) for _ in nodes]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(tf.Variable(lambda : tf.ones([num_filters]), name='WSM'), dtype=dtype) for _ in nodes]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.relu(tf.cast(tf.Variable(lambda : tf.ones([num_filters]), name='WSM'), dtype=dtype)) for _ in nodes]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "softmax_455": {
                "variable": {
                    "value": "normalized_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.stack(edge_weights, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_456": {
                "variable": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_457": {
                "variable": {
                    "value": "new_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "nodes * normalized_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_489": {
                "name_or_scope": {
                    "value": "'fnode{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_121": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.image.resize_nearest_neighbor(tf.cast(feat, tf.float32), [target_height, target_width])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_159": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_216": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_398": {
                "name_or_scope": {
                    "value": "'cell_{}'.format(rep)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_434": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "WSM",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_441": {
                "features": {
                    "value": "tf.cast(tf.Variable(1.0, name='WSM'), dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_465": {
                "variable": {
                    "value": "weights_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "edge_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.cast(tf.Variable(1.0, name='WSM'), dtype=dtype) for _ in nodes]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.relu(tf.cast(tf.Variable(1.0, name='WSM'), dtype=dtype)) for _ in nodes]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(tf.Variable(lambda : tf.ones([num_filters]), name='WSM'), dtype=dtype) for _ in nodes]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.relu(tf.cast(tf.Variable(lambda : tf.ones([num_filters]), name='WSM'), dtype=dtype)) for _ in nodes]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "add_n_468": {
                "variable": {
                    "value": "new_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_508": {
                "name_or_scope": {
                    "value": "'op_after_combine{}'.format(len(feats))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_120": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.resize_nearest_neighbor(tf.cast(feat, tf.float32), [target_height, target_width]), dtype=feat.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(feat, filters=target_num_channels, kernel_size=(1, 1), padding='same', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "utils.batch_norm_act(feat, is_training_bn=is_training, act_type=None, data_format=data_format, strategy=strategy, name='bn')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_126": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.resize_nearest_neighbor(tf.cast(feat, tf.float32), [target_height, target_width]), dtype=feat.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(feat, filters=target_num_channels, kernel_size=(1, 1), padding='same', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "utils.batch_norm_act(feat, is_training_bn=is_training, act_type=None, data_format=data_format, strategy=strategy, name='bn')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_441": {
                "x": {
                    "value": "tf.Variable(1.0, name='WSM')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nodes[0].dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_451": {
                "x": {
                    "value": "tf.Variable(lambda : tf.ones([num_filters]), name='WSM')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nodes[0].dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_455": {
                "values": {
                    "value": "edge_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.cast(tf.Variable(1.0, name='WSM'), dtype=dtype) for _ in nodes]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.relu(tf.cast(tf.Variable(1.0, name='WSM'), dtype=dtype)) for _ in nodes]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(tf.Variable(lambda : tf.ones([num_filters]), name='WSM'), dtype=dtype) for _ in nodes]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.relu(tf.cast(tf.Variable(lambda : tf.ones([num_filters]), name='WSM'), dtype=dtype)) for _ in nodes]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_n_470": {
                "variable": {
                    "value": "new_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_122": {
                "images": {
                    "value": "tf.cast(feat, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[target_height, target_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_441": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "WSM",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_452": {
                "initial_value": {
                    "value": "lambda : tf.ones([num_filters])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "WSM",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_461": {
                "features": {
                    "value": "tf.cast(tf.Variable(lambda : tf.ones([num_filters]), name='WSM'), dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_123": {
                "x": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=feat, pool_size=[height_stride_size + 1, width_stride_size + 1], strides=[height_stride_size, width_stride_size], padding='SAME', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "_maybe_apply_1x1(feat)",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.image.resize_nearest_neighbor(tf.cast(feat, tf.float32), [target_height, target_width]), dtype=feat.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(feat, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(feat, filters=target_num_channels, kernel_size=(1, 1), padding='same', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "utils.batch_norm_act(feat, is_training_bn=is_training, act_type=None, data_format=data_format, strategy=strategy, name='bn')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_461": {
                "x": {
                    "value": "tf.Variable(lambda : tf.ones([num_filters]), name='WSM')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nodes[0].dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_452": {
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_462": {
                "initial_value": {
                    "value": "lambda : tf.ones([num_filters])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "WSM",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_462": {
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/efficientdet_arch_test.py": {
        "tensorflow": {
            "ones_38": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "inputs_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 3, isize[0], isize[1]]",
                            "List"
                        ],
                        [
                            "[1, isize[0], isize[1], 3]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_131": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 512, 512, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_141": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 512, 512, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_150": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 512, 512, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_163": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 224, 224, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_191": {
                "variable": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_192": {
                "variable": {
                    "value": "nodes2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_197": {
                "variable": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_198": {
                "variable": {
                    "value": "nodes2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_208": {
                "variable": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_209": {
                "variable": {
                    "value": "nodes2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_218": {
                "variable": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_219": {
                "variable": {
                    "value": "nodes2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_229": {
                "variable": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_230": {
                "variable": {
                    "value": "nodes2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "disable_eager_execution_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "disable_eager_execution_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_174": {
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "efficientnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_175": {
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "fpn_cells",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_176": {
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "class_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_dtype_135": {
                "type_value": {
                    "value": "float32_ref",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_dtype_145": {
                "type_value": {
                    "value": "float32_ref",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_dtype_154": {
                "type_value": {
                    "value": "float32_ref",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/hparams_config.py": {
        "tensorflow": {
            "GFile_113": {
                "name": {
                    "value": "yaml_file_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_119": {
                "name": {
                    "value": "yaml_file_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/hparams_config_test.py": {
        "tensorflow": {
            "main_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/inference.py": {
        "tensorflow": {
            "TensorArray_61": {
                "variable": {
                    "value": "raw_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.cast(images, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_108": {
                "variable": {
                    "value": "scales",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "scales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.cast(scales, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.stack(scales)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_217": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ema.variables_to_restore(ema_vars)",
                            "Call"
                        ],
                        [
                            "utils.get_ema_vars()",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_260": {
                "variable": {
                    "value": "img_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(tf.range(0, batch_size), nms_scores.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "decode_image_63": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_files[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "expand_animations": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "vectorized_map_95": {
                "variable": {
                    "value": "(images, scales)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "map_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "functools.partial(image_preprocess, image_size=image_size, mean_rgb=mean_rgb, stddev_rgb=stddev_rgb)",
                            "Call"
                        ]
                    ]
                },
                "elems": {
                    "value": "raw_images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(tf.uint8, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "raw_images.write(i, image)",
                            "Call"
                        ],
                        [
                            "batch_image_files_decode(image_files)",
                            "Call"
                        ],
                        [
                            "tf.identity(raw_images, name='image_arrays')",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_96": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(images, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_97": {
                "variable": {
                    "value": "scales",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(scales, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "glob_135": {
                "pattern": {
                    "value": "image_path_pattern",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "isdir_204": {
                "path": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(ckpt_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_205": {
                "variable": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(ckpt_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_207": {
                "variable": {
                    "value": "ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_229": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "save_relative_paths": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_271": {
                "values": {
                    "value": "detections",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[img_ids * tf.ones_like(nms_scores), nms_boxes[:, :, 0], nms_boxes[:, :, 1], nms_boxes[:, :, 2], nms_boxes[:, :, 3], nms_scores, nms_classes]",
                            "List"
                        ],
                        [
                            "det_post_process(params, class_outputs, box_outputs, scales)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "detections",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_434": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_572": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_580": {
                "variable": {
                    "value": "graphdef",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "self.sess.graph_def",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_node_names": {
                    "value": "output_names",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.signitures['prediction'].op.name]",
                            "List"
                        ]
                    ]
                }
            },
            "Builder_602": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_144": {
                "values": {
                    "value": "scales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.cast(scales, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.stack(scales)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_259": {
                "input": {
                    "value": "cls_outputs[params['min_level']]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_261": {
                "x": {
                    "value": "tf.range(0, batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nms_scores.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_438": {
                "config": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(gpu_options=tf.GPUOptions(allow_growth=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_449": {
                "variable": {
                    "value": "image_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "image_files",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_451": {
                "variable": {
                    "value": "raw_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.TensorArray(tf.uint8, size=0, dynamic_size=True)",
                            "Call"
                        ],
                        [
                            "raw_images.write(i, image)",
                            "Call"
                        ],
                        [
                            "batch_image_files_decode(image_files)",
                            "Call"
                        ],
                        [
                            "tf.identity(raw_images, name='image_arrays')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "image_arrays",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RunOptions_527": {
                "variable": {
                    "value": "run_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunMetadata_529": {
                "variable": {
                    "value": "run_metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isdir_567": {
                "path": {
                    "value": "saved_model_dir_or_frozen_graph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "import_graph_def_575": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_615": {
                "name": {
                    "value": "pb_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, self.model_name + '_frozen.pb')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "write_615": {
                "tag": {
                    "value": "graphdef.SerializeToString()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_635": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_62": {
                "input": {
                    "value": "image_files",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.string, name='image_files', shape=[None])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_96": {
                "x": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.cast(images, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "scales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.cast(scales, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.stack(scales)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_188": {
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_189": {
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_263": {
                "input": {
                    "value": "nms_scores",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_457": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.cast(images, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_568": {
                "export_dir": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tags": {
                    "value": "['serve']",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "saved_model_dir_or_frozen_graph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GFile_573": {
                "name": {
                    "value": "saved_model_dir_or_frozen_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "predict_signature_def_598": {
                "inputs": {
                    "value": "{signitures['image_arrays'].name: signitures['image_arrays']}",
                    "type": "Dict",
                    "possible_values": []
                },
                "outputs": {
                    "value": "{signitures['prediction'].name: signitures['prediction']}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "GFile_630": {
                "name": {
                    "value": "tflite_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "write_630": {
                "tag": {
                    "value": "tflite_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "converter.convert()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_690": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_697": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.cast(images, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.stack(images)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_535": {
                "name": {
                    "value": "trace_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_607": {
                "key": {
                    "value": "tf.GraphKeys.ASSET_FILEPATHS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GPUOptions_635": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/iou_utils.py": {
        "tensorflow": {
            "convert_to_tensor_74": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "t_ymin.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_75": {
                "variable": {
                    "value": "p_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(0.0, t_ymin.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "p_xmax - p_xmin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_76": {
                "variable": {
                    "value": "p_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(0.0, t_ymin.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "p_ymax - p_ymin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_77": {
                "variable": {
                    "value": "t_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(0.0, t_ymin.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t_xmax - t_xmin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_78": {
                "variable": {
                    "value": "t_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(0.0, t_ymin.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t_ymax - t_ymin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_82": {
                "variable": {
                    "value": "intersect_ymin",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_ymin",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "t_ymin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_83": {
                "variable": {
                    "value": "intersect_xmin",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_xmin",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "t_xmin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "minimum_84": {
                "variable": {
                    "value": "intersect_ymax",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_ymax",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "t_ymax",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "minimum_85": {
                "variable": {
                    "value": "intersect_xmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_xmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "t_xmax",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_86": {
                "variable": {
                    "value": "intersect_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(0.0, t_ymin.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "intersect_xmax - intersect_xmin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_87": {
                "variable": {
                    "value": "intersect_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(0.0, t_ymin.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "intersect_ymax - intersect_ymin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_no_nan_91": {
                "variable": {
                    "value": "iou_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "intersect_area",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "intersect_width * intersect_height",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "union_area",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p_area + t_area - intersect_area",
                            "BinOp"
                        ]
                    ]
                }
            },
            "minimum_95": {
                "variable": {
                    "value": "enclose_ymin",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_ymin",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "t_ymin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "minimum_96": {
                "variable": {
                    "value": "enclose_xmin",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_xmin",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "t_xmin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_97": {
                "variable": {
                    "value": "enclose_ymax",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_ymax",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "t_ymax",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_98": {
                "variable": {
                    "value": "enclose_xmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_xmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "t_xmax",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "p_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[(p_ymin + p_ymax) / 2, (p_xmin + p_xmax) / 2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "t_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[(t_ymin + t_ymax) / 2, (t_xmin + t_xmax) / 2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_112": {
                "variable": {
                    "value": "euclidean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t_center - p_center",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_113": {
                "variable": {
                    "value": "diag_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([enclose_ymax - enclose_ymin, enclose_xmax - enclose_xmin], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "divide_no_nan_123": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4 * (arctan / math.pi) ** 2",
                            "BinOp"
                        ],
                        [
                            "_get_v(p_height, p_width, t_height, t_width)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - iou_v + v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_165": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pred_boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(pred_boxes)",
                            "Call"
                        ],
                        [
                            "pred_boxes_list[i:i + 4]",
                            "Subscript"
                        ],
                        [
                            "[b * mask for b in pred_boxes]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cast_166": {
                "variable": {
                    "value": "target_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "target_boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(target_boxes, pred_boxes.dtype)",
                            "Call"
                        ],
                        [
                            "target_boxes_list[i:i + 4]",
                            "Subscript"
                        ],
                        [
                            "[b * mask for b in target_boxes]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "pred_boxes.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_169": {
                "variable": {
                    "value": "pred_boxes_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pred_boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(pred_boxes)",
                            "Call"
                        ],
                        [
                            "pred_boxes_list[i:i + 4]",
                            "Subscript"
                        ],
                        [
                            "[b * mask for b in pred_boxes]",
                            "ListComp"
                        ]
                    ]
                },
                "num": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unstack_170": {
                "variable": {
                    "value": "target_boxes_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "target_boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(target_boxes, pred_boxes.dtype)",
                            "Call"
                        ],
                        [
                            "target_boxes_list[i:i + 4]",
                            "Subscript"
                        ],
                        [
                            "[b * mask for b in target_boxes]",
                            "ListComp"
                        ]
                    ]
                },
                "num": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_102": {
                "variable": {
                    "value": "enclose_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(0.0, t_ymin.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "enclose_xmax - enclose_xmin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_103": {
                "variable": {
                    "value": "enclose_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(0.0, t_ymin.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "enclose_ymax - enclose_ymin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_181": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t_ymax > t_ymin",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "t_xmax > t_xmin",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cast_182": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.logical_and(t_ymax > t_ymin, t_xmax > t_xmin)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, t_ymin.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "t_ymin.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_191": {
                "input_tensor": {
                    "value": "tf.stack(iou_loss_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "executing_eagerly_outside_functions_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_114": {
                "values": {
                    "value": "[enclose_ymax - enclose_ymin, enclose_xmax - enclose_xmin]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "divide_no_nan_117": {
                "x": {
                    "value": "euclidean ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "diag_length ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_191": {
                "values": {
                    "value": "iou_loss_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "atan_34": {
                "x": {
                    "value": "tf.math.divide_no_nan(width, height)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_no_nan_105": {
                "x": {
                    "value": "enclose_area - union_area",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "enclose_area",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "enclose_width * enclose_height",
                            "BinOp"
                        ]
                    ]
                }
            },
            "divide_no_nan_34": {
                "x": {
                    "value": "b1_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "b1_height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "divide_no_nan_35": {
                "x": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gradients_48": {
                "ys": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4 * (arctan / math.pi) ** 2",
                            "BinOp"
                        ],
                        [
                            "_get_v(p_height, p_width, t_height, t_width)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "dv",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_188": {
                "input": {
                    "value": "_iou_per_anchor(pred_boxes, target_boxes, iou_type)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/iou_utils_test.py": {
        "tensorflow": {
            "constant_26": {
                "variable": {
                    "value": "self.pb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[[4.0, 3.0, 7.0, 5.0], [5.0, 6.0, 10.0, 7.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_28": {
                "variable": {
                    "value": "self.tb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[[3.0, 4.0, 6.0, 8.0], [14.0, 14.0, 15.0, 15.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_30": {
                "variable": {
                    "value": "self.zeros",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0, 0, 0], [0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_59": {
                "variable": {
                    "value": "pb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_60": {
                "variable": {
                    "value": "tb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_64": {
                "variable": {
                    "value": "pb",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.pb, self.zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "tb",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.tb, self.zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_69": {
                "variable": {
                    "value": "pb",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.pb, self.zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "tb",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.tb, self.zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "main_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_75": {
                "input_tensor": {
                    "value": "grad[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_76": {
                "input_tensor": {
                    "value": "grad[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/main.py": {
        "tensorflow": {
            "ConfigProto_210": {
                "variable": {
                    "value": "config_proto",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_125": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUConfig_249": {
                "variable": {
                    "value": "tpu_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "iterations_per_loop": {
                    "value": "FLAGS.iterations_per_loop if FLAGS.strategy == 'tpu' else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_cores_per_replica": {
                    "value": "num_cores_per_replica",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "FLAGS.num_cores_per_replica",
                            "Attribute"
                        ]
                    ]
                },
                "input_partition_dims": {
                    "value": "input_partition_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[FLAGS.input_partition_dims, labels_partition_dims]",
                            "List"
                        ]
                    ]
                },
                "per_host_input_for_training": {
                    "value": "tf.estimator.tpu.InputPipelineConfig.PER_HOST_V2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunConfig_255": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(FLAGS.tpu, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.model_dir",
                            "Attribute"
                        ]
                    ]
                },
                "log_step_count_steps": {
                    "value": "FLAGS.iterations_per_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "session_config": {
                    "value": "config_proto",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                },
                "tpu_config": {
                    "value": "tpu_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.estimator.tpu.TPUConfig(FLAGS.iterations_per_loop if FLAGS.strategy == 'tpu' else 1, num_cores_per_replica=num_cores_per_replica, input_partition_dims=input_partition_dims, per_host_input_for_training=tf.estimator.tpu.InputPipelineConfig.PER_HOST_V2)",
                            "Call"
                        ]
                    ]
                },
                "save_checkpoints_steps": {
                    "value": "FLAGS.save_checkpoints_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tf_random_seed": {
                    "value": "FLAGS.tf_random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUEstimator_265": {
                "variable": {
                    "value": "train_est",
                    "type": "Variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn_instance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "det_model_fn.get_model_fn(FLAGS.model_name)",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.estimator.tpu.RunConfig(cluster=tpu_cluster_resolver, model_dir=model_dir, log_step_count_steps=FLAGS.iterations_per_loop, session_config=config_proto, tpu_config=tpu_config, save_checkpoints_steps=FLAGS.save_checkpoints_steps, tf_random_seed=FLAGS.tf_random_seed)",
                            "Call"
                        ],
                        [
                            "tf.estimator.RunConfig(model_dir=model_dir, train_distribute=strategy, log_step_count_steps=FLAGS.iterations_per_loop, session_config=config_proto, save_checkpoints_steps=FLAGS.save_checkpoints_steps, tf_random_seed=FLAGS.tf_random_seed)",
                            "Call"
                        ]
                    ]
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dict(config.as_dict(), model_name=FLAGS.model_name, iterations_per_loop=FLAGS.iterations_per_loop, model_dir=FLAGS.model_dir, num_shards=num_shards, num_examples_per_epoch=FLAGS.num_examples_per_epoch, strategy=FLAGS.strategy, backbone_ckpt=FLAGS.backbone_ckpt, ckpt=FLAGS.ckpt, val_json_file=FLAGS.val_json_file, testdev_dir=FLAGS.testdev_dir, profile=FLAGS.profile, mode=FLAGS.mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "RunConfig_276": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.model_dir",
                            "Attribute"
                        ]
                    ]
                },
                "train_distribute": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.distribute.MirroredStrategy()",
                            "Call"
                        ]
                    ]
                },
                "log_step_count_steps": {
                    "value": "FLAGS.iterations_per_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "session_config": {
                    "value": "config_proto",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                },
                "save_checkpoints_steps": {
                    "value": "FLAGS.save_checkpoints_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tf_random_seed": {
                    "value": "FLAGS.tf_random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "disable_eager_execution_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exists_230": {
                "path": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.model_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "makedirs_231": {
                "path": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.model_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "exists_234": {
                "path": {
                    "value": "config_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'config.yaml')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_235": {
                "name": {
                    "value": "config_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'config.yaml')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "write_235": {
                "tag": {
                    "value": "str(config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MirroredStrategy_275": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Estimator_288": {
                "model_fn": {
                    "value": "model_fn_instance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "det_model_fn.get_model_fn(FLAGS.model_name)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.estimator.tpu.RunConfig(cluster=tpu_cluster_resolver, model_dir=model_dir, log_step_count_steps=FLAGS.iterations_per_loop, session_config=config_proto, tpu_config=tpu_config, save_checkpoints_steps=FLAGS.save_checkpoints_steps, tf_random_seed=FLAGS.tf_random_seed)",
                            "Call"
                        ],
                        [
                            "tf.estimator.RunConfig(model_dir=model_dir, train_distribute=strategy, log_step_count_steps=FLAGS.iterations_per_loop, session_config=config_proto, save_checkpoints_steps=FLAGS.save_checkpoints_steps, tf_random_seed=FLAGS.tf_random_seed)",
                            "Call"
                        ]
                    ]
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dict(config.as_dict(), model_name=FLAGS.model_name, iterations_per_loop=FLAGS.iterations_per_loop, model_dir=FLAGS.model_dir, num_shards=num_shards, num_examples_per_epoch=FLAGS.num_examples_per_epoch, strategy=FLAGS.strategy, backbone_ckpt=FLAGS.backbone_ckpt, ckpt=FLAGS.ckpt, val_json_file=FLAGS.val_json_file, testdev_dir=FLAGS.testdev_dir, profile=FLAGS.profile, mode=FLAGS.mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "checkpoints_iterator_303": {
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_interval_secs": {
                    "value": "FLAGS.min_eval_interval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "timeout": {
                    "value": "FLAGS.eval_timeout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_330": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_347": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/model_inspect.py": {
        "tensorflow": {
            "FileWriter_133": {
                "variable": {
                    "value": "train_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "import_graph_def_436": {
                "variable": {
                    "value": "goutput",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "infer_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "converter.convert()",
                            "Call"
                        ]
                    ]
                },
                "return_elements": {
                    "value": "fetches",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[inputs.name] + [i.name for i in output]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "enable_v2_tensorshape_518": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "disable_eager_execution_519": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_resource_variables_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_263": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.inputs_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_281": {
                "variable": {
                    "value": "all_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "save_relative_paths": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_292": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.inputs_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_301": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.inputs_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_319": {
                "variable": {
                    "value": "graphdef",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "sess.graph_def",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_node_names": {
                    "value": "output_node_names",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[node.op.name for node in outputs]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Builder_336": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.logdir, 'savedmodel')",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_360": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "num_threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_364": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_372": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.inputs_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_391": {
                "variable": {
                    "value": "graphdef",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "sess.graph_def",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_node_names": {
                    "value": "output_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[output.name]",
                            "List"
                        ]
                    ]
                }
            },
            "exists_483": {
                "path": {
                    "value": "FLAGS.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rmtree_485": {
                "path": {
                    "value": "FLAGS.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "glob_166": {
                "pattern": {
                    "value": "image_path_pattern",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "glob_205": {
                "pattern": {
                    "value": "image_path_pattern",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Graph_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_312": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.logdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_314": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_323": {
                "name": {
                    "value": "tf_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.logdir, self.model_name + '_train.pb')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.logdir, self.model_name + '_frozen.pb')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "write_323": {
                "tag": {
                    "value": "graphdef.SerializeToString()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_371": {
                "config": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(intra_op_parallelism_threads=num_threads, inter_op_parallelism_threads=1)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "group_385": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*output",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "add_n_387": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.reduce_sum(x) for x in output]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Graph_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_394": {
                "config": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(intra_op_parallelism_threads=num_threads, inter_op_parallelism_threads=1)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "import_graph_def_395": {
                "graph_def": {
                    "value": "graphdef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.graph_util.convert_variables_to_constants(sess, sess.graph_def, output_node_names)",
                            "Call"
                        ],
                        [
                            "self.freeze_model()",
                            "Call"
                        ],
                        [
                            "tf.graph_util.convert_variables_to_constants(sess, sess.graph_def, output_name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RunOptions_412": {
                "variable": {
                    "value": "run_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunMetadata_414": {
                "variable": {
                    "value": "run_metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_285": {
                "name": {
                    "value": "tf_graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.logdir, self.model_name + '_train.pb')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.logdir, self.model_name + '_frozen.pb')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "predict_signature_def_330": {
                "inputs": {
                    "value": "{'input': inputs}",
                    "type": "Dict",
                    "possible_values": []
                },
                "outputs": {
                    "value": "output_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'class_predict_%d' % i: outputs[i] for i in range(5)}",
                            "DictComp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_341": {
                "key": {
                    "value": "tf.GraphKeys.ASSET_FILEPATHS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exists_422": {
                "path": {
                    "value": "trace_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.dirname(trace_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "makedirs_423": {
                "path": {
                    "value": "trace_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.dirname(trace_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_424": {
                "name": {
                    "value": "trace_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_387": {
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/model_inspect_test.py": {
        "tensorflow": {
            "disable_eager_execution_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_41": {
                "seed": {
                    "value": "111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reset_default_graph_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/argmax_matcher.py": {
        "tensorflow": {
            "cast_197": {
                "variable": {
                    "value": "indicator",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "indicator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(indicator, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_132": {
                "variable": {
                    "value": "matches",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_137": {
                "variable": {
                    "value": "matched_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "similarity_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_138": {
                "variable": {
                    "value": "below_unmatched_threshold",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._unmatched_threshold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "matched_vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(similarity_matrix, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_140": {
                "variable": {
                    "value": "between_thresholds",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater_equal(matched_vals, self._unmatched_threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater(self._matched_threshold, matched_vals)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_162": {
                "variable": {
                    "value": "force_match_column_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_164": {
                "variable": {
                    "value": "force_match_column_indicators",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "force_match_column_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(similarity_matrix, 1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "similarity_matrix_shape[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape_utils.combined_static_and_dynamic_shape(similarity_matrix)",
                            "Call"
                        ],
                        [
                            "shape_utils.combined_static_and_dynamic_shape(similarity_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_166": {
                "variable": {
                    "value": "force_match_row_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "force_match_column_indicators",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(force_match_column_ids, depth=similarity_matrix_shape[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_168": {
                "variable": {
                    "value": "force_match_column_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(force_match_column_indicators, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_170": {
                "variable": {
                    "value": "final_matches",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "force_match_column_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reduce_max(force_match_column_indicators, 0), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "force_match_row_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(force_match_column_indicators, 0, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "matches",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(similarity_matrix, 0, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, below_unmatched_threshold, -1)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, between_thresholds, -2)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, below_unmatched_threshold, -2)",
                            "Call"
                        ],
                        [
                            "self._set_values_using_indicator(matches, between_thresholds, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_182": {
                "pred": {
                    "value": "tf.greater(tf.shape(similarity_matrix)[0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_match_when_rows_are_non_empty",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "_match_when_rows_are_empty",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_123": {
                "shape": {
                    "value": "[similarity_matrix_shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_183": {
                "x": {
                    "value": "tf.shape(similarity_matrix)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_141": {
                "x": {
                    "value": "matched_vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(similarity_matrix, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._unmatched_threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_142": {
                "x": {
                    "value": "self._matched_threshold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "matched_vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(similarity_matrix, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_169": {
                "input_tensor": {
                    "value": "force_match_column_indicators",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(force_match_column_ids, depth=similarity_matrix_shape[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_183": {
                "input": {
                    "value": "similarity_matrix",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/box_coder.py": {
        "tensorflow": {
            "stack_146": {
                "variable": {
                    "value": "decoded_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[box_coder.decode(boxes, anchors).get() for boxes in tf.unstack(encoded_boxes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_70": {
                "name": {
                    "value": "Encode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_84": {
                "name": {
                    "value": "Decode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_148": {
                "value": {
                    "value": "encoded_boxes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/box_list.py": {
        "tensorflow": {
            "unstack_168": {
                "variable": {
                    "value": "(ymin, xmin, ymax, xmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.transpose(box_corners)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_182": {
                "variable": {
                    "value": "(y_min, x_min, y_max, x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_64": {
                "input": {
                    "value": "self.data['boxes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_166": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_181": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_168": {
                "a": {
                    "value": "box_corners",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get()",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_184": {
                "values": {
                    "value": "[x_min, y_min, x_max, y_max]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/faster_rcnn_box_coder.py": {
        "tensorflow": {
            "maximum_74": {
                "variable": {
                    "value": "ha",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "EPSILON",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "ha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(EPSILON, ha)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_75": {
                "variable": {
                    "value": "wa",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "EPSILON",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "wa",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(EPSILON, wa)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_76": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "EPSILON",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(EPSILON, h)",
                            "Call"
                        ],
                        [
                            "tf.exp(th) * ha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_77": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "EPSILON",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Constant"
                        ]
                    ]
                },
                "y": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(EPSILON, w)",
                            "Call"
                        ],
                        [
                            "tf.exp(tw) * wa",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_81": {
                "variable": {
                    "value": "tw",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w / wa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_82": {
                "variable": {
                    "value": "th",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h / ha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_103": {
                "variable": {
                    "value": "(ty, tx, th, tw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.transpose(rel_codes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_89": {
                "a": {
                    "value": "tf.stack([ty, tx, th, tw])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_89": {
                "values": {
                    "value": "[ty, tx, th, tw]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_103": {
                "a": {
                    "value": "rel_codes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_109": {
                "x": {
                    "value": "tw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.log(w / wa)",
                            "Call"
                        ],
                        [
                            "tw / self._scale_factors[3]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_110": {
                "x": {
                    "value": "th",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.log(h / ha)",
                            "Call"
                        ],
                        [
                            "th / self._scale_factors[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_117": {
                "a": {
                    "value": "tf.stack([ymin, xmin, ymax, xmax])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_117": {
                "values": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/matcher.py": {
        "tensorflow": {
            "concat_190": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.stack([ignored_value, unmatched_value]), input_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_192": {
                "variable": {
                    "value": "gather_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.match_results + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_193": {
                "variable": {
                    "value": "gathered_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.stack([ignored_value, unmatched_value]), input_tensor], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "gather_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(self.match_results + 2, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_89": {
                "x": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_111": {
                "x": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_134": {
                "x": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_166": {
                "x": {
                    "value": "tf.reshape(t, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_81": {
                "condition": {
                    "value": "tf.greater(self._match_results, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_93": {
                "input": {
                    "value": "self.matched_column_indices()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_103": {
                "condition": {
                    "value": "tf.equal(self._match_results, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_115": {
                "input": {
                    "value": "self.unmatched_column_indices()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_125": {
                "condition": {
                    "value": "self.ignored_column_indicator()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_138": {
                "input": {
                    "value": "self.ignored_column_indices()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_148": {
                "condition": {
                    "value": "tf.greater(0, self._match_results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_163": {
                "params": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.matched_column_indices()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "tensor": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_218": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "greater_81": {
                "x": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_103": {
                "x": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "greater_148": {
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "self._match_results",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_190": {
                "values": {
                    "value": "[ignored_value, unmatched_value]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/preprocessor.py": {
        "tensorflow": {
            "split_59": {
                "variable": {
                    "value": "(ymin, xmin, ymax, xmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_boxes_left_right(boxes), lambda : boxes)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_60": {
                "variable": {
                    "value": "flipped_xmin",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "xmax",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "subtract_61": {
                "variable": {
                    "value": "flipped_xmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "xmin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_62": {
                "variable": {
                    "value": "flipped_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ymin, flipped_xmin, ymax, flipped_xmax]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_238": {
                "variable": {
                    "value": "image_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_239": {
                "variable": {
                    "value": "orig_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_240": {
                "variable": {
                    "value": "orig_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "minimum_242": {
                "variable": {
                    "value": "orig_min_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "orig_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[0])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "orig_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_244": {
                "variable": {
                    "value": "min_dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "min_dimension",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(min_dimension, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_250": {
                "variable": {
                    "value": "large_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(orig_height * large_scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_251": {
                "variable": {
                    "value": "large_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(orig_width * large_scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_252": {
                "variable": {
                    "value": "large_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[large_height, large_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_104": {
                "variable": {
                    "value": "keypoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "keypoints",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : keypoint_flip_horizontal(keypoints, 0.5, permutation), lambda : keypoints)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_105": {
                "variable": {
                    "value": "keypoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "keypoints",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : keypoint_flip_horizontal(keypoints, 0.5, permutation), lambda : keypoints)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "flip_permutation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_106": {
                "variable": {
                    "value": "(v, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "keypoints",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(keypoints, flip_permutation)",
                            "Call"
                        ],
                        [
                            "tf.cond(do_a_flip_random, lambda : keypoint_flip_horizontal(keypoints, 0.5, permutation), lambda : keypoints)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_108": {
                "variable": {
                    "value": "new_keypoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[v, u]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_109": {
                "variable": {
                    "value": "new_keypoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "new_keypoints",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([v, u], 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(new_keypoints, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "keypoints * [[[y_scale, x_scale]]]",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_left_right_160": {
                "variable": {
                    "value": "image_flipped",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_170": {
                "variable": {
                    "value": "do_a_flip_random",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([], seed=seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_173": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_flip_random",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _flip_image(image)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_233": {
                "value": {
                    "value": "new_size + [num_channels]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_256": {
                "variable": {
                    "value": "orig_max_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "orig_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[0])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "orig_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image_shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_257": {
                "variable": {
                    "value": "max_dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "max_dimension",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(max_dimension, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_263": {
                "variable": {
                    "value": "small_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(orig_height * small_scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_264": {
                "variable": {
                    "value": "small_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(orig_width * small_scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_265": {
                "variable": {
                    "value": "small_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[small_height, small_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_266": {
                "variable": {
                    "value": "new_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.to_float(tf.reduce_max(large_size)) > max_dimension",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : small_size",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : large_size",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_271": {
                "values": {
                    "value": "tf.unstack(new_size) + [num_channels]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_382": {
                "variable": {
                    "value": "y_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(y_scale, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_scale, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_383": {
                "variable": {
                    "value": "x_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x_scale, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_scale, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_384": {
                "variable": {
                    "value": "(y_min, x_min, y_max, x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_408": {
                "variable": {
                    "value": "y_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(y_scale, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_scale, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_409": {
                "variable": {
                    "value": "x_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x_scale, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x_scale, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_103": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_167": {
                "name": {
                    "value": "RandomHorizontalFlip",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, boxes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_178": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_flip_random",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _flip_boxes_left_right(boxes)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : boxes",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_184": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_flip_random",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _flip_masks_left_right(masks)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : masks",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_191": {
                "variable": {
                    "value": "keypoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "do_a_flip_random",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.greater(tf.random_uniform([], seed=seed), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : keypoint_flip_horizontal(keypoints, 0.5, permutation)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : keypoints",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "round_250": {
                "x": {
                    "value": "orig_height * large_scale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_251": {
                "x": {
                    "value": "orig_width * large_scale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_324": {
                "name": {
                    "value": "ResizeToRange",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, min_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_to_bounding_box_333": {
                "variable": {
                    "value": "new_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "new_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(image, new_size[:-1], method=method, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.image.pad_to_bounding_box(new_image, 0, 0, max_dimension, max_dimension)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "target_height": {
                    "value": "max_dimension",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(max_dimension, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "target_width": {
                    "value": "max_dimension",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(max_dimension, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_338": {
                "variable": {
                    "value": "new_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_masks_left_right(masks), lambda : masks)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_344": {
                "variable": {
                    "value": "new_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(new_masks, new_size[:-1], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.pad_to_bounding_box(new_masks, 0, 0, max_dimension, max_dimension)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_381": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_407": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_435": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_436": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(do_a_flip_random, lambda : _flip_image(image), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_263": {
                "x": {
                    "value": "orig_height * small_scale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_264": {
                "x": {
                    "value": "orig_width * small_scale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_271": {
                "value": {
                    "value": "new_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "large_size",
                            "Name"
                        ],
                        [
                            "large_size",
                            "Name"
                        ],
                        [
                            "small_size",
                            "Name"
                        ],
                        [
                            "tf.cond(tf.to_float(tf.reduce_max(large_size)) > max_dimension, lambda : small_size, lambda : large_size)",
                            "Call"
                        ],
                        [
                            "large_size",
                            "Name"
                        ],
                        [
                            "_compute_new_static_size(image, min_dimension, max_dimension)",
                            "Call"
                        ],
                        [
                            "_compute_new_dynamic_size(image, min_dimension, max_dimension)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_to_bounding_box_346": {
                "variable": {
                    "value": "new_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "new_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(new_masks, new_size[:-1], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_masks, 3)",
                            "Call"
                        ],
                        [
                            "tf.image.pad_to_bounding_box(new_masks, 0, 0, max_dimension, max_dimension)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "target_height": {
                    "value": "max_dimension",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(max_dimension, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "target_width": {
                    "value": "max_dimension",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(max_dimension, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_391": {
                "values": {
                    "value": "[y_min, x_min, y_max, x_max]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_267": {
                "x": {
                    "value": "tf.reduce_max(large_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_267": {
                "input_tensor": {
                    "value": "large_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[large_height, large_width]",
                            "List"
                        ],
                        [
                            "tf.stack([large_height, large_width])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "efficientdet/object_detection/region_similarity_calculator.py": {
        "tensorflow": {
            "split_37": {
                "variable": {
                    "value": "(y_min, x_min, y_max, x_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_54": {
                "variable": {
                    "value": "(y_min1, x_min1, y_max1, x_max1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist1.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_56": {
                "variable": {
                    "value": "(y_min2, x_min2, y_max2, x_max2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "boxlist2.get()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_58": {
                "variable": {
                    "value": "all_pairs_min_ymax",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_max1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(y_max2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_59": {
                "variable": {
                    "value": "all_pairs_max_ymin",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_min1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(y_min2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_60": {
                "variable": {
                    "value": "intersect_heights",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "all_pairs_min_ymax - all_pairs_max_ymin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_61": {
                "variable": {
                    "value": "all_pairs_min_xmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_max1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(x_max2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_62": {
                "variable": {
                    "value": "all_pairs_max_xmin",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_min1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.transpose(x_min2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_63": {
                "variable": {
                    "value": "intersect_widths",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "all_pairs_min_xmax - all_pairs_max_xmin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_36": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_39": {
                "input": {
                    "value": "(y_max - y_min) * (x_max - x_min)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_53": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_78": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_84": {
                "condition": {
                    "value": "tf.equal(intersections, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(intersections)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.truediv(intersections, unions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_58": {
                "a": {
                    "value": "y_max2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_59": {
                "a": {
                    "value": "y_min2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_61": {
                "a": {
                    "value": "x_max2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_62": {
                "a": {
                    "value": "x_min2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_85": {
                "x": {
                    "value": "intersections",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_86": {
                "input": {
                    "value": "intersections",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ]
                    ]
                }
            },
            "truediv_86": {
                "x": {
                    "value": "intersections",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "intersection(boxlist1, boxlist2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "unions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(areas1, 1) + tf.expand_dims(areas2, 0) - intersections",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_110": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_83": {
                "input": {
                    "value": "areas2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "area(boxlist2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/shape_utils.py": {
        "tensorflow": {
            "shape_62": {
                "variable": {
                    "value": "dynamic_tensor_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "assert_equal_46": {
                "x": {
                    "value": "shape_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "shape_b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_op_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/target_assigner.py": {
        "tensorflow": {
            "tile_212": {
                "variable": {
                    "value": "unmatched_ignored_reg_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._default_regression_target()",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[match_results_shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_215": {
                "variable": {
                    "value": "reg_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "matched_anchors_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "match.matched_column_indicator()",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "matched_reg_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._box_coder.encode(matched_gt_boxlist, anchors)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "unmatched_ignored_reg_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tile(self._default_regression_target(), [match_results_shape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_72": {
                "variable": {
                    "value": "self._unmatched_cls_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_127": {
                "variable": {
                    "value": "groundtruth_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.expand_dims(groundtruth_boxes.num_boxes(), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_129": {
                "variable": {
                    "value": "groundtruth_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "groundtruth_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones(tf.expand_dims(groundtruth_boxes.num_boxes(), 0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(groundtruth_labels, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_144": {
                "variable": {
                    "value": "groundtruth_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_gt_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_231": {
                "value": {
                    "value": "[self._box_coder.code_size * [0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_145": {
                "control_inputs": {
                    "value": "[unmatched_shape_assert, labels_and_box_shapes_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_127": {
                "input": {
                    "value": "groundtruth_boxes.num_boxes()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_198": {
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "shape": {
                    "value": "groundtruth_keypoints.get_shape()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "shape": {
                    "value": "groundtruth_keypoints.get_shape()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/object_detection/tf_example_decoder.py": {
        "tensorflow": {
            "as_string_25": {
                "input": {
                    "value": "tf.strings.to_hash_bucket_fast(parsed_tensors['image/encoded'], 2 ** 63 - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parse_single_example_114": {
                "variable": {
                    "value": "parsed_tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self._keys_to_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_or_129": {
                "variable": {
                    "value": "decode_image_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(parsed_tensors['image/height'], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(parsed_tensors['image/width'], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_132": {
                "variable": {
                    "value": "image_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_134": {
                "variable": {
                    "value": "parsed_tensors[image/height]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "decode_image_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.equal(parsed_tensors['image/height'], -1), tf.equal(parsed_tensors['image/width'], -1))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "image_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "parsed_tensors['image/height']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_137": {
                "variable": {
                    "value": "parsed_tensors[image/width]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "decode_image_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.equal(parsed_tensors['image/height'], -1), tf.equal(parsed_tensors['image/width'], -1))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "image_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "parsed_tensors['image/width']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cond_140": {
                "variable": {
                    "value": "is_crowds",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(tf.shape(parsed_tensors['image/object/is_crowd'])[0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.cast(parsed_tensors['image/object/is_crowd'], dtype=tf.bool)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.zeros_like(parsed_tensors['image/object/class/label'], dtype=tf.bool)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_hash_bucket_fast_26": {
                "input": {
                    "value": "parsed_tensors['image/encoded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_buckets": {
                    "value": "2 ** 63 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "decode_image_57": {
                "contents": {
                    "value": "parsed_tensors['image/encoded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "expand_animations": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_65": {
                "values": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_70": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.io.decode_png(png_bytes, channels=1, dtype=tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_72": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.io.decode_png(png_bytes, channels=1, dtype=tf.uint8), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_79": {
                "pred": {
                    "value": "tf.greater(tf.shape(masks)[0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.map_fn(_decode_png_mask, masks, dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.zeros([0, height, width], dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_89": {
                "pred": {
                    "value": "tf.greater(tf.shape(parsed_tensors['image/object/area'])[0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : parsed_tensors['image/object/area']",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (xmax - xmin) * (ymax - ymin)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_147": {
                "variable": {
                    "value": "source_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(tf.strings.length(parsed_tensors['image/source_id']), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : parsed_tensors['image/source_id']",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : _get_source_id_from_encoded_image(parsed_tensors)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "FixedLenFeature_37": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_38": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_39": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_40": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "VarLenFeature_41": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_42": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_43": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_44": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_45": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_46": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_47": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_80": {
                "x": {
                    "value": "tf.shape(masks)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_90": {
                "x": {
                    "value": "tf.shape(parsed_tensors['image/object/area'])[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_130": {
                "x": {
                    "value": "parsed_tensors['image/height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_131": {
                "x": {
                    "value": "parsed_tensors['image/width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_132": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._decode_image(parsed_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_141": {
                "x": {
                    "value": "tf.shape(parsed_tensors['image/object/is_crowd'])[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "decode_png_71": {
                "contents": {
                    "value": "png_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_81": {
                "fn": {
                    "value": "_decode_png_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parsed_tensors['image/object/mask']",
                            "Subscript"
                        ],
                        [
                            "self._decode_masks(parsed_tensors)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "shape": {
                    "value": "[0, height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_dense_119": {
                "variable": {
                    "value": "parsed_tensors[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "parsed_tensors[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_dense_122": {
                "variable": {
                    "value": "parsed_tensors[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "parsed_tensors[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_142": {
                "x": {
                    "value": "parsed_tensors['image/object/is_crowd']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_143": {
                "input": {
                    "value": "parsed_tensors['image/object/class/label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_148": {
                "x": {
                    "value": "tf.strings.length(parsed_tensors['image/source_id'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "VarLenFeature_52": {
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_80": {
                "input": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parsed_tensors['image/object/mask']",
                            "Subscript"
                        ],
                        [
                            "self._decode_masks(parsed_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_90": {
                "input": {
                    "value": "parsed_tensors['image/object/area']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_141": {
                "input": {
                    "value": "parsed_tensors['image/object/is_crowd']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "length_148": {
                "input": {
                    "value": "parsed_tensors['image/source_id']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/run_tflite.py": {
        "tensorflow": {
            "GFile_45": {
                "variable": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "image_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "decode_image_46": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.gfile.GFile(image_path, 'rb').read()",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_47": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.decode_image(input_data, channels=3, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, image_size, method='bilinear', antialias=True)",
                            "Call"
                        ],
                        [
                            "load_image(FLAGS.sample_image, image_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "image_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(dim) for dim in FLAGS.image_size.split('x')]",
                            "ListComp"
                        ]
                    ]
                },
                "method": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "antialias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_49": {
                "input": {
                    "value": "tf.cast(image, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Interpreter_76": {
                "variable": {
                    "value": "self.interpreter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_path": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_49": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.decode_image(input_data, channels=3, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, image_size, method='bilinear', antialias=True)",
                            "Call"
                        ],
                        [
                            "load_image(FLAGS.sample_image, image_size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tensorrt.py": {
        "tensorflow": {
            "get_default_graph_54": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "disable_v2_behavior_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_52": {
                "export_dir": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tf.saved_model.tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "trt_savedmodel_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_61": {
                "input_tensor": {
                    "value": "graph.get_tensor_by_name(i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/test_util.py": {
        "tensorflow": {
            "TFRecordWriter_25": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "tfrecord_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(temp_dir, 'test.tfrecords')",
                            "Call"
                        ]
                    ]
                }
            },
            "encode_jpeg_26": {
                "variable": {
                    "value": "encoded_jpg",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "tf.ones([512, 512, 3], dtype=tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_27": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': tfrecord_util.int64_feature(512), 'image/width': tfrecord_util.int64_feature(512), 'image/filename': tfrecord_util.bytes_feature('test_file_name.jpg'.encode('utf8')), 'image/source_id': tfrecord_util.bytes_feature('123456'.encode('utf8')), 'image/key/sha256': tfrecord_util.bytes_feature('qwdqwfw12345'.encode('utf8')), 'image/encoded': tfrecord_util.bytes_feature(encoded_jpg.numpy()), 'image/format': tfrecord_util.bytes_feature('jpeg'.encode('utf8')), 'image/object/bbox/xmin': tfrecord_util.float_list_feature([0.1]), 'image/object/bbox/xmax': tfrecord_util.float_list_feature([0.1]), 'image/object/bbox/ymin': tfrecord_util.float_list_feature([0.2]), 'image/object/bbox/ymax': tfrecord_util.float_list_feature([0.2]), 'image/object/class/text': tfrecord_util.bytes_list_feature(['test'.encode('utf8')]), 'image/object/class/label': tfrecord_util.int64_list_feature([1]), 'image/object/difficult': tfrecord_util.int64_list_feature([]), 'image/object/truncated': tfrecord_util.int64_list_feature([]), 'image/object/view': tfrecord_util.bytes_list_feature([])})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_26": {
                "shape": {
                    "value": "[512, 512, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Features_28": {
                "feature": {
                    "value": "{'image/height': tfrecord_util.int64_feature(512), 'image/width': tfrecord_util.int64_feature(512), 'image/filename': tfrecord_util.bytes_feature('test_file_name.jpg'.encode('utf8')), 'image/source_id': tfrecord_util.bytes_feature('123456'.encode('utf8')), 'image/key/sha256': tfrecord_util.bytes_feature('qwdqwfw12345'.encode('utf8')), 'image/encoded': tfrecord_util.bytes_feature(encoded_jpg.numpy()), 'image/format': tfrecord_util.bytes_feature('jpeg'.encode('utf8')), 'image/object/bbox/xmin': tfrecord_util.float_list_feature([0.1]), 'image/object/bbox/xmax': tfrecord_util.float_list_feature([0.1]), 'image/object/bbox/ymin': tfrecord_util.float_list_feature([0.2]), 'image/object/bbox/ymax': tfrecord_util.float_list_feature([0.2]), 'image/object/class/text': tfrecord_util.bytes_list_feature(['test'.encode('utf8')]), 'image/object/class/label': tfrecord_util.int64_list_feature([1]), 'image/object/difficult': tfrecord_util.int64_list_feature([]), 'image/object/truncated': tfrecord_util.int64_list_feature([]), 'image/object/view': tfrecord_util.bytes_list_feature([])}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/anchors.py": {
        "tensorflow": {
            "cast_43": {
                "variable": {
                    "value": "anchor_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "anchor_boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(anchor_boxes, pred_boxes.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(anchor_boxes, pred_boxes.dtype)",
                            "Call"
                        ],
                        [
                            "np.vstack(boxes_all)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(anchor_boxes, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "pred_boxes.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_48": {
                "variable": {
                    "value": "(ty, tx, th, tw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pred_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "num": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_75": {
                "variable": {
                    "value": "anchor_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "anchor_boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(anchor_boxes, pred_boxes.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(anchor_boxes, pred_boxes.dtype)",
                            "Call"
                        ],
                        [
                            "np.vstack(boxes_all)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(anchor_boxes, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "pred_boxes.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_58": {
                "values": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_80": {
                "values": {
                    "value": "[ycenter_a, xcenter_a, ha, wa]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_164": {
                "variable": {
                    "value": "anchor_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "anchor_boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(anchor_boxes, pred_boxes.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(anchor_boxes, pred_boxes.dtype)",
                            "Call"
                        ],
                        [
                            "np.vstack(boxes_all)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(anchor_boxes, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_242": {
                "variable": {
                    "value": "cls_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_targets - 1",
                            "BinOp"
                        ],
                        [
                            "tf.cast(cls_targets, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_247": {
                "variable": {
                    "value": "num_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.not_equal(matches.match_results, -1), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_50": {
                "x": {
                    "value": "tw",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_51": {
                "x": {
                    "value": "th",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "range_206": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "labels_unpacked[level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(labels, indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[feat_size['height'], feat_size['width'], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_248": {
                "x": {
                    "value": "tf.not_equal(matches.match_results, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_209": {
                "params": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(count, count + steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_248": {
                "x": {
                    "value": "matches.match_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/efficientdet_keras.py": {
        "tensorflow": {
            "Conv2D_249": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.target_num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self.data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_281": {
                "variable": {
                    "value": "resized",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.compat.v1.image.resize_nearest_neighbor(tf.cast(inputs, tf.float32), [target_height, target_width])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_682": {
                "variable": {
                    "value": "self.head_transpose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "90",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_35": {
                "name": {
                    "value": "add_n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_88": {
                "variable": {
                    "value": "normalized_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.stack(edge_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_90": {
                "variable": {
                    "value": "new_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "nodes * normalized_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_280": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_286": {
                "variable": {
                    "value": "resized",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "resized",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.compat.v1.image.resize_nearest_neighbor(tf.cast(inputs, tf.float32), [target_height, target_width]), inputs.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(resized, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_694": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, skip]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "vectorized_map_942": {
                "fn": {
                    "value": "map_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "raw_images",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_986": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_282": {
                "images": {
                    "value": "tf.cast(inputs, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[target_height, target_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SeparableConv2D_612": {
                "filters": {
                    "value": "4 * num_anchors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pointwise_initializer": {
                    "value": "tf.initializers.variance_scaling()",
                    "type": "Call",
                    "possible_values": []
                },
                "depthwise_initializer": {
                    "value": "tf.initializers.variance_scaling()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'WSM' + ('' if i == 0 else '_' + str(i))",
                            "BinOp"
                        ],
                        [
                            "'resample_{}_{}_{}'.format(i, input_offset, len(feats_shape))",
                            "Call"
                        ],
                        [
                            "'fnode'",
                            "MethodArgument"
                        ],
                        [
                            "'op_after_combine'",
                            "MethodArgument"
                        ],
                        [
                            "'resample_p0'",
                            "MethodArgument"
                        ],
                        [
                            "'class_net'",
                            "MethodArgument"
                        ],
                        [
                            "'box_net'",
                            "MethodArgument"
                        ],
                        [
                            "'segmentation_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fpn_cells'",
                            "MethodArgument"
                        ],
                        [
                            "'fpn_cell'",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_624": {
                "filters": {
                    "value": "4 * num_anchors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'WSM' + ('' if i == 0 else '_' + str(i))",
                            "BinOp"
                        ],
                        [
                            "'resample_{}_{}_{}'.format(i, input_offset, len(feats_shape))",
                            "Call"
                        ],
                        [
                            "'fnode'",
                            "MethodArgument"
                        ],
                        [
                            "'op_after_combine'",
                            "MethodArgument"
                        ],
                        [
                            "'resample_p0'",
                            "MethodArgument"
                        ],
                        [
                            "'class_net'",
                            "MethodArgument"
                        ],
                        [
                            "'box_net'",
                            "MethodArgument"
                        ],
                        [
                            "'segmentation_head'",
                            "MethodArgument"
                        ],
                        [
                            "'fpn_cells'",
                            "MethodArgument"
                        ],
                        [
                            "'fpn_cell'",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_87": {
                "x": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nodes[0].dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_88": {
                "values": {
                    "value": "edge_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.cast(var, dtype=dtype) for var in self.vars]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.relu(tf.cast(var, dtype=dtype)) for var in self.vars]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(var, dtype=dtype) for var in self.vars]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.relu(tf.cast(var, dtype=dtype)) for var in self.vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "normalized_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.stack(edge_weights, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_104": {
                "variable": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(nodes, axis=-1)",
                            "Call"
                        ],
                        [
                            "[nodes[i] * edge_weights[i] / (weights_sum + 0.0001) for i in range(len(nodes))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_105": {
                "variable": {
                    "value": "new_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "nodes * normalized_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MaxPooling2D_265": {
                "pool_size": {
                    "value": "[height_stride_size + 1, width_stride_size + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[height_stride_size, width_stride_size]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self.data_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AveragePooling2D_271": {
                "pool_size": {
                    "value": "[height_stride_size + 1, width_stride_size + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[height_stride_size, width_stride_size]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self.data_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_283": {
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_469": {
                "value": {
                    "value": "-np.log((1 - 0.01) / 0.01)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_669": {
                "filters": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(self.fpn_num_filters)",
                            "Call"
                        ],
                        [
                            "int(self.fpn_num_filters)",
                            "Call"
                        ],
                        [
                            "config.fpn_num_filters",
                            "Attribute"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ],
                        [
                            "'channels_last'",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_939": {
                "input": {
                    "value": "tf.stack(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_93": {
                "features": {
                    "value": "tf.cast(var, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_460": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SeparableConv2D_537": {
                "filters": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pointwise_initializer": {
                    "value": "tf.initializers.variance_scaling()",
                    "type": "Call",
                    "possible_values": []
                },
                "depthwise_initializer": {
                    "value": "tf.initializers.variance_scaling()",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self.data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'box-%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_551": {
                "filters": {
                    "value": "self.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self.data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'box-%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_620": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_626": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_630": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_939": {
                "values": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_93": {
                "x": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nodes[0].dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_102": {
                "x": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nodes[0].dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_103": {
                "values": {
                    "value": "edge_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.cast(var, dtype=dtype) for var in self.vars]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.relu(tf.cast(var, dtype=dtype)) for var in self.vars]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(var, dtype=dtype) for var in self.vars]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.relu(tf.cast(var, dtype=dtype)) for var in self.vars]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_108": {
                "features": {
                    "value": "tf.cast(var, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_545": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_553": {
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_initializer_557": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_108": {
                "x": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nodes[0].dtype",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "efficientdet/tf2/efficientdet_keras_test.py": {
        "tensorflow": {
            "ones_89": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "inputs_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 512, 512, 3]",
                            "List"
                        ],
                        [
                            "[1, 512, 512, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "uniform_182": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 16, 16, 320]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_211": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 320, 320, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_42": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "inputs_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 512, 512, 3]",
                            "List"
                        ],
                        [
                            "[1, 512, 512, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "map_structure_48": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda output: tf.gradients(output, feats)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(feats, True)",
                            "Call"
                        ],
                        [
                            "legacy_arch.efficientdet(feats, config=config)",
                            "Call"
                        ],
                        [
                            "model(feats, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_52": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "inputs_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 512, 512, 3]",
                            "List"
                        ],
                        [
                            "[1, 512, 512, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "map_structure_57": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda output: tf.gradients(output, feats)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(feats, True)",
                            "Call"
                        ],
                        [
                            "legacy_arch.efficientdet(feats, config=config)",
                            "Call"
                        ],
                        [
                            "model(feats, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_78": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "inputs_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 512, 512, 3]",
                            "List"
                        ],
                        [
                            "[1, 512, 512, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "map_structure_82": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda output: tf.gradients(output, feats)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(feats, True)",
                            "Call"
                        ],
                        [
                            "legacy_arch.efficientdet(feats, config=config)",
                            "Call"
                        ],
                        [
                            "model(feats, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_128": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "new_feats1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fpn_cell(inputs, True)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.ones([1, 64, 64, 40]), tf.ones([1, 32, 32, 112]), tf.ones([1, 16, 16, 320])]",
                            "List"
                        ],
                        [
                            "{0: tf.ones([1, 512, 512, 3]), 1: tf.ones([1, 256, 256, 16]), 2: tf.ones([1, 128, 128, 24]), 3: tf.ones([1, 64, 64, 40]), 4: tf.ones([1, 32, 32, 112]), 5: tf.ones([1, 16, 16, 320])}",
                            "Dict"
                        ]
                    ]
                }
            },
            "gradients_144": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "tf.nest.flatten(new_feats2)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "tf.nest.flatten(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_159": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 512, 512, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_168": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 512, 512, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_229": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 16, 16, 320]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_239": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 16, 16, 320]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_34": {
                "shape": {
                    "value": "[1, 896, 1600, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_35": {
                "shape": {
                    "value": "[1, 499, 333, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_41": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_43": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "111111",
                            "Constant"
                        ]
                    ]
                }
            },
            "Session_51": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_53": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "111111",
                            "Constant"
                        ]
                    ]
                }
            },
            "Session_77": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_79": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "111111",
                            "Constant"
                        ]
                    ]
                }
            },
            "map_structure_99": {
                "variable": {
                    "value": "(class_grads, box_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda output: tape.gradient(output, feats)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "[eager_class_out, eager_box_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_117": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_123": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "111111",
                            "Constant"
                        ]
                    ]
                }
            },
            "Session_131": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_140": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "111111",
                            "Constant"
                        ]
                    ]
                }
            },
            "Graph_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_96": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_119": {
                "shape": {
                    "value": "[1, 64, 64, 40]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_120": {
                "shape": {
                    "value": "[1, 32, 32, 112]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_121": {
                "shape": {
                    "value": "[1, 16, 16, 320]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_133": {
                "shape": {
                    "value": "[1, 512, 512, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_134": {
                "shape": {
                    "value": "[1, 256, 256, 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_135": {
                "shape": {
                    "value": "[1, 128, 128, 24]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_136": {
                "shape": {
                    "value": "[1, 64, 64, 40]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_137": {
                "shape": {
                    "value": "[1, 32, 32, 112]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_138": {
                "shape": {
                    "value": "[1, 16, 16, 320]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_144": {
                "structure": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.ones([1, 64, 64, 40]), tf.ones([1, 32, 32, 112]), tf.ones([1, 16, 16, 320])]",
                            "List"
                        ],
                        [
                            "{0: tf.ones([1, 512, 512, 3]), 1: tf.ones([1, 256, 256, 16]), 2: tf.ones([1, 128, 128, 24]), 3: tf.ones([1, 64, 64, 40]), 4: tf.ones([1, 32, 32, 112]), 5: tf.ones([1, 16, 16, 320])}",
                            "Dict"
                        ]
                    ]
                }
            },
            "ones_234": {
                "shape": {
                    "value": "[1, 8, 8, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_48": {
                "ys": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones(inputs_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones(inputs_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones(inputs_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones(inputs_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones([1, 512, 512, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([1, 512, 512, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_57": {
                "ys": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones(inputs_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones(inputs_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones(inputs_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones(inputs_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones([1, 512, 512, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([1, 512, 512, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_82": {
                "ys": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones(inputs_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones(inputs_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones(inputs_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones(inputs_shape)",
                            "Call"
                        ],
                        [
                            "tf.ones([1, 512, 512, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([1, 512, 512, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_165": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_173": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_188": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "111111",
                            "Constant"
                        ]
                    ]
                }
            },
            "set_random_seed_198": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "111111",
                            "Constant"
                        ]
                    ]
                }
            },
            "trainable_variables_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_206": {
                "shape": {
                    "value": "[1, 8, 8, 64]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/eval.py": {
        "tensorflow": {
            "TPUClusterResolver_57": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUStrategy_61": {
                "variable": {
                    "value": "ds_strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu_cluster_resolver": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(FLAGS.tpu, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                }
            },
            "Progbar_110": {
                "variable": {
                    "value": "pbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "(eval_samples + batch_size - 1) // batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "experimental_connect_to_cluster_59": {
                "cluster_spec_or_resolver": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(FLAGS.tpu, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_tpu_system_60": {
                "enable_coordination_service": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(FLAGS.tpu, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                }
            },
            "MirroredStrategy_64": {
                "variable": {
                    "value": "ds_strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "list_logical_devices_62": {
                "device_type": {
                    "value": "TPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "list_physical_devices_67": {
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "OneDeviceStrategy_68": {
                "variable": {
                    "value": "ds_strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device:GPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "OneDeviceStrategy_70": {
                "variable": {
                    "value": "ds_strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device:CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "latest_checkpoint_77": {
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "numpy_function_88": {
                "func": {
                    "value": "evaluator.update_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[labels['groundtruth_data'], postprocess.transform_detections(detections)]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "list_physical_devices_65": {
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/eval_tflite.py": {
        "tensorflow": {
            "Progbar_157": {
                "variable": {
                    "value": "pbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "(eval_samples + batch_size - 1) // batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Interpreter_68": {
                "variable": {
                    "value": "self.interpreter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_path": {
                    "value": "tflite_model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "multiprocessing.cpu_count()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_164": {
                "variable": {
                    "value": "normalize_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[height, width, height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_168": {
                "input": {
                    "value": "labels['image_scales']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_169": {
                "x": {
                    "value": "scales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(labels['image_scales'], -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nms_boxes_bs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/fpn_configs_test.py": {
        "tensorflow": {
            "main_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/infer.py": {
        "tensorflow": {
            "Policy_56": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_76": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[np.array(Image.open(FLAGS.image_path))]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(imgs, dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_global_policy_57": {
                "policy": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.mixed_precision.Policy('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "run_functions_eagerly_58": {
                "run_eagerly": {
                    "value": "FLAGS.debug",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_84": {
                "variable": {
                    "value": "export_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "FLAGS.saved_model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_63": {
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "export_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ExportModel(model)",
                            "Call"
                        ],
                        [
                            "tf.saved_model.load(FLAGS.saved_model_dir)",
                            "Call"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "FLAGS.saved_model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "signatures": {
                    "value": "export_model.f.get_concrete_function(tf.TensorSpec(shape=(None, None, None, 3), dtype=tf.uint8))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorSpec_83": {
                "shape": {
                    "value": "(None, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/infer_lib.py": {
        "tensorflow": {
            "TensorSpec_265": {
                "variable": {
                    "value": "spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_294": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Interpreter_331": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_path": {
                    "value": "tflite_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, tflite.lower() + '.tflite')",
                            "Call"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "multiprocessing.cpu_count()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Policy_397": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.get_precision(config.strategy, config.mixed_precision)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_90": {
                "structure": {
                    "value": "self.model(imgs, training=False, pre_mode=None, post_mode=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ProfilerOptions_203": {
                "variable": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "vectorized_map_235": {
                "fn": {
                    "value": "map_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "image_arrays",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(image_arrays)",
                            "Call"
                        ],
                        [
                            "image_arrays / scale + zero_point",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image_arrays, dtype=input_detail['dtype'])",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorSpec_262": {
                "variable": {
                    "value": "spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, *image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "contains_saved_model_280": {
                "export_dir": {
                    "value": "saved_model_dir_or_frozen_graph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_281": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "saved_model_dir_or_frozen_graph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "wrap_function_288": {
                "variable": {
                    "value": "wrapped_import",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "imports_graph_def_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.import_graph_def(graph_def, name='')",
                            "Lambda"
                        ]
                    ]
                },
                "signature": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_347": {
                "variable": {
                    "value": "normalize_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[height, width, height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_360": {
                "variable": {
                    "value": "image_arrays",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_arrays",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(image_arrays)",
                            "Call"
                        ],
                        [
                            "image_arrays / scale + zero_point",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image_arrays, dtype=input_detail['dtype'])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_detail['dtype']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "input_details[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "set_global_policy_398": {
                "policy": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.mixed_precision.Policy(precision)",
                            "Call"
                        ]
                    ]
                }
            },
            "function_449": {
                "input_signature": {
                    "value": "[spec]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "write_graph_496": {
                "variable": {
                    "value": "proto_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_or_graph_def": {
                    "value": "graphdef",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.freeze(call_fn.get_concrete_function(input_spec))",
                            "Call"
                        ]
                    ]
                },
                "logdir": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "self.model_name + '_frozen.pb'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "as_text": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConversionParams_551": {
                "variable": {
                    "value": "conversion_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_workspace_size_bytes": {
                    "value": "2 << 20",
                    "type": "BinOp",
                    "possible_values": []
                },
                "maximum_cached_engines": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "precision_mode": {
                    "value": "tensorrt.upper()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Converter_555": {
                "variable": {
                    "value": "converter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_saved_model_dir": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "conversion_params": {
                    "value": "conversion_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.experimental.tensorrt.ConversionParams(max_workspace_size_bytes=2 << 20, maximum_cached_engines=1, precision_mode=tensorrt.upper())",
                            "Call"
                        ]
                    ]
                }
            },
            "start_204": {
                "logdir": {
                    "value": "trace_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "options": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.profiler.experimental.ProfilerOptions()",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_295": {
                "name": {
                    "value": "saved_model_dir_or_frozen_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_functions_eagerly_406": {
                "run_eagerly": {
                    "value": "debug",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_475": {
                "obj": {
                    "value": "export_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ExportModel(self.model)",
                            "Call"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "output_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "signatures": {
                    "value": "{tf.saved_model.DEFAULT_SERVING_SIGNATURE_DEF_KEY: export_model.__call__.get_concrete_function(input_spec), 'tflite': export_model.tflite.get_concrete_function(tflite_input_spec), 'predict': export_model.predict.get_concrete_function(tflite_input_spec)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "options": {
                    "value": "tf.saved_model.SaveOptions(function_aliases={'serve': export_model.__call__})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_546": {
                "name": {
                    "value": "tflite_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, tflite.lower() + '.tflite')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "write_546": {
                "tag": {
                    "value": "tflite_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "converter.convert()",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_233": {
                "input": {
                    "value": "tf.stack(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "import_graph_def_287": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Graph().as_graph_def()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_structure_291": {
                "func": {
                    "value": "import_graph.as_graph_element",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*structure": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "map_structure_292": {
                "func": {
                    "value": "import_graph.as_graph_element",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*structure": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[map_fn(image_arrays[i]) for i in range(self.batch_size)]",
                            "ListComp"
                        ],
                        [
                            "self.predict(image_arrays)",
                            "Call"
                        ],
                        [
                            "self._postprocess(outputs, scales)",
                            "Call"
                        ],
                        [
                            "tuple(self.model.predict(image_arrays))",
                            "Call"
                        ],
                        [
                            "self.model(image_arrays)",
                            "Call"
                        ],
                        [
                            "self.predict(image_arrays)",
                            "Call"
                        ],
                        [
                            "[outputs[:5], outputs[5:]]",
                            "List"
                        ],
                        [
                            "infer_fn(images=image_arrays)",
                            "Call"
                        ],
                        [
                            "[get_output(output_detail, output) for (output_detail, output) in zip(output_details, outputs.values())]",
                            "ListComp"
                        ],
                        [
                            "tuple(outputs)",
                            "Call"
                        ],
                        [
                            "self.predict(image_arrays)",
                            "Call"
                        ],
                        [
                            "self._postprocess(outputs, scales)",
                            "Call"
                        ],
                        [
                            "tuple(self.model(image_arrays, pre_mode=None, post_mode=None))",
                            "Call"
                        ],
                        [
                            "self.model(image_arrays)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_233": {
                "values": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SaveOptions_486": {
                "function_aliases": {
                    "value": "{'serve': export_model.__call__}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "ones_525": {
                "shape": {
                    "value": "input_spec.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_spec.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/infer_lib_test.py": {
        "tensorflow": {
            "contains_saved_model_44": {
                "variable": {
                    "value": "has_saved_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "saved_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.tmp_path, 'saved_model')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.lite_tmp_path, 'saved_model')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.lite_tmp_path, 'saved_model')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_90": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 512, 512, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_107": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 512, 512, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_121": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 512, 512, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_132": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 512, 512, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_policy_134": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_seed_29": {
                "seed": {
                    "value": "111111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rmtree_57": {
                "path": {
                    "value": "saved_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.tmp_path, 'saved_model')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.lite_tmp_path, 'saved_model')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.lite_tmp_path, 'saved_model')",
                            "Call"
                        ]
                    ]
                }
            },
            "rmtree_61": {
                "path": {
                    "value": "saved_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.tmp_path, 'saved_model')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.lite_tmp_path, 'saved_model')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.lite_tmp_path, 'saved_model')",
                            "Call"
                        ]
                    ]
                }
            },
            "rmtree_78": {
                "path": {
                    "value": "saved_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.tmp_path, 'saved_model')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.lite_tmp_path, 'saved_model')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.lite_tmp_path, 'saved_model')",
                            "Call"
                        ]
                    ]
                }
            },
            "exists_56": {
                "path": {
                    "value": "os.path.join(saved_model_path, 'fp32.tflite')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exists_60": {
                "path": {
                    "value": "os.path.join(saved_model_path, 'fp16.tflite')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exists_69": {
                "path": {
                    "value": "os.path.join(saved_model_path, 'int8.tflite')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exists_77": {
                "path": {
                    "value": "os.path.join(saved_model_path, 'fp32.tflite')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exists_86": {
                "path": {
                    "value": "os.path.join(saved_model_path, 'int8.tflite')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_92": {
                "input_tensor": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_93": {
                "input_tensor": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_94": {
                "input_tensor": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "input_tensor": {
                    "value": "valid_lens",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_109": {
                "input_tensor": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_110": {
                "input_tensor": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "input_tensor": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_112": {
                "input_tensor": {
                    "value": "valid_lens",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_136": {
                "input_tensor": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_137": {
                "input_tensor": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_138": {
                "input_tensor": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_139": {
                "input_tensor": {
                    "value": "valid_lens",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/inspector.py": {
        "tensorflow": {
            "list_physical_devices_76": {
                "variable": {
                    "value": "devices",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_functions_eagerly_74": {
                "run_eagerly": {
                    "value": "FLAGS.debug",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_memory_growth_78": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "devices",
                            "Name"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exists_96": {
                "path": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.saved_model_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "read_file_106": {
                "variable": {
                    "value": "image_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "FLAGS.input_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_image_107": {
                "variable": {
                    "value": "image_arrays",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(FLAGS.input_image)",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(FLAGS.input_image)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "expand_animations": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_109": {
                "variable": {
                    "value": "image_arrays",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_arrays",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.decode_image(image_file, channels=3, expand_animations=False)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image_arrays, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_file, channels=3, expand_animations=False)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image_arrays, *model_config.image_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(image_arrays, 0), tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.ones((batch_size, *model_config.image_size, 3), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.tile(image_arrays, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_structure_112": {
                "variable": {
                    "value": "(boxes, scores, classes, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "np.array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*structure": {
                    "value": "detections_bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "driver.serve(image_arrays)",
                            "Call"
                        ],
                        [
                            "driver.serve(raw_frames)",
                            "Call"
                        ]
                    ]
                }
            },
            "rmtree_97": {
                "path": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.saved_model_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "read_file_130": {
                "variable": {
                    "value": "image_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "FLAGS.input_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_image_131": {
                "variable": {
                    "value": "image_arrays",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(FLAGS.input_image)",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(FLAGS.input_image)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "expand_animations": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "resize_with_pad_133": {
                "variable": {
                    "value": "image_arrays",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image_arrays",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.decode_image(image_file, channels=3, expand_animations=False)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image_arrays, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_file, channels=3, expand_animations=False)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image_arrays, *model_config.image_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(image_arrays, 0), tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.ones((batch_size, *model_config.image_size, 3), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.tile(image_arrays, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "*model_config.image_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cast_135": {
                "variable": {
                    "value": "image_arrays",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(image_arrays, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_140": {
                "variable": {
                    "value": "image_arrays",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, *model_config.image_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_137": {
                "variable": {
                    "value": "image_arrays",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_arrays",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.decode_image(image_file, channels=3, expand_animations=False)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image_arrays, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_file, channels=3, expand_animations=False)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image_arrays, *model_config.image_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(image_arrays, 0), tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.ones((batch_size, *model_config.image_size, 3), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.tile(image_arrays, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_135": {
                "input": {
                    "value": "image_arrays",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.decode_image(image_file, channels=3, expand_animations=False)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image_arrays, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_file, channels=3, expand_animations=False)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(image_arrays, *model_config.image_size)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.expand_dims(image_arrays, 0), tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.ones((batch_size, *model_config.image_size, 3), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.tile(image_arrays, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_structure_176": {
                "variable": {
                    "value": "(boxes, scores, classes, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "np.array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*structure": {
                    "value": "detections_bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "driver.serve(image_arrays)",
                            "Call"
                        ],
                        [
                            "driver.serve(raw_frames)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "efficientdet/tf2/inspector_test.py": {
        "tensorflow": {
            "main_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_46": {
                "checkpoint_dir": {
                    "value": "self.tempdir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exists_55": {
                "path": {
                    "value": "os.path.join(self.tempdir, '0.jpg')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exists_60": {
                "path": {
                    "value": "os.path.join(self.tempdir, '0.jpg')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "contains_saved_model_67": {
                "export_dir": {
                    "value": "FLAGS.saved_model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exists_68": {
                "path": {
                    "value": "tflite_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.saved_model_dir, 'fp32.tflite')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "efficientdet/tf2/label_util.py": {
        "tensorflow": {
            "GFile_148": {
                "name": {
                    "value": "mapping",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/postprocess.py": {
        "tensorflow": {
            "sigmoid_155": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "NonMaxSuppressionV5_193": {
                "variable": {
                    "value": "(nms_top_idx, nms_scores, nms_valid_lens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "boxes": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "anchors.decode_box_outputs(box_outputs, anchor_boxes)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, dtype=tf.float32, name='boxes')",
                            "Call"
                        ]
                    ]
                },
                "scores": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.sigmoid(cls_outputs)",
                            "Call"
                        ],
                        [
                            "tf.math.sigmoid(cls_outputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, dtype=tf.float32, name='scores')",
                            "Call"
                        ]
                    ]
                },
                "max_output_size": {
                    "value": "max_output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nms_configs['max_output_size']",
                            "Subscript"
                        ],
                        [
                            "params['nms_configs']['max_output_size']",
                            "Subscript"
                        ],
                        [
                            "params['nms_configs'].get('max_output_size', 100)",
                            "Call"
                        ]
                    ]
                },
                "iou_threshold": {
                    "value": "iou_thresh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nms_configs['iou_thresh'] or 0.5",
                            "BoolOp"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "nms_configs['iou_thresh'] or 0.5",
                            "BoolOp"
                        ]
                    ]
                },
                "score_threshold": {
                    "value": "score_thresh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nms_configs['score_thresh'] or float('-inf')",
                            "BoolOp"
                        ],
                        [
                            "nms_configs['score_thresh'] or 0.001",
                            "BoolOp"
                        ],
                        [
                            "params['nms_configs']['score_thresh'] or float('-inf')",
                            "BoolOp"
                        ],
                        [
                            "nms_configs['score_thresh'] or float('-inf')",
                            "BoolOp"
                        ]
                    ]
                },
                "soft_nms_sigma": {
                    "value": "sigma / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pad_to_max_output_size": {
                    "value": "padded",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_202": {
                "variable": {
                    "value": "nms_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "anchors.decode_box_outputs(box_outputs, anchor_boxes)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, dtype=tf.float32, name='boxes')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nms_top_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_203": {
                "variable": {
                    "value": "nms_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gather(classes, nms_top_idx) + CLASS_OFFSET",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "boxes.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "combined_non_max_suppression_233": {
                "variable": {
                    "value": "(nms_boxes, nms_scores, nms_classes, nms_valid_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "boxes": {
                    "value": "tf.expand_dims(boxes, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "scores": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.sigmoid(cls_outputs)",
                            "Call"
                        ],
                        [
                            "tf.math.sigmoid(cls_outputs)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, dtype=tf.float32, name='scores')",
                            "Call"
                        ]
                    ]
                },
                "max_output_size_per_class": {
                    "value": "max_output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nms_configs['max_output_size']",
                            "Subscript"
                        ],
                        [
                            "params['nms_configs']['max_output_size']",
                            "Subscript"
                        ],
                        [
                            "params['nms_configs'].get('max_output_size', 100)",
                            "Call"
                        ]
                    ]
                },
                "max_total_size": {
                    "value": "max_output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nms_configs['max_output_size']",
                            "Subscript"
                        ],
                        [
                            "params['nms_configs']['max_output_size']",
                            "Subscript"
                        ],
                        [
                            "params['nms_configs'].get('max_output_size', 100)",
                            "Call"
                        ]
                    ]
                },
                "score_threshold": {
                    "value": "score_thresh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nms_configs['score_thresh'] or float('-inf')",
                            "BoolOp"
                        ],
                        [
                            "nms_configs['score_thresh'] or 0.001",
                            "BoolOp"
                        ],
                        [
                            "params['nms_configs']['score_thresh'] or float('-inf')",
                            "BoolOp"
                        ],
                        [
                            "nms_configs['score_thresh'] or float('-inf')",
                            "BoolOp"
                        ]
                    ]
                },
                "clip_boxes": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_321": {
                "variable": {
                    "value": "normalize_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[height, width, height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_328": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_502": {
                "variable": {
                    "value": "image_ids_bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(image_ids, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nms_scores_bs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_64": {
                "t": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "anchors.decode_box_outputs(box_outputs, anchor_boxes)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, dtype=tf.float32, name='boxes')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "image_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.parse_image_size(image_size) * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "cls_outputs_reshape",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cls_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_94": {
                "variable": {
                    "value": "(_, cls_topk_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_outputs_reshape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(cls_outputs, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "max_nms_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['nms_configs'].get('max_nms_inputs', 0)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_98": {
                "variable": {
                    "value": "cls_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[indices, classes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_100": {
                "variable": {
                    "value": "cls_outputs_topk",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cls_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cls_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([indices, classes], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_101": {
                "variable": {
                    "value": "box_outputs_topk",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "box_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_list(box_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(box_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(box_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(box_outputs)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.expand_dims(indices, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_107": {
                "variable": {
                    "value": "cls_outputs_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_111": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.range(num_anchors), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_113": {
                "variable": {
                    "value": "cls_outputs_topk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cls_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_148": {
                "variable": {
                    "value": "anchor_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "eval_anchors.boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_topk_indices // num_classes",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_anchors), axis=0), [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(classes_i, cid))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_243": {
                "input": {
                    "value": "image_scales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_366": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_367": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_368": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "classes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_369": {
                "variable": {
                    "value": "num_detections",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "num_detections",
                    "type": "str",
                    "possible_values": []
                }
            },
            "function_363": {
                "experimental_implements": {
                    "value": "tflite_nms_implements_signature(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_404": {
                "input": {
                    "value": "image_scales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_445": {
                "variable": {
                    "value": "nms_boxes_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(nms_boxes_cls, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, max_output_size], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_447": {
                "variable": {
                    "value": "nms_scores_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(nms_scores_cls, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, max_output_size]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_449": {
                "variable": {
                    "value": "nms_classes_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(nms_classes_cls, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, max_output_size]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_451": {
                "variable": {
                    "value": "nms_valid_len_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "nms_valid_len_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(nms_valid_len_cls)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_453": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nms_scores_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.concat(nms_scores_cls, 0), [[0, max_output_size]])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "max_output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nms_configs['max_output_size']",
                            "Subscript"
                        ],
                        [
                            "params['nms_configs']['max_output_size']",
                            "Subscript"
                        ],
                        [
                            "params['nms_configs'].get('max_output_size', 100)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_465": {
                "input": {
                    "value": "image_scales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_527": {
                "values": {
                    "value": "detections_bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[image_ids_bs * tf.ones_like(nms_scores_bs), original_image_widths - nms_boxes_bs[:, :, 3], nms_boxes_bs[:, :, 0], original_image_widths - nms_boxes_bs[:, :, 1], nms_boxes_bs[:, :, 2], nms_scores_bs, nms_classes_bs]",
                            "List"
                        ],
                        [
                            "[image_ids_bs * tf.ones_like(nms_scores_bs), nms_boxes_bs[:, :, 1], nms_boxes_bs[:, :, 0], nms_boxes_bs[:, :, 3], nms_boxes_bs[:, :, 2], nms_scores_bs, nms_classes_bs]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "detections",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_591": {
                "values": {
                    "value": "[detections[:, :, 0], detections[:, :, 1], detections[:, :, 2], detections[:, :, 3] - detections[:, :, 1], detections[:, :, 4] - detections[:, :, 2], detections[:, :, 5], detections[:, :, 6]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "vectorized_map_53": {
                "fn": {
                    "value": "map_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "fallback_to_while_loop": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "stack_58": {
                "values": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_71": {
                "input": {
                    "value": "cls_outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_74": {
                "variable": {
                    "value": "cls_outputs[level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "cls_outputs[level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_75": {
                "variable": {
                    "value": "box_outputs[level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "box_outputs[level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_79": {
                "values": {
                    "value": "box_outputs_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_85": {
                "input": {
                    "value": "cls_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_234": {
                "input": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "anchors.decode_box_outputs(box_outputs, anchor_boxes)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, dtype=tf.float32, name='boxes')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_429": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(classes_i, cid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_432": {
                "variable": {
                    "value": "classes_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classes_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_topk_indices // num_classes",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_anchors), axis=0), [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(classes_i, cid))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_433": {
                "variable": {
                    "value": "boxes_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "boxes_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_topk_indices // num_classes",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_anchors), axis=0), [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(classes_i, cid))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_434": {
                "variable": {
                    "value": "scores_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "scores_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_topk_indices // num_classes",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_anchors), axis=0), [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(classes_i, cid))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_502": {
                "input": {
                    "value": "image_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_540": {
                "input": {
                    "value": "image_scales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "numpy_function_549": {
                "variable": {
                    "value": "detections",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "functools.partial(nms_np.per_class_nms, nms_configs=nms_configs)",
                    "type": "Call",
                    "possible_values": []
                },
                "inp": {
                    "value": "[boxes[index], scores[index], classes[index], tf.slice(image_ids, [index], [1]), tf.slice(image_scales, [index], [1]), params['num_classes'], nms_configs['max_output_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_575": {
                "values": {
                    "value": "detections_bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[image_ids_bs * tf.ones_like(nms_scores_bs), original_image_widths - nms_boxes_bs[:, :, 3], nms_boxes_bs[:, :, 0], original_image_widths - nms_boxes_bs[:, :, 1], nms_boxes_bs[:, :, 2], nms_scores_bs, nms_classes_bs]",
                            "List"
                        ],
                        [
                            "[image_ids_bs * tf.ones_like(nms_scores_bs), nms_boxes_bs[:, :, 1], nms_boxes_bs[:, :, 0], nms_boxes_bs[:, :, 3], nms_boxes_bs[:, :, 2], nms_scores_bs, nms_classes_bs]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "detections",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "tensor": {
                    "value": "cls_outputs[level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1, params['num_classes']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "tensor": {
                    "value": "box_outputs[level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_102": {
                "input": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_topk_indices // num_classes",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_anchors), axis=0), [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(classes_i, cid))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_108": {
                "input": {
                    "value": "cls_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ],
                        [
                            "to_list(cls_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_112": {
                "input": {
                    "value": "tf.range(num_anchors)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_204": {
                "params": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_topk_indices % num_classes",
                            "BinOp"
                        ],
                        [
                            "cls_outputs_idx",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.constant(0.0, dtype=tf.float32, name='classes')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nms_top_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_244": {
                "x": {
                    "value": "scales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(image_scales, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(image_scales, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(image_scales, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nms_boxes.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_405": {
                "x": {
                    "value": "scales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(image_scales, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(image_scales, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(image_scales, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nms_boxes.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_446": {
                "values": {
                    "value": "nms_boxes_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.concat(nms_boxes_cls, 0), [[0, max_output_size], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_448": {
                "values": {
                    "value": "nms_scores_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.concat(nms_scores_cls, 0), [[0, max_output_size]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_450": {
                "values": {
                    "value": "nms_classes_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.concat(nms_classes_cls, 0), [[0, max_output_size]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_466": {
                "x": {
                    "value": "scales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(image_scales, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(image_scales, -1), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(image_scales, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nms_boxes.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_561": {
                "variable": {
                    "value": "detections",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[detections[:, 0], original_image_widths[index] - detections[:, 3], detections[:, 2], original_image_widths[index] - detections[:, 1], detections[:, 4], detections[:, 5], detections[:, 6]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_429": {
                "x": {
                    "value": "classes_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "cid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(params['num_classes'])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_456": {
                "params": {
                    "value": "nms_boxes_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.concat(nms_boxes_cls, 0), [[0, max_output_size], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_topk_indices // num_classes",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_anchors), axis=0), [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(classes_i, cid))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_457": {
                "params": {
                    "value": "nms_scores_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.concat(nms_scores_cls, 0), [[0, max_output_size]])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_topk_indices // num_classes",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_anchors), axis=0), [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(classes_i, cid))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_458": {
                "params": {
                    "value": "nms_classes_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.concat(nms_classes_cls, 0), [[0, max_output_size]])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_topk_indices // num_classes",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_anchors), axis=0), [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(classes_i, cid))",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_459": {
                "x": {
                    "value": "max_output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nms_configs['max_output_size']",
                            "Subscript"
                        ],
                        [
                            "params['nms_configs']['max_output_size']",
                            "Subscript"
                        ],
                        [
                            "params['nms_configs'].get('max_output_size', 100)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_sum(nms_valid_len_cls)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_505": {
                "input": {
                    "value": "nms_scores_bs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_519": {
                "input": {
                    "value": "nms_scores_bs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_459": {
                "input_tensor": {
                    "value": "nms_valid_len_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(nms_valid_len_cls)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_554": {
                "input_": {
                    "value": "image_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[index]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_555": {
                "input_": {
                    "value": "image_scales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[index]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/postprocess_test.py": {
        "tensorflow": {
            "constant_147": {
                "variable": {
                    "value": "corners",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.0, -1.177383, 1.793507, 8.340945, 4.418388, 0.901576, 2.0], [0.0, 5.67641, 6.102146, 7.785691, 8.537168, 0.888125, 1.0]], [[1.0, 5.885427, 13.529362, 11.410081, 14.154047, 0.884544, 1.0], [1.0, 8.145872, -9.660868, 14.173973, 10.41237, 0.815883, 2.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_seed_50": {
                "seed": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_seed_73": {
                "seed": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_seed_110": {
                "seed": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_seed_164": {
                "seed": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_seed_207": {
                "seed": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_52": {
                "shape": {
                    "value": "[2, 4, 4, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_53": {
                "shape": {
                    "value": "[2, 2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_56": {
                "shape": {
                    "value": "[2, 4, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_57": {
                "shape": {
                    "value": "[2, 2, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_75": {
                "shape": {
                    "value": "[2, 4, 4, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_76": {
                "shape": {
                    "value": "[2, 2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_79": {
                "shape": {
                    "value": "[2, 4, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_80": {
                "shape": {
                    "value": "[2, 2, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_112": {
                "shape": {
                    "value": "[2, 4, 4, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_113": {
                "shape": {
                    "value": "[2, 2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_116": {
                "shape": {
                    "value": "[2, 4, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_117": {
                "shape": {
                    "value": "[2, 2, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_166": {
                "shape": {
                    "value": "[2, 4, 4, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_167": {
                "shape": {
                    "value": "[2, 2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_170": {
                "shape": {
                    "value": "[2, 4, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_171": {
                "shape": {
                    "value": "[2, 2, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_209": {
                "shape": {
                    "value": "[1, 4, 4, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_210": {
                "shape": {
                    "value": "[1, 2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_213": {
                "shape": {
                    "value": "[1, 4, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_214": {
                "shape": {
                    "value": "[1, 2, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/segmentation.py": {
        "tensorflow": {
            "argmax_26": {
                "variable": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(pred_mask, axis=-1)",
                            "Call"
                        ],
                        [
                            "pred_mask[..., tf.newaxis]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "resize_39": {
                "variable": {
                    "value": "input_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "datapoint['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "resize_40": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "datapoint['segmentation_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(128, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "resize_52": {
                "variable": {
                    "value": "input_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "datapoint['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "resize_53": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "datapoint['segmentation_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(128, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_left_right_43": {
                "variable": {
                    "value": "input_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "input_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(input_image, tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(datapoint['image'], (512, 512))",
                            "Call"
                        ],
                        [
                            "tf.image.flip_left_right(input_image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(datapoint['image'], (512, 512))",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_left_right_44": {
                "variable": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "input_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_mask - 1",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(datapoint['segmentation_mask'], (128, 128))",
                            "Call"
                        ],
                        [
                            "tf.image.flip_left_right(input_mask)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(datapoint['segmentation_mask'], (128, 128))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_32": {
                "x": {
                    "value": "input_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(input_image, tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(datapoint['image'], (512, 512))",
                            "Call"
                        ],
                        [
                            "tf.image.flip_left_right(input_image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(datapoint['image'], (512, 512))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_42": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_80": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_96": {
                "shape": {
                    "value": "(1, 512, 512, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/train.py": {
        "tensorflow": {
            "Policy_219": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.get_precision(config.strategy, config.mixed_precision)",
                            "Call"
                        ]
                    ]
                }
            },
            "makedirs_145": {
                "path": {
                    "value": "config.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_175": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUStrategy_179": {
                "variable": {
                    "value": "ds_strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu_cluster_resolver": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(FLAGS.tpu, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_global_policy_220": {
                "policy": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.mixed_precision.Policy(precision)",
                            "Call"
                        ]
                    ]
                }
            },
            "exists_147": {
                "path": {
                    "value": "config_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(config.model_dir, 'config.yaml')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_148": {
                "name": {
                    "value": "config_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(config.model_dir, 'config.yaml')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "write_148": {
                "tag": {
                    "value": "str(config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "list_physical_devices_163": {
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_167": {
                "seed": {
                    "value": "FLAGS.tf_random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_op_determinism_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_log_device_placement_171": {
                "enabled": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "experimental_connect_to_cluster_177": {
                "cluster_spec_or_resolver": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(FLAGS.tpu, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_tpu_system_178": {
                "enable_coordination_service": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(FLAGS.tpu, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                }
            },
            "list_physical_devices_182": {
                "variable": {
                    "value": "gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MirroredStrategy_193": {
                "variable": {
                    "value": "ds_strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "cross_device_ops": {
                    "value": "cross_device_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.HierarchicalCopyAllReduce()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "latest_checkpoint_249": {
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_250": {
                "variable": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_memory_growth_164": {
                "device": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.config.list_physical_devices('GPU')",
                            "Call"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "list_logical_devices_180": {
                "device_type": {
                    "value": "TPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "HierarchicalCopyAllReduce_190": {
                "variable": {
                    "value": "cross_device_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "list_physical_devices_197": {
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "OneDeviceStrategy_198": {
                "variable": {
                    "value": "ds_strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device:GPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "OneDeviceStrategy_200": {
                "variable": {
                    "value": "ds_strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device:CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "enable_debug_mode_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_functions_eagerly_247": {
                "run_eagerly": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "latest_checkpoint_256": {
                "variable": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.pretrained_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "checkpoints_iterator_275": {
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_interval_secs": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_137": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/train_lib.py": {
        "tensorflow": {
            "TensorBoard_311": {
                "variable": {
                    "value": "tb_callback",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "params['model_dir']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "update_freq": {
                    "value": "params['steps_per_execution']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "profile_batch": {
                    "value": "2 if params['profile'] else 0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "where_79": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "step < self.lr_warmup_step",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "linear_warmup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lr_warmup_init + tf.cast(step, dtype=tf.float32) / self.lr_warmup_step * (self.adjusted_lr - self.lr_warmup_init)",
                            "BinOp"
                        ],
                        [
                            "self.lr_warmup_init + tf.cast(step, dtype=tf.float32) / self.lr_warmup_step * (self.adjusted_lr - self.lr_warmup_init)",
                            "BinOp"
                        ],
                        [
                            "self.lr_warmup_init + tf.cast(step, dtype=tf.float32) / self.lr_warmup_step * (self.adjusted_lr - self.lr_warmup_init)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.adjusted_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_107": {
                "variable": {
                    "value": "self.decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "total_steps - lr_warmup_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_182": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "learning_rate_schedule(params)",
                            "Call"
                        ],
                        [
                            "tf.where(step < self.lr_warmup_step, linear_warmup, self.adjusted_lr)",
                            "Call"
                        ],
                        [
                            "tf.where(step < start_global_step, learning_rate, self.adjusted_lr * mult)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['momentum']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "LossScaleOptimizer_196": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_scale": {
                    "value": "params['loss_scale']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "create_file_writer_216": {
                "variable": {
                    "value": "self.file_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(config.model_dir, 'coco')",
                            "Call"
                        ],
                        [
                            "os.path.join(config.model_dir, 'test_images')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.model_dir, 'train_images')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.model_dir, 'train_images')",
                            "Call"
                        ]
                    ]
                }
            },
            "read_file_256": {
                "variable": {
                    "value": "image_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "sample_image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_257": {
                "variable": {
                    "value": "self.sample_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.image.decode_jpeg(image_file, channels=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "create_file_writer_266": {
                "variable": {
                    "value": "self.file_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(config.model_dir, 'coco')",
                            "Call"
                        ],
                        [
                            "os.path.join(config.model_dir, 'test_images')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.model_dir, 'train_images')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.model_dir, 'train_images')",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_277": {
                "variable": {
                    "value": "(boxes, scores, classes, valid_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "np.array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*structure": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(self.sample_image, training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModelCheckpoint_305": {
                "variable": {
                    "value": "ckpt_callback",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "os.path.join(params['model_dir'], 'ckpt-{epoch:d}')",
                    "type": "Call",
                    "possible_values": []
                },
                "verbose": {
                    "value": "params['verbose']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "save_freq": {
                    "value": "params['save_freq']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_391": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y_pred.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_392": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y_pred.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_396": {
                "variable": {
                    "value": "pred_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_403": {
                "variable": {
                    "value": "ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_true * (1.0 - self.label_smoothing) + 0.5 * self.label_smoothing",
                            "BinOp"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Huber_423": {
                "variable": {
                    "value": "self.huber",
                    "type": "Attribute",
                    "possible_values": []
                },
                "delta": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_430": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box_targets != 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "box_outputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_431": {
                "variable": {
                    "value": "box_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(box_targets, axis=-1)",
                            "Call"
                        ],
                        [
                            "anchors.decode_box_outputs(box_targets, anchor_boxes) * mask",
                            "BinOp"
                        ],
                        [
                            "tf.concat([tf.reshape(labels['box_targets_%d' % (level + self.config.min_level)], [-1, 4]) for level in levels], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_432": {
                "variable": {
                    "value": "box_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(box_outputs, axis=-1)",
                            "Call"
                        ],
                        [
                            "anchors.decode_box_outputs(box_outputs, anchor_boxes) * mask",
                            "BinOp"
                        ],
                        [
                            "tf.concat([tf.reshape(v, [-1, 4]) for v in box_outputs], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_453": {
                "variable": {
                    "value": "anchor_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_anchors.boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[box_outputs.shape[0] // self.input_anchors.boxes.shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_458": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box_targets != 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "box_outputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "create_file_writer_476": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(config.model_dir, 'coco')",
                            "Call"
                        ],
                        [
                            "os.path.join(config.model_dir, 'test_images')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.model_dir, 'train_images')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.model_dir, 'train_images')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_534": {
                "variable": {
                    "value": "num_positives_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_positives_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(labels['mean_num_positives']) + 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.keras.backend.moving_average_update(moving_normalizer_var, num_positives_sum, momentum=self.config.positives_momentum)",
                            "Call"
                        ],
                        [
                            "tf.cast(num_positives_sum, dtype)",
                            "Call"
                        ],
                        [
                            "utils.cross_replica_mean(num_positives_sum)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_outputs[0].dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "create_file_writer_759": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(config.model_dir, 'coco')",
                            "Call"
                        ],
                        [
                            "os.path.join(config.model_dir, 'test_images')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.model_dir, 'train_images')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config.model_dir, 'train_images')",
                            "Call"
                        ]
                    ]
                }
            },
            "where_84": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "step < start_global_step",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "learning_rate_schedule(params)",
                            "Call"
                        ],
                        [
                            "tf.where(step < self.lr_warmup_step, linear_warmup, self.adjusted_lr)",
                            "Call"
                        ],
                        [
                            "tf.where(step < start_global_step, learning_rate, self.adjusted_lr * mult)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.adjusted_lr * mult",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_116": {
                "condition": {
                    "value": "step < self.lr_warmup_step",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "linear_warmup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lr_warmup_init + tf.cast(step, dtype=tf.float32) / self.lr_warmup_step * (self.adjusted_lr - self.lr_warmup_init)",
                            "BinOp"
                        ],
                        [
                            "self.lr_warmup_init + tf.cast(step, dtype=tf.float32) / self.lr_warmup_step * (self.adjusted_lr - self.lr_warmup_init)",
                            "BinOp"
                        ],
                        [
                            "self.lr_warmup_init + tf.cast(step, dtype=tf.float32) / self.lr_warmup_step * (self.adjusted_lr - self.lr_warmup_init)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "cosine_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5 * self.adjusted_lr * (1 + tf.cos(math.pi * tf.cast(step, tf.float32) / self.decay_steps))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_148": {
                "condition": {
                    "value": "step < self.lr_warmup_step",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "linear_warmup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lr_warmup_init + tf.cast(step, dtype=tf.float32) / self.lr_warmup_step * (self.adjusted_lr - self.lr_warmup_init)",
                            "BinOp"
                        ],
                        [
                            "self.lr_warmup_init + tf.cast(step, dtype=tf.float32) / self.lr_warmup_step * (self.adjusted_lr - self.lr_warmup_init)",
                            "BinOp"
                        ],
                        [
                            "self.lr_warmup_init + tf.cast(step, dtype=tf.float32) / self.lr_warmup_step * (self.adjusted_lr - self.lr_warmup_init)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "polynomial_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.adjusted_lr * tf.pow(1 - tf.cast(step, dtype=tf.float32) / self.total_steps, self.power)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_185": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "learning_rate_schedule(params)",
                            "Call"
                        ],
                        [
                            "tf.where(step < self.lr_warmup_step, linear_warmup, self.adjusted_lr)",
                            "Call"
                        ],
                        [
                            "tf.where(step < start_global_step, learning_rate, self.adjusted_lr * mult)",
                            "Call"
                        ]
                    ]
                },
                "beta_1": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['momentum']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "numpy_function_228": {
                "func": {
                    "value": "self.evaluator.update_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[labels['groundtruth_data'], postprocess.transform_detections(detections)]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_strategy_236": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_521": {
                "variable": {
                    "value": "moving_normalizer_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_normalizer",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_outputs[0].dtype",
                            "Attribute"
                        ]
                    ]
                },
                "synchronization": {
                    "value": "tf.VariableSynchronization.ON_READ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "aggregation": {
                    "value": "tf.VariableAggregation.MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_540": {
                "variable": {
                    "value": "cls_targets_at_level",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels['cls_targets_%d' % (level + self.config.min_level)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_outputs[0].dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "concat_581": {
                "variable": {
                    "value": "box_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(v, [-1, 4]) for v in box_outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_583": {
                "variable": {
                    "value": "box_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(labels['box_targets_%d' % (level + self.config.min_level)], [-1, 4]) for level in levels]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_678": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.optimizer.get_unscaled_gradients(scaled_gradients)",
                            "Call"
                        ],
                        [
                            "scaled_gradients",
                            "Name"
                        ],
                        [
                            "[tf.clip_by_norm(g, clip_norm) if g is not None else None for g in gradients]",
                            "ListComp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "abs(self.config.clip_gradients_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_norm_679": {
                "variable": {
                    "value": "loss_vals[gradient_norm]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.optimizer.get_unscaled_gradients(scaled_gradients)",
                            "Call"
                        ],
                        [
                            "scaled_gradients",
                            "Name"
                        ],
                        [
                            "[tf.clip_by_norm(g, clip_norm) if g is not None else None for g in gradients]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "pow_146": {
                "x": {
                    "value": "1 - tf.cast(step, dtype=tf.float32) / self.total_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.power",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_258": {
                "contents": {
                    "value": "image_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(sample_image)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_289": {
                "name": {
                    "value": "Test image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(image, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_434": {
                "x": {
                    "value": "self.huber(box_targets, box_outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "box_outputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_436": {
                "input_tensor": {
                    "value": "box_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.huber(box_targets, box_outputs), box_outputs.dtype) * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(box_loss) / normalizer",
                            "BinOp"
                        ],
                        [
                            "tf.add_n(box_losses) if box_losses else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "reduce_sum_463": {
                "input_tensor": {
                    "value": "box_iou_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iou_utils.iou_loss(box_outputs, box_targets, self.iou_loss_type)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(box_iou_loss) / normalizer",
                            "BinOp"
                        ],
                        [
                            "box_iou_loss_layer([num_positives_sum, box_targets], box_outputs)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "add_n_489": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in self._freeze_vars() if var_match.match(v.name)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_sum_517": {
                "input_tensor": {
                    "value": "labels['mean_num_positives']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_547": {
                "variable": {
                    "value": "cls_targets_at_level",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cls_targets_at_level",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels['cls_targets_%d' % (level + self.config.min_level)], self.config.num_classes, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_targets_at_level, [bs, -1, width, height])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_targets_at_level, [bs, width, height, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, -1, width, height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_551": {
                "variable": {
                    "value": "cls_targets_at_level",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cls_targets_at_level",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels['cls_targets_%d' % (level + self.config.min_level)], self.config.num_classes, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_targets_at_level, [bs, -1, width, height])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_targets_at_level, [bs, width, height, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, width, height, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_569": {
                "variable": {
                    "value": "cls_loss_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(cls_losses) if cls_losses else 0",
                            "IfExp"
                        ],
                        [
                            "class_loss_layer([num_positives_sum, cls_targets_at_level], cls_outputs[level])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_loss, [bs, -1, width, height, self.config.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_loss, [bs, width, height, -1, self.config.num_classes])",
                            "Call"
                        ],
                        [
                            "cls_loss * tf.cast(tf.expand_dims(tf.not_equal(labels['cls_targets_%d' % (level + self.config.min_level)], -2), -1), dtype)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_n_596": {
                "inputs": {
                    "value": "cls_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_n_597": {
                "inputs": {
                    "value": "box_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "GradientTape_623": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_655": {
                "x": {
                    "value": "reg_l2_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._reg_l2_loss(self.config.weight_decay)",
                            "Call"
                        ],
                        [
                            "self._reg_l2_loss(self.config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "loss_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_outputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "cls_outputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "seg_outputs.dtype",
                            "Attribute"
                        ],
                        [
                            "cls_outputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "cls_outputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "seg_outputs.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_728": {
                "x": {
                    "value": "reg_l2_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._reg_l2_loss(self.config.weight_decay)",
                            "Call"
                        ],
                        [
                            "self._reg_l2_loss(self.config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "loss_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_outputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "cls_outputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "seg_outputs.dtype",
                            "Attribute"
                        ],
                        [
                            "cls_outputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "cls_outputs[0].dtype",
                            "Attribute"
                        ],
                        [
                            "seg_outputs.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cos_115": {
                "x": {
                    "value": "math.pi * tf.cast(step, tf.float32) / self.decay_steps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_289": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inference.visualize_image(self.sample_image[0], boxes[0][:length], classes[0].astype(np.int)[:length], scores[0][:length], label_map=self.model.config.label_map, min_score_thresh=self.min_score_thresh, max_boxes_to_draw=self.max_boxes_to_draw)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_559": {
                "variable": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(cls_losses) if cls_losses else 0",
                            "IfExp"
                        ],
                        [
                            "class_loss_layer([num_positives_sum, cls_targets_at_level], cls_outputs[level])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_loss, [bs, -1, width, height, self.config.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_loss, [bs, width, height, -1, self.config.num_classes])",
                            "Call"
                        ],
                        [
                            "cls_loss * tf.cast(tf.expand_dims(tf.not_equal(labels['cls_targets_%d' % (level + self.config.min_level)], -2), -1), dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, -1, width, height, self.config.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_562": {
                "variable": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cls_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(cls_losses) if cls_losses else 0",
                            "IfExp"
                        ],
                        [
                            "class_loss_layer([num_positives_sum, cls_targets_at_level], cls_outputs[level])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_loss, [bs, -1, width, height, self.config.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cls_loss, [bs, width, height, -1, self.config.num_classes])",
                            "Call"
                        ],
                        [
                            "cls_loss * tf.cast(tf.expand_dims(tf.not_equal(labels['cls_targets_%d' % (level + self.config.min_level)], -2), -1), dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, width, height, -1, self.config.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_564": {
                "x": {
                    "value": "tf.expand_dims(tf.not_equal(labels['cls_targets_%d' % (level + self.config.min_level)], -2), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_outputs[0].dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "image_622": {
                "name": {
                    "value": "input_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_77": {
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_112": {
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_144": {
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_246": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "metrics[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "epoch + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "l2_loss_490": {
                "t": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_565": {
                "input": {
                    "value": "tf.not_equal(labels['cls_targets_%d' % (level + self.config.min_level)], -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_570": {
                "x": {
                    "value": "cls_loss_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(cls_loss)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls_outputs[0].dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_581": {
                "tensor": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_584": {
                "tensor": {
                    "value": "labels['box_targets_%d' % (level + self.config.min_level)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_norm_675": {
                "t": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "abs(self.config.clip_gradients_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_147": {
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_566": {
                "x": {
                    "value": "labels['cls_targets_%d' % (level + self.config.min_level)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_115": {
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/train_lib_test.py": {
        "tensorflow": {
            "ones_32": {
                "variable": {
                    "value": "fake_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[512, 512, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "encode_jpeg_33": {
                "variable": {
                    "value": "fake_jpeg",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "fake_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([512, 512, 3], dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_72": {
                "variable": {
                    "value": "box_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normal_73": {
                "variable": {
                    "value": "box_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_74": {
                "variable": {
                    "value": "num_positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "4.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_107": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 512, 512, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "write_file_35": {
                "filename": {
                    "value": "sample_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(config.model_dir + 'fake_image.jpg')",
                            "Call"
                        ]
                    ]
                },
                "contents": {
                    "value": "fake_jpeg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.encode_jpeg(fake_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_seed_58": {
                "seed": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_seed_98": {
                "seed": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_functions_eagerly_199": {
                "run_eagerly": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_109": {
                "shape": {
                    "value": "(1, 512 // 2 ** i, 512 // 2 ** i, 36)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "GradientTape_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_113": {
                "shape": {
                    "value": "(1, 512 // 2 ** i, 512 // 2 ** i, 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_116": {
                "shape": {
                    "value": "(1, 128, 128, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_117": {
                "value": {
                    "value": "[10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_150": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/util_keras.py": {
        "tensorflow": {
            "list_variables_133": {
                "variable": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "ckpt_path_or_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(ckpt_path_or_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "isdir_130": {
                "path": {
                    "value": "ckpt_path_or_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(ckpt_path_or_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_131": {
                "variable": {
                    "value": "ckpt_path_or_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_path_or_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(ckpt_path_or_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_checkpoint_182": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "ckpt_path_or_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(ckpt_path_or_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "Checkpoint_144": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_162": {
                "variable": {
                    "value": "ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_variable_100": {
                "ckpt_dir_or_file": {
                    "value": "ckpt_path_or_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(ckpt_path_or_file)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cpt_var_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_get_cpt_var_name(var.name)",
                            "Call"
                        ],
                        [
                            "var_name[len(name_prefix):]",
                            "Subscript"
                        ],
                        [
                            "cpt_var_name.replace('/', '.S')",
                            "Call"
                        ],
                        [
                            "hub_name_prefix + '/' + cpt_var_name",
                            "BinOp"
                        ],
                        [
                            "cpt_var_name.replace(':0', '')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_219": {
                "x": {
                    "value": "input_nested",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/util_keras_test.py": {
        "tensorflow": {
            "uniform_29": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[8, 40, 40, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/tf2/wbf.py": {
        "tensorflow": {
            "split_21": {
                "variable": {
                    "value": "(x11, y11, x12, y12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "clusters[:, 1:5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_22": {
                "variable": {
                    "value": "(x21, y21, x22, y22)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "detection[1:5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_24": {
                "variable": {
                    "value": "xa",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x11",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "x21",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_25": {
                "variable": {
                    "value": "ya",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y11",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y21",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "minimum_26": {
                "variable": {
                    "value": "xb",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x12",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "x22",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "minimum_27": {
                "variable": {
                    "value": "yb",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y12",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y22",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "ious",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ious",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vectorized_iou(tf.stack(clusters), detection)",
                            "Call"
                        ],
                        [
                            "tf.reshape(ious, [len(clusters)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[len(clusters)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "detections",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "detections",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(detections)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_48": {
                "input": {
                    "value": "ious",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vectorized_iou(tf.stack(clusters), detection)",
                            "Call"
                        ],
                        [
                            "tf.reshape(ious, [len(clusters)])",
                            "Call"
                        ]
                    ]
                }
            },
            "where_75": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(detections[:, 6], cid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_78": {
                "variable": {
                    "value": "class_detections",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "detections",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(detections)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(detections[:, 6], cid))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_95": {
                "values": {
                    "value": "all_clusters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "maximum_29": {
                "x": {
                    "value": "yb - ya",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_43": {
                "values": {
                    "value": "clusters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_max_45": {
                "input_tensor": {
                    "value": "ious",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vectorized_iou(tf.stack(clusters), detection)",
                            "Call"
                        ],
                        [
                            "tf.reshape(ious, [len(clusters)])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_52": {
                "input_tensor": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_65": {
                "input_tensor": {
                    "value": "detections[:, 5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_75": {
                "x": {
                    "value": "detections[:, 6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "cid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(params['num_classes'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "efficientdet/tf2/wbf_test.py": {
        "tensorflow": {
            "constant_25": {
                "variable": {
                    "value": "d1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 3, 3, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_26": {
                "variable": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 1, 1, 3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_33": {
                "variable": {
                    "value": "d1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 3, 3, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_34": {
                "variable": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 2, 4, 4, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_41": {
                "variable": {
                    "value": "d1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 3, 2, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_42": {
                "variable": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 1, 4, 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_49": {
                "variable": {
                    "value": "d1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 3, 3, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_50": {
                "variable": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3, 3, 5, 5, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_57": {
                "variable": {
                    "value": "vector_to_match",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 1, 3, 3, 1, 1], [1, 2, 2, 4, 4, 1, 1], [1, 3, 3, 5, 5, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_66": {
                "variable": {
                    "value": "detection",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 1, 1, 3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_72": {
                "variable": {
                    "value": "matching_cluster",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 1, 1, 2, 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_73": {
                "variable": {
                    "value": "non_matching_cluster",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3, 3, 2, 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_75": {
                "variable": {
                    "value": "box",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 1, 1, 2, 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_88": {
                "variable": {
                    "value": "overlaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 1, 1, 11, 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_89": {
                "variable": {
                    "value": "overlaps_better",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 1, 12, 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_91": {
                "variable": {
                    "value": "box",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3, 1, 13, 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_102": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_104": {
                "variable": {
                    "value": "weights1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_109": {
                "variable": {
                    "value": "weights2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_114": {
                "variable": {
                    "value": "weights3",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_120": {
                "variable": {
                    "value": "d1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 1, 1, 2, 2, 0.3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_121": {
                "variable": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3, 3, 4, 4, 0.7, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_134": {
                "variable": {
                    "value": "d1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 1, 10, 1, 0.75, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_135": {
                "variable": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3, 1, 10, 1, 0.75, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_136": {
                "variable": {
                    "value": "d3",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 3, 1, 10, 1, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_69": {
                "tensor": {
                    "value": "ious",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "wbf.vectorized_iou(vector_to_match, detection)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_139": {
                "values": {
                    "value": "[d1, d2, d3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/utils.py": {
        "tensorflow": {
            "get_collection_112": {
                "variable": {
                    "value": "model_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "var_scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var_scope[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_checkpoint_113": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "floor_339": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "random_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "survival_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + tf.random.uniform([batch_size, 1, 1, 1], dtype=inputs.dtype)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_collection_395": {
                "variable": {
                    "value": "scalar_summaries",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "scalar_summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_430": {
                "variable": {
                    "value": "global_step_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "glob_448": {
                "variable": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "pattern": {
                    "value": "ckpt_path + '.*'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "generate_checkpoint_state_proto_469": {
                "variable": {
                    "value": "ckpt_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "save_dir": {
                    "value": "dst_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'archive')",
                            "Call"
                        ]
                    ]
                },
                "model_checkpoint_path": {
                    "value": "os.path.join(dst_dir, ckpt_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Policy_604": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "policy_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_31": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_32": {
                "variable": {
                    "value": "safe_log",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(x > 0.0, beta * x + 1.0, tf.ones_like(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_replica_context_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_static_value_118": {
                "variable": {
                    "value": "replica_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.distribute.get_replica_context().replica_id_in_sync_group",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_replica_context_220": {
                "variable": {
                    "value": "replica_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_303": {
                "variable": {
                    "value": "gamma_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_305": {
                "variable": {
                    "value": "gamma_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "uniform_338": {
                "shape": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_397": {
                "variable": {
                    "value": "image_summaries",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "image_summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exists_440": {
                "path": {
                    "value": "saved_objective_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'best_objective.txt')",
                            "Call"
                        ]
                    ]
                }
            },
            "exists_455": {
                "path": {
                    "value": "backup_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'backup')",
                            "Call"
                        ]
                    ]
                }
            },
            "exists_460": {
                "path": {
                    "value": "dst_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'archive')",
                            "Call"
                        ]
                    ]
                }
            },
            "makedirs_465": {
                "path": {
                    "value": "dst_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'archive')",
                            "Call"
                        ]
                    ]
                }
            },
            "enable_v2_dtype_behavior_601": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_global_policy_605": {
                "policy": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf2.keras.mixed_precision.Policy(policy_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_627": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ii",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bfloat16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_29": {
                "name": {
                    "value": "srelu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_33": {
                "condition": {
                    "value": "x > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x - 1.0 / beta * safe_log",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "swish_39": {
                "x": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_replica_sum_74": {
                "x": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "group_assignment": {
                    "value": "group_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[[x for x in range(num_shards) if x // num_shards_per_group == y] for y in range(num_groups)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cast_74": {
                "x": {
                    "value": "num_shards_per_group",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(32, num_shards)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_82": {
                "key": {
                    "value": "tf.GraphKeys.MOVING_AVERAGE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_187": {
                "variable": {
                    "value": "shard_square_of_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shard_mean",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_225": {
                "variable": {
                    "value": "shard_square_of_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shard_mean",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_336": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_normalization(inputs=inputs, axis=axis, momentum=momentum, epsilon=epsilon, center=True, scale=True, training=is_training_bn, strategy=strategy, gamma_initializer=gamma_initializer, name=name)",
                            "Call"
                        ],
                        [
                            "activation_fn(inputs, act_type)",
                            "Call"
                        ],
                        [
                            "tf.cast(ii, tf.bfloat16)",
                            "Call"
                        ],
                        [
                            "tf.cast(ii, tf.float16)",
                            "Call"
                        ]
                    ]
                }
            },
            "profile_353": {
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                },
                "options": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.profiler.ProfileOptionBuilder.float_operation()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_380": {
                "name": {
                    "value": "scalar_summaries",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "Pair(name, tf.reduce_mean(tensor))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_382": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scalar_summaries[i][0]",
                            "Subscript"
                        ],
                        [
                            "image_summaries[i][0]",
                            "Subscript"
                        ]
                    ]
                },
                "data": {
                    "value": "tf.reduce_mean(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_388": {
                "name": {
                    "value": "image_summaries",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "Pair(name, tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_390": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scalar_summaries[i][0]",
                            "Subscript"
                        ],
                        [
                            "image_summaries[i][0]",
                            "Subscript"
                        ]
                    ]
                },
                "data": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args[i][0]",
                            "Subscript"
                        ],
                        [
                            "args[i + len(scalar_summaries)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_428": {
                "tensor": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rmtree_456": {
                "path": {
                    "value": "backup_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'backup')",
                            "Call"
                        ]
                    ]
                }
            },
            "rename_462": {
                "src": {
                    "value": "dst_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'archive')",
                            "Call"
                        ]
                    ]
                },
                "dst": {
                    "value": "backup_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'backup')",
                            "Call"
                        ]
                    ]
                }
            },
            "copy_468": {
                "a": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GFile_471": {
                "name": {
                    "value": "os.path.join(dst_dir, 'checkpoint')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_473": {
                "name": {
                    "value": "os.path.join(dst_dir, 'best_eval.txt')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_477": {
                "name": {
                    "value": "saved_objective_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'best_objective.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "list_physical_devices_558": {
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_582": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getter(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(var, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_585": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "_custom_getter",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_632": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ii",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "initial_value": {
                    "value": "20.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "srelu_beta",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_32": {
                "condition": {
                    "value": "x > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "beta * x + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_33": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_replica_sum_63": {
                "x": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_63": {
                "x": {
                    "value": "num_shards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tpu_function.get_tpu_context().number_of_shards",
                            "Attribute"
                        ],
                        [
                            "tpu_function.get_tpu_context().number_of_shards or 1",
                            "BoolOp"
                        ],
                        [
                            "replica_context.num_replicas_in_sync or 1",
                            "BoolOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_201": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.updates",
                            "Attribute"
                        ],
                        [
                            "self.updates",
                            "Attribute"
                        ],
                        [
                            "self.updates",
                            "Attribute"
                        ]
                    ]
                }
            },
            "add_to_collection_240": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.updates",
                            "Attribute"
                        ],
                        [
                            "self.updates",
                            "Attribute"
                        ],
                        [
                            "self.updates",
                            "Attribute"
                        ]
                    ]
                }
            },
            "add_to_collection_256": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.updates",
                            "Attribute"
                        ],
                        [
                            "self.updates",
                            "Attribute"
                        ],
                        [
                            "self.updates",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_default_graph_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_382": {
                "input_tensor": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args[i][0]",
                            "Subscript"
                        ],
                        [
                            "args[i + len(scalar_summaries)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "create_file_writer_410": {
                "logdir": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['model_dir']",
                            "Subscript"
                        ]
                    ]
                },
                "max_queue": {
                    "value": "iterations_per_loop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.get('iterations_per_loop', 100)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_v2_summary_ops_426": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_441": {
                "name": {
                    "value": "saved_objective_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'best_objective.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bfloat16_scope_628": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "recompute_grad_650": {
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                }
            },
            "ones_like_32": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_41": {
                "x": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_replica_context_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_192": {
                "x": {
                    "value": "group_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cross_replica_mean(shard_mean, num_shards_per_group)",
                            "Call"
                        ],
                        [
                            "replica_context.all_reduce(tf.distribute.ReduceOp.MEAN, shard_mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_231": {
                "x": {
                    "value": "group_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cross_replica_mean(shard_mean, num_shards_per_group)",
                            "Call"
                        ],
                        [
                            "replica_context.all_reduce(tf.distribute.ReduceOp.MEAN, shard_mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_380": {
                "input_tensor": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args[i][0]",
                            "Subscript"
                        ],
                        [
                            "args[i + len(scalar_summaries)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_45": {
                "features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_416": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scalar_summaries[i][0]",
                            "Subscript"
                        ],
                        [
                            "image_summaries[i][0]",
                            "Subscript"
                        ]
                    ]
                },
                "data": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args[i][0]",
                            "Subscript"
                        ],
                        [
                            "args[i + len(scalar_summaries)]",
                            "Subscript"
                        ]
                    ]
                },
                "step": {
                    "value": "gs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "global_step[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu6_43": {
                "features": {
                    "value": "features + 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu6_47": {
                "features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "image_424": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scalar_summaries[i][0]",
                            "Subscript"
                        ],
                        [
                            "image_summaries[i][0]",
                            "Subscript"
                        ]
                    ]
                },
                "data": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args[i][0]",
                            "Subscript"
                        ],
                        [
                            "args[i + len(scalar_summaries)]",
                            "Subscript"
                        ]
                    ]
                },
                "step": {
                    "value": "gs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "global_step[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_419": {
                "x": {
                    "value": "gs % img_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_49": {
                "x": {
                    "value": "tf.math.softplus(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_49": {
                "features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/utils_test.py": {
        "tensorflow": {
            "Variable_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_31": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_39": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_103": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_114": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_124": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_129": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_134": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_139": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "disable_eager_execution_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_98": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(4, 4, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_99": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_temp_dir_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_temp_dir_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exists_47": {
                "path": {
                    "value": "os.path.join(model_dir, 'archive')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exists_48": {
                "path": {
                    "value": "os.path.join(model_dir, 'backup')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exists_52": {
                "path": {
                    "value": "os.path.join(model_dir, 'archive')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exists_53": {
                "path": {
                    "value": "os.path.join(model_dir, 'backup')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exists_63": {
                "path": {
                    "value": "os.path.join(model_dir, 'archive')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exists_64": {
                "path": {
                    "value": "os.path.join(model_dir, 'backup')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_117": {
                "x": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([0.5, 10])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.5, 10])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.5, 10])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.5, 10])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.5, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_101": {
                "x": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(1.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_dtype_107": {
                "type_value": {
                    "value": "float32_ref",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/visualize/shape_utils.py": {
        "tensorflow": {
            "rank_63": {
                "variable": {
                    "value": "t_rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_64": {
                "variable": {
                    "value": "t_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "variable": {
                    "value": "pad_d0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "length - t_d0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_67": {
                "variable": {
                    "value": "pad_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(t_rank, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.concat([pad_d0, t_shape[1:]], 0)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.expand_dims(length - t_d0, 0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "padded_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[t, tf.zeros(pad_shape, dtype=t.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_89": {
                "variable": {
                    "value": "clipped_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_122": {
                "variable": {
                    "value": "tensor_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "slice_127": {
                "variable": {
                    "value": "clipped_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "tf.zeros(len(clip_size), dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "clip_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.where(tensor_shape[i] - shape > 0, shape, -1) if shape is not None else -1 for (i, shape) in enumerate(output_shape)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "shape_134": {
                "variable": {
                    "value": "clipped_tensor_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clipped_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(tensor, begin=tf.zeros(len(clip_size), dtype=tf.int32), size=clip_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_139": {
                "variable": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros(len(trailing_paddings), dtype=tf.int32), trailing_paddings]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_145": {
                "variable": {
                    "value": "padded_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "clipped_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(tensor, begin=tf.zeros(len(clip_size), dtype=tf.int32), size=clip_size)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.zeros(len(trailing_paddings), dtype=tf.int32), trailing_paddings], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_166": {
                "variable": {
                    "value": "dynamic_tensor_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_min_360": {
                "variable": {
                    "value": "box_minimum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_max_361": {
                "variable": {
                    "value": "box_maximum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_prod_399": {
                "variable": {
                    "value": "flattened_dim_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "shape[first:last]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_401": {
                "variable": {
                    "value": "new_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[shape[:first], flattened_dim_prod, shape[last:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_447": {
                "variable": {
                    "value": "expanded_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "dims + inputs_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assert_equal_450": {
                "variable": {
                    "value": "assert_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_prod(tf.stack(dims))",
                    "type": "Call",
                    "possible_values": []
                },
                "message": {
                    "value": "First dimension of `inputs` cannot be expanded into provided `dims`",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Assert_273": {
                "variable": {
                    "value": "shape_assert",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(tf.shape(image_tensor)[1], min_dim), tf.greater_equal(tf.shape(image_tensor)[2], min_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['image size must be >= {} in both height and width.'.format(min_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_362": {
                "condition": {
                    "value": "tf.logical_and(tf.less_equal(box_maximum, maximum_normalized_coordinate), tf.greater_equal(box_minimum, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[boxes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_403": {
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([shape[:first], flattened_dim_prod, shape[last:]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_456": {
                "variable": {
                    "value": "inputs_reshaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(dims + inputs_shape[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_68": {
                "x": {
                    "value": "t_rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.rank(t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_239": {
                "values": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[fn(arg) for arg in tf.unstack(elems)]",
                            "ListComp"
                        ],
                        [
                            "[fn(arg_tuple) for arg_tuple in arg_tuples]",
                            "ListComp"
                        ],
                        [
                            "static_or_dynamic_map_fn(image_resizer_fn, elems=inputs, dtype=[tf.float32, tf.int32])",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_equal_314": {
                "x": {
                    "value": "shape_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "shape_b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "assert_equal_343": {
                "x": {
                    "value": "shape_a[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "shape_b[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logical_and_363": {
                "x": {
                    "value": "tf.less_equal(box_maximum, maximum_normalized_coordinate)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(box_minimum, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_prod_451": {
                "input_tensor": {
                    "value": "tf.stack(dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_455": {
                "control_inputs": {
                    "value": "[assert_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_68": {
                "values": {
                    "value": "[pad_d0, t_shape[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_69": {
                "input": {
                    "value": "length - t_d0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "shape": {
                    "value": "pad_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.greater(t_rank, 1), lambda : tf.concat([pad_d0, t_shape[1:]], 0), lambda : tf.expand_dims(length - t_d0, 0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_124": {
                "condition": {
                    "value": "tensor_shape[i] - shape > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "combined_static_and_dynamic_shape(inputs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "shape": {
                    "value": "len(clip_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "shape": {
                    "value": "len(trailing_paddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_235": {
                "fn": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "elems",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "parallel_iterations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "back_prop": {
                    "value": "back_prop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "logical_and_274": {
                "x": {
                    "value": "tf.greater_equal(tf.shape(image_tensor)[1], min_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(tf.shape(image_tensor)[2], min_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_277": {
                "control_inputs": {
                    "value": "[shape_assert]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_278": {
                "input": {
                    "value": "image_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_op_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "less_equal_364": {
                "x": {
                    "value": "box_maximum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(boxes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "maximum_normalized_coordinate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "greater_equal_365": {
                "x": {
                    "value": "box_minimum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(boxes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_451": {
                "values": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "map_fn_227": {
                "fn": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "elems",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "parallel_iterations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "back_prop": {
                    "value": "back_prop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unstack_236": {
                "value": {
                    "value": "elems",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "greater_equal_274": {
                "x": {
                    "value": "tf.shape(image_tensor)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "min_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "greater_equal_275": {
                "x": {
                    "value": "tf.shape(image_tensor)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "min_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_228": {
                "value": {
                    "value": "elem",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "elems",
                            "Name"
                        ]
                    ]
                }
            },
            "stack_245": {
                "values": {
                    "value": "output_tuple",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_274": {
                "input": {
                    "value": "image_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_275": {
                "input": {
                    "value": "image_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "efficientdet/visualize/vis_utils.py": {
        "tensorflow": {
            "expand_dims_394": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, image_shape, method=tf.image.ResizeMethod.NEAREST_NEIGHBOR, align_corners=True)",
                            "Call"
                        ],
                        [
                            "shape_utils.pad_or_clip_nd(image_and_detections[2], [true_shape[0], true_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "np.frombuffer(fig.canvas.tostring_rgb(), dtype='uint8').reshape(1, int(height), int(width), 3)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(fig.canvas.tostring_rgb(), dtype='uint8').reshape(1, int(height), int(width), 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_fn_503": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "draw_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "elems",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[true_shapes, original_shapes, images, boxes, classes, scores]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "numpy_function_953": {
                "variable": {
                    "value": "cdf_plot",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "cdf_plot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.numpy_function(cdf_plot, [values], tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[values]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "numpy_function_984": {
                "variable": {
                    "value": "hist_plot",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "hist_plot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.numpy_function(hist_plot, [values, bins], tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[values, bins]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_400": {
                "x": {
                    "value": "tf.squeeze(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_466": {
                "variable": {
                    "value": "true_shapes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[images.shape.as_list()[0], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_470": {
                "variable": {
                    "value": "original_shapes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[images.shape.as_list()[0], 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_499": {
                "variable": {
                    "value": "image_with_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "visualize_boxes_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "create_visualization_fn(category_index, include_masks=instance_masks is not None, include_keypoints=keypoints is not None, include_track_ids=track_ids is not None, **visualization_keyword_args)",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "image_and_detections[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_611": {
                "variable": {
                    "value": "images_to_visualize",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[images_with_detections, images_with_groundtruth]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_954": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cdf_plot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.numpy_function(cdf_plot, [values], tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_985": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "hist_plot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.numpy_function(hist_plot, [values, bins], tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_400": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, image_shape, method=tf.image.ResizeMethod.NEAREST_NEIGHBOR, align_corners=True)",
                            "Call"
                        ],
                        [
                            "shape_utils.pad_or_clip_nd(image_and_detections[2], [true_shape[0], true_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "np.frombuffer(fig.canvas.tostring_rgb(), dtype='uint8').reshape(1, int(height), int(width), 3)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(fig.canvas.tostring_rgb(), dtype='uint8').reshape(1, int(height), int(width), 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_456": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "images[:, :, :, 0:3]",
                            "Subscript"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(images)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(draw_boxes, elems, dtype=tf.uint8, back_prop=False)",
                            "Call"
                        ],
                        [
                            "self.images_from_evaluation_dict(eval_dict)",
                            "Call"
                        ],
                        [
                            "self._images",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_551": {
                "variable": {
                    "value": "instance_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(eval_dict[detection_fields.detection_masks][indx], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_557": {
                "variable": {
                    "value": "keypoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eval_dict[detection_fields.detection_keypoints][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_561": {
                "variable": {
                    "value": "groundtruth_instance_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(eval_dict[input_data_fields.groundtruth_instance_masks][indx], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_643": {
                "variable": {
                    "value": "images_to_visualize",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[images_to_visualize, images_with_additional_channels_groundtruth]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "executing_eagerly_1105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "py_func_1109": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "self.add_images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[[images[0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_1110": {
                "variable": {
                    "value": "image_tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "get_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.uint8] * self._max_examples_to_draw",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_546": {
                "variable": {
                    "value": "eval_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "eval_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_567": {
                "input": {
                    "value": "eval_dict[input_data_fields.original_image][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_569": {
                "input": {
                    "value": "eval_dict[detection_fields.detection_boxes][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_571": {
                "input": {
                    "value": "eval_dict[detection_fields.detection_classes][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_573": {
                "input": {
                    "value": "eval_dict[detection_fields.detection_scores][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_588": {
                "input": {
                    "value": "eval_dict[input_data_fields.original_image][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_590": {
                "input": {
                    "value": "eval_dict[input_data_fields.groundtruth_boxes][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_592": {
                "input": {
                    "value": "eval_dict[input_data_fields.groundtruth_classes][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_594": {
                "input": {
                    "value": "tf.ones_like(eval_dict[input_data_fields.groundtruth_classes][indx], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_1100": {
                "pred": {
                    "value": "tf.equal(tf.size(tf.shape(image)), 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.summary.image(summary_name, image)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant('')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_552": {
                "input": {
                    "value": "eval_dict[detection_fields.detection_masks][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_562": {
                "input": {
                    "value": "eval_dict[input_data_fields.groundtruth_instance_masks][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_576": {
                "input": {
                    "value": "eval_dict[input_data_fields.original_image_spatial_shape][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_579": {
                "input": {
                    "value": "eval_dict[input_data_fields.true_image_shape][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_595": {
                "input": {
                    "value": "eval_dict[input_data_fields.groundtruth_classes][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_600": {
                "input": {
                    "value": "eval_dict[input_data_fields.original_image_spatial_shape][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_603": {
                "input": {
                    "value": "eval_dict[input_data_fields.true_image_shape][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_617": {
                "input": {
                    "value": "eval_dict[input_data_fields.image_additional_channels][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_620": {
                "input": {
                    "value": "eval_dict[input_data_fields.groundtruth_boxes][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_622": {
                "input": {
                    "value": "eval_dict[input_data_fields.groundtruth_classes][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_625": {
                "input": {
                    "value": "tf.ones_like(eval_dict[input_data_fields.groundtruth_classes][indx], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_1101": {
                "x": {
                    "value": "tf.size(tf.shape(image))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_626": {
                "input": {
                    "value": "eval_dict[input_data_fields.groundtruth_classes][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_631": {
                "input": {
                    "value": "eval_dict[input_data_fields.original_image_spatial_shape][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_635": {
                "input": {
                    "value": "eval_dict[input_data_fields.true_image_shape][indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "size_1101": {
                "input": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_1102": {
                "name": {
                    "value": "summary_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._summary_name_prefix + '/' + str(i)",
                            "BinOp"
                        ]
                    ]
                },
                "data": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, image_shape, method=tf.image.ResizeMethod.NEAREST_NEIGHBOR, align_corners=True)",
                            "Call"
                        ],
                        [
                            "shape_utils.pad_or_clip_nd(image_and_detections[2], [true_shape[0], true_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "np.frombuffer(fig.canvas.tostring_rgb(), dtype='uint8').reshape(1, int(height), int(width), 3)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(fig.canvas.tostring_rgb(), dtype='uint8').reshape(1, int(height), int(width), 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1103": {
                "value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_1101": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, image_shape, method=tf.image.ResizeMethod.NEAREST_NEIGHBOR, align_corners=True)",
                            "Call"
                        ],
                        [
                            "shape_utils.pad_or_clip_nd(image_and_detections[2], [true_shape[0], true_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "np.frombuffer(fig.canvas.tostring_rgb(), dtype='uint8').reshape(1, int(height), int(width), 3)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(fig.canvas.tostring_rgb(), dtype='uint8').reshape(1, int(height), int(width), 3)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "efficientdet/visualize/vis_utils_test.py": {
        "tensorflow": {
            "placeholder_353": {
                "variable": {
                    "value": "original_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_354": {
                "variable": {
                    "value": "original_image_spatial_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_355": {
                "variable": {
                    "value": "true_image_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "disable_eager_execution_464": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_465": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_147": {
                "variable": {
                    "value": "images_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.stack((image_np, image_np), axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack((image_np, image_np), axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack((image_np, image_np), axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack((image_np, image_np), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_148": {
                "variable": {
                    "value": "image_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "original_image_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[636, 512], [636, 512]]",
                            "List"
                        ],
                        [
                            "[[636, 512], [636, 512]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_149": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.4, 0.25, 0.75, 0.75], [0.5, 0.3, 0.6, 0.9]], [[0.25, 0.25, 0.75, 0.75], [0.1, 0.3, 0.6, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_151": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1], [1, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_152": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.8, 0.1], [0.6, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_192": {
                "variable": {
                    "value": "images_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.stack((image_np, image_np), axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack((image_np, image_np), axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack((image_np, image_np), axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack((image_np, image_np), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_193": {
                "variable": {
                    "value": "image_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "original_image_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[636, 512], [636, 512]]",
                            "List"
                        ],
                        [
                            "[[636, 512], [636, 512]]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_194": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[0.4, 0.25, 0.75, 0.75], [0.5, 0.3, 0.7, 0.9], [0.7, 0.5, 0.8, 0.9]], [[0.41, 0.25, 0.75, 0.75], [0.51, 0.3, 0.7, 0.9], [0.75, 0.5, 0.8, 0.9]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_198": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 2], [1, 1, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_199": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.8, 0.5, 0.7], [0.6, 0.5, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_200": {
                "variable": {
                    "value": "track_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[3, 9, 7], [3, 9, 144]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_236": {
                "variable": {
                    "value": "images_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.stack((image_np, image_np), axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack((image_np, image_np), axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack((image_np, image_np), axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack((image_np, image_np), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_237": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 0, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_238": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_239": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_262": {
                "variable": {
                    "value": "images_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.stack((image_np, image_np), axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack((image_np, image_np), axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack((image_np, image_np), axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack((image_np, image_np), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_263": {
                "variable": {
                    "value": "image_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[100, 200], [100, 200]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_264": {
                "variable": {
                    "value": "boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 0, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_265": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_266": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_333": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_341": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_391": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientnetv2/autoaugment.py": {
        "tensorflow": {
            "cast_102": {
                "variable": {
                    "value": "image1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image1, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_103": {
                "variable": {
                    "value": "image2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image2, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_153": {
                "variable": {
                    "value": "lower_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "cutout_center_height - pad_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_154": {
                "variable": {
                    "value": "upper_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "image_height - cutout_center_height - pad_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_155": {
                "variable": {
                    "value": "left_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "cutout_center_width - pad_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_156": {
                "variable": {
                    "value": "right_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "image_width - cutout_center_width - pad_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_161": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.zeros(cutout_shape, dtype=image.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[[lower_pad, upper_pad], [left_pad, right_pad]]",
                            "List"
                        ]
                    ]
                },
                "constant_values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_164": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_165": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_166": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(mask, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(image, dtype=image.dtype) * replace",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_186": {
                "variable": {
                    "value": "added_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(added_image, 0, 255)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_192": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.image.rgb_to_grayscale(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rgb_to_grayscale_198": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_200": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_fixed_width_205": {
                "variable": {
                    "value": "hist",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "value_range": {
                    "value": "[0, 255]",
                    "type": "List",
                    "possible_values": []
                },
                "nbins": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_208": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "grayscale_to_rgb_209": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.cast(degenerate, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_215": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_319": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s1, s2, s3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_326": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_328": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_334": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 1, 1], [1, 5, 1], [1, 1, 1]], dtype=tf.float32, shape=[3, 3, 1, 1]) / 13.0",
                            "BinOp"
                        ],
                        [
                            "tf.tile(kernel, [1, 1, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_336": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[1, 1, 1], [1, 5, 1], [1, 1, 1]], dtype=tf.float32, shape=[3, 3, 1, 1]) / 13.0",
                            "BinOp"
                        ],
                        [
                            "tf.tile(kernel, [1, 1, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "rate": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_338": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_339": {
                "variable": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(degenerate, tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_343": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_344": {
                "variable": {
                    "value": "padded_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_345": {
                "variable": {
                    "value": "padded_degenerate",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_346": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(padded_mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "padded_degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(degenerate, [[1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "orig_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image",
                            "Name"
                        ]
                    ]
                }
            },
            "stack_388": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[s1, s2, s3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_394": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_400": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_401": {
                "variable": {
                    "value": "extended_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0], shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_402": {
                "variable": {
                    "value": "extended",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, extended_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_424": {
                "variable": {
                    "value": "image_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_426": {
                "variable": {
                    "value": "flattened_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, image_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_431": {
                "variable": {
                    "value": "replace",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[replace, tf.ones([1], image.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_434": {
                "variable": {
                    "value": "flattened_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(alpha_channel, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(flattened_image, dtype=image.dtype) * replace",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "flattened_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(image, [-1, image_shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(alpha_channel, 0), tf.ones_like(flattened_image, dtype=image.dtype) * replace, flattened_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_439": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flattened_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(image, [-1, image_shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(alpha_channel, 0), tf.ones_like(flattened_image, dtype=image.dtype) * replace, flattened_image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "image_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_440": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_shape[0], image_shape[1], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_466": {
                "variable": {
                    "value": "should_flip",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(tf.random_uniform([]) + 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_467": {
                "variable": {
                    "value": "final_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "should_flip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(tf.random_uniform([]) + 0.5), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tensor",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : -tensor",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_562": {
                "variable": {
                    "value": "should_apply_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(tf.random_uniform([], dtype=tf.float32) + prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_564": {
                "variable": {
                    "value": "augmented_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "should_apply_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(tf.random_uniform([], dtype=tf.float32) + prob), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : func(image, *args)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_119": {
                "x": {
                    "value": "tf.clip_by_value(temp, 0.0, 255.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_177": {
                "condition": {
                    "value": "image < threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "255 - image",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_187": {
                "condition": {
                    "value": "image < threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "added_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.int64) + addition",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(added_image, 0, 255), tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "left_shift_222": {
                "x": {
                    "value": "tf.bitwise.right_shift(image, shift)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "shift",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8 - bits",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_300": {
                "variable": {
                    "value": "lo",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_min(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_301": {
                "variable": {
                    "value": "hi",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_311": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "hi > lo",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : scale_values(image)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_356": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im[:, :, c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_fixed_width_358": {
                "variable": {
                    "value": "histo",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(im, tf.float32) * scale + offset",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(im, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(im[:, :, c], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "value_range": {
                    "value": "[0, 255]",
                    "type": "List",
                    "possible_values": []
                },
                "nbins": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_361": {
                "variable": {
                    "value": "nonzero",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(histo, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_362": {
                "variable": {
                    "value": "nonzero_histo",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(histo, nonzero)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_377": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(step, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : im",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.gather(build_lut(histo, step), im)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_577": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(i, policy_to_select)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda selected_policy=policy: selected_policy(image)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "convert_to_tensor_98": {
                "value": {
                    "value": "image1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image1, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_100": {
                "value": {
                    "value": "image2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image2, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_109": {
                "x": {
                    "value": "image1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image1, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_114": {
                "x": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image1, tf.float32) + scaled",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_119": {
                "t": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image1, tf.float32) + scaled",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_141": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_142": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_162": {
                "shape": {
                    "value": "cutout_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[image_height - (lower_pad + upper_pad), image_width - (left_pad + right_pad)]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_167": {
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros(cutout_shape, dtype=image.dtype), padding_dims, constant_values=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_185": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_186": {
                "t": {
                    "value": "added_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.int64) + addition",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(added_image, 0, 255), tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rgb_to_grayscale_192": {
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_206": {
                "input_tensor": {
                    "value": "tf.cast(hist, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_207": {
                "input": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_209": {
                "x": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "right_shift_222": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "shift",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8 - bits",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_308": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(im, tf.float32) * scale + offset",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(im, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(im[:, :, c], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_330": {
                "value": {
                    "value": "[[1, 1, 1], [1, 5, 1], [1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_339": {
                "x": {
                    "value": "degenerate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.grayscale_to_rgb(tf.image.rgb_to_grayscale(image))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(degenerate, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(degenerate, dtype=tf.float32) * mean",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.grayscale_to_rgb(tf.cast(degenerate, tf.uint8))",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(image, kernel, strides, padding='VALID', rate=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(degenerate, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(degenerate, tf.uint8), [0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_346": {
                "x": {
                    "value": "padded_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(mask, [[1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_370": {
                "variable": {
                    "value": "lut",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[0], lut[:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_381": {
                "x": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(hi > lo, lambda : scale_values(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(padded_mask, 1), padded_degenerate, orig_image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(step, 0), lambda : im, lambda : tf.gather(build_lut(histo, step), im))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_435": {
                "x": {
                    "value": "alpha_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "flattened_image[:, 3]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_466": {
                "x": {
                    "value": "tf.random_uniform([]) + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_563": {
                "x": {
                    "value": "tf.random_uniform([], dtype=tf.float32) + prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_168": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_206": {
                "x": {
                    "value": "hist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.histogram_fixed_width(degenerate, [0, 255], nbins=256)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_300": {
                "input_tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_301": {
                "input_tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mask, 0), tf.ones_like(image, dtype=image.dtype) * replace, image)",
                            "Call"
                        ],
                        [
                            "image_ops.rotate(wrap(image), radians)",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [-pixels, 0])",
                            "Call"
                        ],
                        [
                            "image_ops.translate(wrap(image), [0, -pixels])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, level, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "image_ops.transform(wrap(image), [1.0, 0.0, 0.0, level, 1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack([s1, s2, s3], 2)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(flattened_image, image_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(image, [0, 0, 0], [image_shape[0], image_shape[1], 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, policy_to_select), lambda selected_policy=policy: selected_policy(image), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, op_to_select), lambda selected_func=func, selected_args=args: selected_func(image, *selected_args), lambda : image)",
                            "Call"
                        ],
                        [
                            "distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : distort_image_with_autoaugment(image, 'v0'), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 1), lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude), lambda : image)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_309": {
                "x": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(im, tf.float32) * scale + offset",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(im, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(im[:, :, c], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_361": {
                "x": {
                    "value": "histo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.histogram_fixed_width(im, [0, 255], nbins=256)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_362": {
                "params": {
                    "value": "histo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.histogram_fixed_width(im, [0, 255], nbins=256)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nonzero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(histo, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_373": {
                "t": {
                    "value": "lut",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(tf.cumsum(histo) + step // 2) // step",
                            "BinOp"
                        ],
                        [
                            "tf.concat([[0], lut[:-1]], 0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_377": {
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(tf.reduce_sum(nonzero_histo) - nonzero_histo[-1]) // 255",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_431": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_436": {
                "input": {
                    "value": "flattened_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(image, [-1, image_shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(alpha_channel, 0), tf.ones_like(flattened_image, dtype=image.dtype) * replace, flattened_image)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_578": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=2, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "policy_to_select",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=len(policies), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_692": {
                "name": {
                    "value": "'randaug_layer_{}'.format(layer_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_697": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(i, op_to_select)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda selected_func=func, selected_args=args: selected_func(image, *selected_args)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_714": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(i, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : distort_image_with_autoaugment(image, 'v0')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_717": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(i, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : distort_image_with_randaugment(image, ra_num_layers, ra_magnitude)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_sum_363": {
                "input_tensor": {
                    "value": "nonzero_histo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gather(histo, nonzero), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_379": {
                "params": {
                    "value": "build_lut(histo, step)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(im, tf.float32) * scale + offset",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(im, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(im[:, :, c], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_307": {
                "x": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(im, tf.float32) * scale + offset",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(im, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(im[:, :, c], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_368": {
                "x": {
                    "value": "histo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.histogram_fixed_width(im, [0, 255], nbins=256)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_698": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=2, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "op_to_select",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=len(available_ops), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_715": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=2, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_718": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=2, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "efficientnetv2/autoaugment_test.py": {
        "tensorflow": {
            "zeros_24": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientnetv2/datasets.py": {
        "tensorflow": {
            "placeholder_61": {
                "variable": {
                    "value": "image_bytes_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_65": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "_preprocess_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "image_bytes_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[batch_size], dtype=tf.string)",
                            "Call"
                        ]
                    ]
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_193": {
                "variable": {
                    "value": "r_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_194": {
                "variable": {
                    "value": "r_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Beta_196": {
                "variable": {
                    "value": "area",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_197": {
                "variable": {
                    "value": "patch_ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.sqrt(1 - area)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_198": {
                "x": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_199": {
                "x": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_200": {
                "variable": {
                    "value": "bbx1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(r_x - r_w // 2, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_201": {
                "variable": {
                    "value": "bby1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(r_y - r_h // 2, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_202": {
                "variable": {
                    "value": "bbx2",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(r_x + r_w // 2, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_203": {
                "variable": {
                    "value": "bby2",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(r_y + r_h // 2, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_208": {
                "variable": {
                    "value": "pad_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w - bbx2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_209": {
                "variable": {
                    "value": "pad_bottom",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h - bby2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_213": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.ones((r_h, r_w))",
                    "type": "Call",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[pad_top, pad_bottom], [pad_left, pad_right]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_237": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.ones((r_h, r_w)), paddings=[[pad_top, pad_bottom], [pad_left, pad_right]], mode='CONSTANT', constant_values=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, image.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_239": {
                "variable": {
                    "value": "mix_area",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mix_area",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(mask) / tf.cast(tf.size(mask), mask.dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mix_area, label.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "label.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Beta_261": {
                "variable": {
                    "value": "mix_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_262": {
                "variable": {
                    "value": "mix_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mix_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distributions.Beta(alpha, alpha).sample([batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.maximum(mix_weight, 1.0 - mix_weight)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 - mix_weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_263": {
                "variable": {
                    "value": "img_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(mix_weight, [batch_size, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_268": {
                "variable": {
                    "value": "label_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mix_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distributions.Beta(alpha, alpha).sample([batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.maximum(mix_weight, 1.0 - mix_weight)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "label.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_314": {
                "variable": {
                    "value": "parsed",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'image/encoded': tf.FixedLenFeature((), tf.string, ''), 'image/class/label': tf.FixedLenFeature([], tf.int64, -1)}",
                            "Dict"
                        ],
                        [
                            "{'id': tf.io.FixedLenFeature([], tf.string), 'image': tf.io.FixedLenFeature([], tf.string), 'labels': tf.io.FixedLenSequenceFeature([], tf.int64, allow_missing=True)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "reshape_315": {
                "variable": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "parsed['image/encoded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_318": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(parsed['image/class/label'], shape=[])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_321": {
                "variable": {
                    "value": "onehot_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label * label_weight + label[::-1] * (1 - label_weight)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.reshape(parsed['image/class/label'], shape=[]), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "label - 1",
                            "BinOp"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.cfg.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_333": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "buffer_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.file_buffer_size_m or 8) * 1024 * 1024",
                            "BinOp"
                        ]
                    ]
                }
            },
            "glob_342": {
                "variable": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "pattern": {
                    "value": "os.path.join(self.data_dir, self.split_info['files'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Options_433": {
                "variable": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_491": {
                "variable": {
                    "value": "parsed",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'image/encoded': tf.FixedLenFeature((), tf.string, ''), 'image/class/label': tf.FixedLenFeature([], tf.int64, -1)}",
                            "Dict"
                        ],
                        [
                            "{'id': tf.io.FixedLenFeature([], tf.string), 'image': tf.io.FixedLenFeature([], tf.string), 'labels': tf.io.FixedLenSequenceFeature([], tf.int64, allow_missing=True)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "reshape_492": {
                "variable": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "parsed['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SparseTensor_495": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.expand_dims(labels, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.ones_like(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "[self.cfg.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_dense_498": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0, tf.float32, (self.cfg.num_classes,))",
                            "Call"
                        ],
                        [
                            "{'label': onehot_label}",
                            "Dict"
                        ],
                        [
                            "parsed['labels']",
                            "Subscript"
                        ],
                        [
                            "tf.sparse.SparseTensor(tf.expand_dims(labels, -1), tf.ones_like(labels), [self.cfg.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.sparse.to_dense(labels)",
                            "Call"
                        ],
                        [
                            "{'label': labels}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Options_551": {
                "variable": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ServingInputReceiver_67": {
                "features": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.map_fn(_preprocess_image, image_bytes_list, back_prop=False, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "receiver_tensors": {
                    "value": "{'image_bytes': image_bytes_list}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "shape": {
                    "value": "[self.image_size, self.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.image_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_293": {
                "variable": {
                    "value": "features[image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[img1, img2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_294": {
                "variable": {
                    "value": "labels[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[lab1, lab2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_306": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.cfg.num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "decode_image_328": {
                "variable": {
                    "value": "features[orig_image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed['image/encoded'], shape=[])",
                            "Call"
                        ],
                        [
                            "tf.reshape(parsed['image'], shape=[])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_423": {
                "variable": {
                    "value": "features[image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "features['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 3, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_474": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_dense_475": {
                "variable": {
                    "value": "fake_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "tf.sparse.SparseTensor(tf.expand_dims(values, -1), tf.ones_like(values), [self.cfg.num_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "decode_image_502": {
                "variable": {
                    "value": "features[orig_image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed['image/encoded'], shape=[])",
                            "Call"
                        ],
                        [
                            "tf.reshape(parsed['image'], shape=[])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_197": {
                "x": {
                    "value": "1 - area",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_200": {
                "x": {
                    "value": "r_x - r_w // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_201": {
                "x": {
                    "value": "r_y - r_h // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_202": {
                "x": {
                    "value": "r_x + r_w // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_203": {
                "x": {
                    "value": "r_y + r_h // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_214": {
                "shape": {
                    "value": "(r_h, r_w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_236": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.ones((r_h, r_w)), paddings=[[pad_top, pad_bottom], [pad_left, pad_right]], mode='CONSTANT', constant_values=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, image.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_236": {
                "x": {
                    "value": "tf.size(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "tensor": {
                    "value": "mix_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distributions.Beta(alpha, alpha).sample([batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.maximum(mix_weight, 1.0 - mix_weight)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FixedLenFeature_310": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_311": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_319": {
                "tensor": {
                    "value": "parsed['image/class/label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "repeat_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_483": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_485": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_488": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_missing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_496": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0, tf.float32, (self.cfg.num_classes,))",
                            "Call"
                        ],
                        [
                            "{'label': onehot_label}",
                            "Dict"
                        ],
                        [
                            "parsed['labels']",
                            "Subscript"
                        ],
                        [
                            "tf.sparse.SparseTensor(tf.expand_dims(labels, -1), tf.ones_like(labels), [self.cfg.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.sparse.to_dense(labels)",
                            "Call"
                        ],
                        [
                            "{'label': labels}",
                            "Dict"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_496": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0, tf.float32, (self.cfg.num_classes,))",
                            "Call"
                        ],
                        [
                            "{'label': onehot_label}",
                            "Dict"
                        ],
                        [
                            "parsed['labels']",
                            "Subscript"
                        ],
                        [
                            "tf.sparse.SparseTensor(tf.expand_dims(labels, -1), tf.ones_like(labels), [self.cfg.num_classes])",
                            "Call"
                        ],
                        [
                            "tf.sparse.to_dense(labels)",
                            "Call"
                        ],
                        [
                            "{'label': labels}",
                            "Dict"
                        ]
                    ]
                }
            },
            "one_hot_528": {
                "indices": {
                    "value": "features['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.cfg.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_173": {
                "dims": {
                    "value": "[batch_size, None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_175": {
                "dims": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "size_236": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(tf.ones((r_h, r_w)), paddings=[[pad_top, pad_bottom], [pad_left, pad_right]], mode='CONSTANT', constant_values=0)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, image.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseTensor_476": {
                "indices": {
                    "value": "tf.expand_dims(values, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.ones_like(values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "[self.cfg.num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_477": {
                "input": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([2, 3], tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_477": {
                "input": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([2, 3], tf.int64)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "efficientnetv2/datasets_test.py": {
        "tensorflow": {
            "main_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientnetv2/effnetv2_configs_test.py": {
        "tensorflow": {
            "main_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientnetv2/effnetv2_model.py": {
        "tensorflow": {
            "normal_59": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(2.0 / fan_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "uniform_81": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "minval": {
                    "value": "-init_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "init_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / np.sqrt(shape[1])",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_116": {
                "variable": {
                    "value": "self._se_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "se_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self._data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_125": {
                "variable": {
                    "value": "self._se_expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "output_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "round_filters(block_args.output_filters, self._mconfig)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self._data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2d_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DepthwiseConv2D_223": {
                "variable": {
                    "value": "self._depthwise_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._block_args.kernel_size",
                            "Attribute"
                        ],
                        [
                            "block_args.kernel_size",
                            "Attribute"
                        ],
                        [
                            "[1, shape[self.h_axis], shape[self.w_axis], 1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "self._block_args.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depthwise_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self._data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "depthwise_conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_249": {
                "variable": {
                    "value": "self._project_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters * multiplier",
                            "BinOp"
                        ],
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ],
                        [
                            "block_args.input_filters * block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self._data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "get_conv_name()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_358": {
                "variable": {
                    "value": "self._project_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters * multiplier",
                            "BinOp"
                        ],
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ],
                        [
                            "block_args.input_filters * block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1 if block_args.expand_ratio != 1 else kernel_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "strides": {
                    "value": "1 if block_args.expand_ratio != 1 else block_args.strides",
                    "type": "IfExp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_format": {
                    "value": "mconfig.data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "get_conv_name()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_414": {
                "variable": {
                    "value": "self._conv_stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "round_filters(stem_filters, mconfig)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "mconfig.data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_444": {
                "variable": {
                    "value": "self._conv_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "round_filters(mconfig.feature_size or 1280, mconfig)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "mconfig.data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_461": {
                "variable": {
                    "value": "self._avg_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_format": {
                    "value": "mconfig.data_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_586": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(3, None, None)",
                            "Tuple"
                        ],
                        [
                            "(None, None, 3)",
                            "Tuple"
                        ],
                        [
                            "(3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(224, 224, 3)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Model_587": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "self.call(x, training=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Model_591": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "self.call(inputs, training=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_file_792": {
                "variable": {
                    "value": "pretrained_ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "fname": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.basename(url).split('.')[0]",
                            "Subscript"
                        ]
                    ]
                },
                "origin": {
                    "value": "url",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pretrained_ckpts[model_name][weights]",
                            "Subscript"
                        ]
                    ]
                },
                "untar": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "isdir_796": {
                "path": {
                    "value": "pretrained_ckpt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.utils.get_file(fname, url, untar=True)",
                            "Call"
                        ],
                        [
                            "weights",
                            "Name"
                        ],
                        [
                            "tf.train.latest_checkpoint(pretrained_ckpt)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_797": {
                "variable": {
                    "value": "pretrained_ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "pretrained_ckpt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.utils.get_file(fname, url, untar=True)",
                            "Call"
                        ],
                        [
                            "weights",
                            "Name"
                        ],
                        [
                            "tf.train.latest_checkpoint(pretrained_ckpt)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool_138": {
                "variable": {
                    "value": "se_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, inputs.shape[h_axis], inputs.shape[w_axis], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_144": {
                "variable": {
                    "value": "se_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[h_axis, w_axis]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2D_205": {
                "variable": {
                    "value": "self._expand_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters * multiplier",
                            "BinOp"
                        ],
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ],
                        [
                            "block_args.input_filters * block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self._data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "get_conv_name()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_272": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.drop_connect(x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.add(x, inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._act(self._norm0(self._expand_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "self._act(self._norm1(self._depthwise_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(self._mconfig.conv_dropout)(x, training=training)",
                            "Call"
                        ],
                        [
                            "self._se(x)",
                            "Call"
                        ],
                        [
                            "self._norm2(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "self.residual(inputs, x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._act(self._norm0(self._expand_conv(x), training=training))",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(self._mconfig.conv_dropout)(x, training)",
                            "Call"
                        ],
                        [
                            "self._se(x)",
                            "Call"
                        ],
                        [
                            "self._norm1(self._project_conv(x), training=training)",
                            "Call"
                        ],
                        [
                            "self._act(x)",
                            "Call"
                        ],
                        [
                            "self.residual(inputs, x, training, survival_prob)",
                            "Call"
                        ],
                        [
                            "tf.keras.Input(shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2D_333": {
                "variable": {
                    "value": "self._expand_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filters * multiplier",
                            "BinOp"
                        ],
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ],
                        [
                            "block_args.input_filters * block_args.expand_ratio",
                            "BinOp"
                        ],
                        [
                            "block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._block_args.kernel_size",
                            "Attribute"
                        ],
                        [
                            "block_args.kernel_size",
                            "Attribute"
                        ],
                        [
                            "[1, shape[self.h_axis], shape[self.w_axis], 1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "block_args.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self._data_format",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "get_conv_name()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_465": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "mconfig.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool_480": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._act(self._norm(self._conv_head(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(outputs, ksize=kernel_size, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "self._avg_pooling(outputs)",
                            "Call"
                        ],
                        [
                            "self._dropout(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "self._dropout(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, [self.h_axis, self.w_axis])",
                            "Call"
                        ],
                        [
                            "self._fc(outputs)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._stem(inputs, training)",
                            "Call"
                        ],
                        [
                            "self._head(outputs, training)",
                            "Call"
                        ],
                        [
                            "block(outputs, training=training, survival_prob=survival_prob)",
                            "Call"
                        ],
                        [
                            "self._fc(outputs)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._block_args.kernel_size",
                            "Attribute"
                        ],
                        [
                            "block_args.kernel_size",
                            "Attribute"
                        ],
                        [
                            "[1, shape[self.h_axis], shape[self.w_axis], 1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_573": {
                "variable": {
                    "value": "self._fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self._mconfig.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "dense_kernel_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(self._mconfig.headbias or 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Input_694": {
                "shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(3, None, None)",
                            "Tuple"
                        ],
                        [
                            "(None, None, 3)",
                            "Tuple"
                        ],
                        [
                            "(3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(224, 224, 3)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_147": {
                "x": {
                    "value": "se_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, inputs.shape[h_axis], inputs.shape[w_axis], 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(inputs, [h_axis, w_axis], keepdims=True)",
                            "Call"
                        ],
                        [
                            "self._se_expand(self._act(self._se_reduce(se_tensor)))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_487": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._act(self._norm(self._conv_head(inputs), training=training))",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(outputs, ksize=kernel_size, strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "self._avg_pooling(outputs)",
                            "Call"
                        ],
                        [
                            "self._dropout(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "self._dropout(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, [self.h_axis, self.w_axis])",
                            "Call"
                        ],
                        [
                            "self._fc(outputs)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._stem(inputs, training)",
                            "Call"
                        ],
                        [
                            "self._head(outputs, training)",
                            "Call"
                        ],
                        [
                            "block(outputs, training=training, survival_prob=survival_prob)",
                            "Call"
                        ],
                        [
                            "self._fc(outputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[self.h_axis, self.w_axis]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout_298": {
                "rate": {
                    "value": "self._mconfig.conv_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_395": {
                "rate": {
                    "value": "self._mconfig.conv_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_645": {
                "name": {
                    "value": "head",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_576": {
                "value": {
                    "value": "self._mconfig.headbias or 0",
                    "type": "BoolOp",
                    "possible_values": []
                }
            }
        }
    },
    "efficientnetv2/effnetv2_model_test.py": {
        "tensorflow": {
            "zeros_32": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientnetv2/hparams.py": {
        "tensorflow": {
            "GFile_146": {
                "name": {
                    "value": "yaml_file_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_152": {
                "name": {
                    "value": "yaml_file_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "efficientnetv2/infer.py": {
        "tensorflow": {
            "Accuracy_78": {
                "variable": {
                    "value": "top1_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Progbar_79": {
                "variable": {
                    "value": "pbar",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ones_99": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, isize, isize, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float16 if FLAGS.mixed_precision else tf.float32",
                            "IfExp"
                        ],
                        [
                            "tf.float16 if FLAGS.mixed_precision else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "run_functions_eagerly_49": {
                "run_eagerly": {
                    "value": "FLAGS.debug",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Policy_52": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mixed_float16",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "FLAGS.export_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_101": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones((batch_size, isize, isize, 3), dtype=data_dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(imgs, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "RunOptions_129": {
                "variable": {
                    "value": "run_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf1.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_130": {
                "variable": {
                    "value": "run_metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_133": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, isize, isize, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float16 if FLAGS.mixed_precision else tf.float32",
                            "IfExp"
                        ],
                        [
                            "tf.float16 if FLAGS.mixed_precision else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_164": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, isize, isize, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_172": {
                "variable": {
                    "value": "ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_179": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ema.variables_to_restore(ema_vars)",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_185": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "save_relative_paths": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_global_policy_53": {
                "policy": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.mixed_precision.Policy('mixed_float16')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_94": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "effnetv2_model.get_model(FLAGS.model_name, FLAGS.hparam_str, include_top=True, weights=FLAGS.model_dir or 'imagenet')",
                            "Call"
                        ],
                        [
                            "build_tf2_model()",
                            "Call"
                        ],
                        [
                            "build_tf2_model()",
                            "Call"
                        ],
                        [
                            "tf.saved_model.load(FLAGS.export_dir)",
                            "Call"
                        ],
                        [
                            "effnetv2_model.EffNetV2Model(FLAGS.model_name, FLAGS.hparam_str)",
                            "Call"
                        ],
                        [
                            "effnetv2_model.EffNetV2Model(FLAGS.model_name, FLAGS.hparam_str)",
                            "Call"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "FLAGS.export_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isdir_167": {
                "path": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_168": {
                "variable": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_84": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f(batch['image'])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_153": {
                "name": {
                    "value": "FLAGS.trace_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "efficientnetv2/main.py": {
        "tensorflow": {
            "get_global_step_128": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunConfig_347": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(FLAGS.tpu, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "model_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "max(100, config.runtime.iterations_per_loop)",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "config.runtime.keep_checkpoint_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "config.runtime.keep_checkpoint_every_n_hours",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_step_count_steps": {
                    "value": "config.runtime.log_step_count_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "session_config": {
                    "value": "tf.ConfigProto(isolate_session_state=True, log_device_placement=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "tf.estimator.tpu.TPUConfig(iterations_per_loop=config.runtime.iterations_per_loop, tpu_job_name=FLAGS.tpu_job_name, per_host_input_for_training=tf.estimator.tpu.InputPipelineConfig.PER_HOST_V2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_368": {
                "variable": {
                    "value": "est",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.estimator.tpu.RunConfig(cluster=tpu_cluster_resolver, model_dir=FLAGS.model_dir, save_checkpoints_steps=max(100, config.runtime.iterations_per_loop), keep_checkpoint_max=config.runtime.keep_checkpoint_max, keep_checkpoint_every_n_hours=config.runtime.keep_checkpoint_every_n_hours, log_step_count_steps=config.runtime.log_step_count_steps, session_config=tf.ConfigProto(isolate_session_state=True, log_device_placement=False), tpu_config=tf.estimator.tpu.TPUConfig(iterations_per_loop=config.runtime.iterations_per_loop, tpu_job_name=FLAGS.tpu_job_name, per_host_input_for_training=tf.estimator.tpu.InputPipelineConfig.PER_HOST_V2))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "config.train.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "config.eval.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "export_to_tpu": {
                    "value": "FLAGS.export_to_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dict(steps_per_epoch=num_train_images / config.train.batch_size, image_size=input_image_size, config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_74": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features['image'] if isinstance(features, dict) else features",
                            "IfExp"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_96": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.build_model_with_precision(precision, build_model, images, is_training)",
                            "Call"
                        ],
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ],
                        [
                            "build_model(images)",
                            "Call"
                        ],
                        [
                            "model(in_images, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_109": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "multi_class_labels": {
                    "value": "tf.cast(labels, dtype=logits.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.build_model_with_precision(precision, build_model, images, is_training)",
                            "Call"
                        ],
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ],
                        [
                            "build_model(images)",
                            "Call"
                        ],
                        [
                            "model(in_images, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "config.train.label_smoothing",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_145": {
                "variable": {
                    "value": "ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "config.train.ema_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_179": {
                "variable": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_190": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_309": {
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cross_entropy + l2loss",
                            "BinOp"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "optimizer.minimize(loss, global_step, var_list=var_list)",
                            "Call"
                        ],
                        [
                            "optimizer.apply_gradients(grads_and_vars, global_step)",
                            "Call"
                        ],
                        [
                            "ema.apply(ema_vars)",
                            "Call"
                        ]
                    ]
                },
                "host_call": {
                    "value": "host_call",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "utils.get_tpu_host_call(global_step, FLAGS.model_dir, config.runtime.iterations_per_loop)",
                            "Call"
                        ]
                    ]
                },
                "eval_metrics": {
                    "value": "eval_metrics",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(metric_fn, [labels, logits])",
                            "Tuple"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "TPUClusterResolver_342": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "disable_eager_execution_502": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_114": {
                "variable": {
                    "value": "xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.cast(labels, dtype=logits.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.build_model_with_precision(precision, build_model, images, is_training)",
                            "Call"
                        ],
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ],
                        [
                            "build_model(images)",
                            "Call"
                        ],
                        [
                            "model(in_images, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_116": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(xent, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_121": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels['label'] if isinstance(labels, dict) else labels",
                            "IfExp"
                        ],
                        [
                            "labels / tf.reshape(tf.reduce_sum(labels, axis=1), (-1, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.argmax(labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.build_model_with_precision(precision, build_model, images, is_training)",
                            "Call"
                        ],
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ],
                        [
                            "build_model(images)",
                            "Call"
                        ],
                        [
                            "model(in_images, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "label_smoothing": {
                    "value": "config.train.label_smoothing",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_135": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tf.trainable_variables() if not matcher.match(v.name)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "CrossShardOptimizer_176": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.build_optimizer(learning_rate, optimizer_name=config.train.optimizer)",
                            "Call"
                        ],
                        [
                            "tf.tpu.CrossShardOptimizer(optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_279": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels['label'] if isinstance(labels, dict) else labels",
                            "IfExp"
                        ],
                        [
                            "labels / tf.reshape(tf.reduce_sum(labels, axis=1), (-1, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.argmax(labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_280": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.build_model_with_precision(precision, build_model, images, is_training)",
                            "Call"
                        ],
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ],
                        [
                            "build_model(images)",
                            "Call"
                        ],
                        [
                            "model(in_images, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "accuracy_281": {
                "variable": {
                    "value": "metrics[eval/acc_top1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels['label'] if isinstance(labels, dict) else labels",
                            "IfExp"
                        ],
                        [
                            "labels / tf.reshape(tf.reduce_sum(labels, axis=1), (-1, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.argmax(labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_282": {
                "variable": {
                    "value": "in_top_5",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.in_top_k(logits, labels, 5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_283": {
                "variable": {
                    "value": "metrics[eval/acc_top5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "in_top_5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.nn.in_top_k(logits, labels, 5), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_284": {
                "variable": {
                    "value": "metrics[model/resolution]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "image_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['image_size']",
                            "Subscript"
                        ],
                        [
                            "int(ibase + (input_image_size - ibase) * ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_285": {
                "variable": {
                    "value": "metrics[model/flops]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "num_flops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(num_flops - pre_num_flops) / params['batch_size']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_286": {
                "variable": {
                    "value": "metrics[model/params]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "num_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_params - pre_num_params",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Saver_294": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_vars_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ema.variables_to_restore(ema_vars)",
                            "Call"
                        ]
                    ]
                }
            },
            "checkpoints_iterator_391": {
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "timeout": {
                    "value": "60 * 60 * 24",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "NewCheckpointReader_426": {
                "variable": {
                    "value": "checkpoint_reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "tf.train.latest_checkpoint(FLAGS.model_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_130": {
                "x": {
                    "value": "train_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max(config.train.min_steps, config.train.epochs * params['steps_per_epoch'])",
                            "Call"
                        ],
                        [
                            "max(config.train.min_steps, config.train.epochs * num_train_images // config.train.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_154": {
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_global_step()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_206": {
                "variable": {
                    "value": "(clipped_grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "clipped_grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.clip_by_norm(g, clip_norm) if g is not None else None for g in grads]",
                            "ListComp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "abs(config.train.gclip)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_254": {
                "variable": {
                    "value": "metrics[eval/global_ap]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels['label'] if isinstance(labels, dict) else labels",
                            "IfExp"
                        ],
                        [
                            "labels / tf.reshape(tf.reduce_sum(labels, axis=1), (-1, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.argmax(labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "tf.nn.sigmoid(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "curve": {
                    "value": "PR",
                    "type": "str",
                    "possible_values": []
                },
                "num_thresholds": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "summation_method": {
                    "value": "careful_interpolation",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "global_ap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_263": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels['label'] if isinstance(labels, dict) else labels",
                            "IfExp"
                        ],
                        [
                            "labels / tf.reshape(tf.reduce_sum(labels, axis=1), (-1, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.argmax(labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_264": {
                "variable": {
                    "value": "label_to_repeat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.argmax(labels, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_265": {
                "variable": {
                    "value": "all_labels_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_266": {
                "variable": {
                    "value": "all_labels_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_labels_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(0, labels.shape[-1], dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(all_labels_set, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "precision_at_k_269": {
                "variable": {
                    "value": "metrics[eval/precision@1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels * all_labels_set + (1 - labels) * label_to_repeat",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.build_model_with_precision(precision, build_model, images, is_training)",
                            "Call"
                        ],
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ],
                        [
                            "build_model(images)",
                            "Call"
                        ],
                        [
                            "model(in_images, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "recall_at_k_271": {
                "variable": {
                    "value": "metrics[eval/recall@1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels * all_labels_set + (1 - labels) * label_to_repeat",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.build_model_with_precision(precision, build_model, images, is_training)",
                            "Call"
                        ],
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ],
                        [
                            "build_model(images)",
                            "Call"
                        ],
                        [
                            "model(in_images, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "precision_at_k_273": {
                "variable": {
                    "value": "metrics[eval/precision@5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels * all_labels_set + (1 - labels) * label_to_repeat",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.build_model_with_precision(precision, build_model, images, is_training)",
                            "Call"
                        ],
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ],
                        [
                            "build_model(images)",
                            "Call"
                        ],
                        [
                            "model(in_images, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "recall_at_k_275": {
                "variable": {
                    "value": "metrics[eval/recall@5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels * all_labels_set + (1 - labels) * label_to_repeat",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.build_model_with_precision(precision, build_model, images, is_training)",
                            "Call"
                        ],
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ],
                        [
                            "build_model(images)",
                            "Call"
                        ],
                        [
                            "model(in_images, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Scaffold_295": {
                "saver": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(restore_vars_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "exists_332": {
                "path": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "makedirs_333": {
                "path": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_355": {
                "isolate_session_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TPUConfig_357": {
                "iterations_per_loop": {
                    "value": "config.runtime.iterations_per_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tpu_job_name": {
                    "value": "FLAGS.tpu_job_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "tf.estimator.tpu.InputPipelineConfig.PER_HOST_V2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_110": {
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels['label'] if isinstance(labels, dict) else labels",
                            "IfExp"
                        ],
                        [
                            "labels / tf.reshape(tf.reduce_sum(labels, axis=1), (-1, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.argmax(labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "input_tensor": {
                    "value": "xent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.cast(labels, dtype=logits.dtype), logits=logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "tensor": {
                    "value": "tf.reduce_sum(labels, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "l2_loss_136": {
                "t": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_194": {
                "name": {
                    "value": "gclip",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_209": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_212": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_216": {
                "control_inputs": {
                    "value": "[train_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "in_top_k_282": {
                "targets": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.build_model_with_precision(precision, build_model, images, is_training)",
                            "Call"
                        ],
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ],
                        [
                            "build_model(images)",
                            "Call"
                        ],
                        [
                            "model(in_images, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels['label'] if isinstance(labels, dict) else labels",
                            "IfExp"
                        ],
                        [
                            "labels / tf.reshape(tf.reduce_sum(labels, axis=1), (-1, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.argmax(labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_304": {
                "ckpt_dir_or_file": {
                    "value": "config.train.ft_init_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "var_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.get_ckpt_var_map(ckpt_path=config.train.ft_init_ckpt, skip_mismatch=True, init_ema=config.train.ft_init_ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_427": {
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_451": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUEstimator_487": {
                "variable": {
                    "value": "est",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.estimator.tpu.RunConfig(cluster=tpu_cluster_resolver, model_dir=FLAGS.model_dir, save_checkpoints_steps=max(100, config.runtime.iterations_per_loop), keep_checkpoint_max=config.runtime.keep_checkpoint_max, keep_checkpoint_every_n_hours=config.runtime.keep_checkpoint_every_n_hours, log_step_count_steps=config.runtime.log_step_count_steps, session_config=tf.ConfigProto(isolate_session_state=True, log_device_placement=False), tpu_config=tf.estimator.tpu.TPUConfig(iterations_per_loop=config.runtime.iterations_per_loop, tpu_job_name=FLAGS.tpu_job_name, per_host_input_for_training=tf.estimator.tpu.InputPipelineConfig.PER_HOST_V2))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "config.train.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "config.eval.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "export_to_tpu": {
                    "value": "FLAGS.export_to_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dict(steps_per_epoch=num_train_images / config.train.batch_size, image_size=input_image_size, config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_115": {
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels['label'] if isinstance(labels, dict) else labels",
                            "IfExp"
                        ],
                        [
                            "labels / tf.reshape(tf.reduce_sum(labels, axis=1), (-1, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.argmax(labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_120": {
                "input_tensor": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels['label'] if isinstance(labels, dict) else labels",
                            "IfExp"
                        ],
                        [
                            "labels / tf.reshape(tf.reduce_sum(labels, axis=1), (-1, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.argmax(labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_norm_197": {
                "t_list": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[gv[0] for gv in grads_and_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_max_199": {
                "input_tensor": {
                    "value": "[tf.norm(g) for g in grads]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sigmoid_256": {
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.build_model_with_precision(precision, build_model, images, is_training)",
                            "Call"
                        ],
                        [
                            "tf.cast(logits, tf.float32)",
                            "Call"
                        ],
                        [
                            "build_model(images)",
                            "Call"
                        ],
                        [
                            "model(in_images, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_264": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels['label'] if isinstance(labels, dict) else labels",
                            "IfExp"
                        ],
                        [
                            "labels / tf.reshape(tf.reduce_sum(labels, axis=1), (-1, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.argmax(labels, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reset_default_graph_471": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_norm_203": {
                "t": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "abs(config.train.gclip)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_199": {
                "tensor": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "efficientnetv2/main_tf2.py": {
        "tensorflow": {
            "SGD_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.WarmupLearningRateSchedule(scaled_lr, steps_per_epoch=steps_per_epoch, decay_epochs=config.train.lr_decay_epoch, warmup_epochs=config.train.lr_warmup_epoch, decay_factor=config.train.lr_decay_factor, lr_decay_type=config.train.lr_sched, total_steps=total_steps, minimal_lr=scaled_lr_min)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_109": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self(images, training=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "self(images, training=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(pred, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_138": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUStrategy_142": {
                "variable": {
                    "value": "ds_strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu_cluster_resolver": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(FLAGS.tpu, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModelCheckpoint_209": {
                "variable": {
                    "value": "ckpt_callback",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "os.path.join(FLAGS.model_dir, 'ckpt-{epoch:d}')",
                    "type": "Call",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorBoard_213": {
                "variable": {
                    "value": "tb_callback",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "update_freq": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_47": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.WarmupLearningRateSchedule(scaled_lr, steps_per_epoch=steps_per_epoch, decay_epochs=config.train.lr_decay_epoch, warmup_epochs=config.train.lr_warmup_epoch, decay_factor=config.train.lr_decay_factor, lr_decay_type=config.train.lr_sched, total_steps=total_steps, minimal_lr=scaled_lr_min)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_95": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self(images, training=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "self(images, training=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(pred, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "experimental_connect_to_cluster_140": {
                "cluster_spec_or_resolver": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(FLAGS.tpu, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_tpu_system_141": {
                "enable_coordination_service": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(FLAGS.tpu, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                }
            },
            "MirroredStrategy_145": {
                "variable": {
                    "value": "ds_strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Policy_168": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'mixed_bfloat16' if strategy == 'tpu' else 'mixed_float16'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "RMSprop_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.WarmupLearningRateSchedule(scaled_lr, steps_per_epoch=steps_per_epoch, decay_epochs=config.train.lr_decay_epoch, warmup_epochs=config.train.lr_warmup_epoch, decay_factor=config.train.lr_decay_factor, lr_decay_type=config.train.lr_sched, total_steps=total_steps, minimal_lr=scaled_lr_min)",
                            "Call"
                        ]
                    ]
                },
                "rho": {
                    "value": "decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_n_83": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in self.trainable_variables if var_match.match(v.name)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "GradientTape_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exists_133": {
                "path": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "makedirs_134": {
                "path": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "list_logical_devices_143": {
                "device_type": {
                    "value": "TPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "list_physical_devices_148": {
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MirroredStrategy_149": {
                "variable": {
                    "value": "ds_strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "devices": {
                    "value": "['GPU:0']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MirroredStrategy_151": {
                "variable": {
                    "value": "ds_strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "devices": {
                    "value": "['CPU:0']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_global_policy_169": {
                "policy": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.mixed_precision.Policy(precision)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "utils.WarmupLearningRateSchedule(scaled_lr, steps_per_epoch=steps_per_epoch, decay_epochs=config.train.lr_decay_epoch, warmup_epochs=config.train.lr_warmup_epoch, decay_factor=config.train.lr_decay_factor, lr_decay_type=config.train.lr_sched, total_steps=total_steps, minimal_lr=scaled_lr_min)",
                            "Call"
                        ]
                    ]
                }
            },
            "list_physical_devices_146": {
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_177": {
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_201": {
                "label_smoothing": {
                    "value": "config.train.label_smoothing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "l2_loss_84": {
                "t": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TopKCategoricalAccuracy_204": {
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "acc_top1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TopKCategoricalAccuracy_205": {
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "acc_top5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "checkpoints_iterator_286": {
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "timeout": {
                    "value": "60 * 60 * 24",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "efficientnetv2/mlir.py": {
        "tensorflow": {
            "function_57": {
                "variable": {
                    "value": "fff",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "convert_graph_def_78": {
                "variable": {
                    "value": "tf_mlir_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "run_graph_optimizations(graph_def, input_tensors, output_tensors, config=get_grappler_config(['pruning', 'function', 'constfold', 'shape', 'remap', 'memory', 'common_subgraph_elimination', 'arithmetic', 'loop', 'dependency', 'debug_stripper']), graph=frozen_func.graph)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_49": {
                "shape": {
                    "value": "[1, 224, 224, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "isdir_52": {
                "path": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.model_dir",
                            "Attribute"
                        ],
                        [
                            "tf.train.latest_checkpoint(FLAGS.model_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_53": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_58": {
                "shape": {
                    "value": "[1, 224, 224, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "efficientnetv2/preprocess_legacy.py": {
        "tensorflow": {
            "equal_75": {
                "variable": {
                    "value": "match",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_76": {
                "variable": {
                    "value": "match",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "match",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(a, b)",
                            "Call"
                        ],
                        [
                            "tf.cast(match, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_90": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_99": {
                "variable": {
                    "value": "original_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_102": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "bad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_at_least_x_are_equal(original_shape, tf.shape(image), 3)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _decode_and_center_crop(image_bytes, image_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : _resize_image(image, image_size, resize_method)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_112": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_116": {
                "variable": {
                    "value": "padded_center_crop_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_size / (image_size + 32) * tf.cast(tf.minimum(image_height, image_width), tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_123": {
                "variable": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_height, offset_width, padded_center_crop_size, padded_center_crop_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_125": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([offset_y, offset_x, target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.stack([offset_height, offset_width, padded_center_crop_size, padded_center_crop_size])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_flip_left_right_132": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : _resize_image(image, image_size, resize_method))",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "_resize_image(image, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image_with_randaugment(image, randaug_num_layers, randaug_magnitude)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image_bytes, image_size, augment_name, randaug_num_layers, randaug_magnitude, resize_method)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=image_dtype or tf.float32)",
                            "Call"
                        ],
                        [
                            "image / tf.constant(stddev_rgb, shape=(1, 1, 3), dtype=image.dtype)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : _resize_image(image, image_size, resize_method))",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "_resize_image(image, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image_with_randaugment(image, randaug_num_layers, randaug_magnitude)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image_bytes, image_size, augment_name, randaug_num_layers, randaug_magnitude, resize_method)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=image_dtype or tf.float32)",
                            "Call"
                        ],
                        [
                            "image / tf.constant(stddev_rgb, shape=(1, 1, 3), dtype=image.dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : _resize_image(image, image_size, resize_method))",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "_resize_image(image, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image_with_randaugment(image, randaug_num_layers, randaug_magnitude)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image_bytes, image_size, augment_name, randaug_num_layers, randaug_magnitude, resize_method)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=image_dtype or tf.float32)",
                            "Call"
                        ],
                        [
                            "image / tf.constant(stddev_rgb, shape=(1, 1, 3), dtype=image.dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_239": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : _resize_image(image, image_size, resize_method))",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "_resize_image(image, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image_with_randaugment(image, randaug_num_layers, randaug_magnitude)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image_bytes, image_size, augment_name, randaug_num_layers, randaug_magnitude, resize_method)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=image_dtype or tf.float32)",
                            "Call"
                        ],
                        [
                            "image / tf.constant(stddev_rgb, shape=(1, 1, 3), dtype=image.dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "image_dtype or tf.float32",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_53": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_54": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "image_size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ]
                    ]
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "min_object_covered",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "aspect_ratio_range": {
                    "value": "aspect_ratio_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(0.75",
                            "MethodArgument"
                        ]
                    ]
                },
                "area_range": {
                    "value": "area_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(0.05",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_attempts": {
                    "value": "max_attempts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unstack_65": {
                "variable": {
                    "value": "(offset_y, offset_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_begin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_66": {
                "variable": {
                    "value": "(target_height, target_width, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_y, offset_x, target_height, target_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_68": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([offset_y, offset_x, target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.stack([offset_height, offset_width, padded_center_crop_size, padded_center_crop_size])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_77": {
                "x": {
                    "value": "tf.reduce_sum(match)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "info_84": {
                "msg": {
                    "value": "Use default resize_bicubic.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_168": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : _resize_image(image, image_size, resize_method))",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "_resize_image(image, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image_with_randaugment(image, randaug_num_layers, randaug_magnitude)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image_bytes, image_size, augment_name, randaug_num_layers, randaug_magnitude, resize_method)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=image_dtype or tf.float32)",
                            "Call"
                        ],
                        [
                            "image / tf.constant(stddev_rgb, shape=(1, 1, 3), dtype=image.dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_169": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : _resize_image(image, image_size, resize_method))",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "_resize_image(image, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image_with_randaugment(image, randaug_num_layers, randaug_magnitude)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image_bytes, image_size, augment_name, randaug_num_layers, randaug_magnitude, resize_method)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=image_dtype or tf.float32)",
                            "Call"
                        ],
                        [
                            "image / tf.constant(stddev_rgb, shape=(1, 1, 3), dtype=image.dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_180": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : _resize_image(image, image_size, resize_method))",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "_resize_image(image, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image_with_randaugment(image, randaug_num_layers, randaug_magnitude)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image_bytes, image_size, augment_name, randaug_num_layers, randaug_magnitude, resize_method)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=image_dtype or tf.float32)",
                            "Call"
                        ],
                        [
                            "image / tf.constant(stddev_rgb, shape=(1, 1, 3), dtype=image.dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_242": {
                "value": {
                    "value": "mean_rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0.485 * 255, 0.456 * 255, 0.406 * 255]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_243": {
                "value": {
                    "value": "stddev_rgb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0.229 * 255, 0.224 * 255, 0.225 * 255]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_52": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_77": {
                "input_tensor": {
                    "value": "match",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(a, b)",
                            "Call"
                        ],
                        [
                            "tf.cast(match, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_82": {
                "msg": {
                    "value": "'Use customized resize method {}'.format(method)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "resize_bicubic_85": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_100": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size), lambda : _resize_image(image, image_size, resize_method))",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "_resize_image(image, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image_with_autoaugment(image, 'v0')",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image_with_randaugment(image, randaug_num_layers, randaug_magnitude)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image_bytes, image_size, augment_name, randaug_num_layers, randaug_magnitude, resize_method)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image_bytes, image_size, resize_method)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=image_dtype or tf.float32)",
                            "Call"
                        ],
                        [
                            "image / tf.constant(stddev_rgb, shape=(1, 1, 3), dtype=image.dtype)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "resize_83": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                },
                "method": {
                    "value": "method",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_118": {
                "x": {
                    "value": "tf.minimum(image_height, image_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_118": {
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "efficientnetv2/preprocessing.py": {
        "tensorflow": {
            "resize_41": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_85": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_32": {
                "variable": {
                    "value": "(begin, size, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "image_size": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "bounding_boxes": {
                    "value": "tf.zeros([0, 0, 4], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "area_range": {
                    "value": "(0.05, 1.0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "min_object_covered": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "slice_38": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "begin",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_flip_left_right_44": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_49": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_50": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_53": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_image_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "image.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "shape_62": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_65": {
                "variable": {
                    "value": "crop_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ratio * tf.cast(tf.minimum(height, width), tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_68": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "target_height": {
                    "value": "crop_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(ratio * tf.cast(tf.minimum(height, width), tf.float32), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "target_width": {
                    "value": "crop_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(ratio * tf.cast(tf.minimum(height, width), tf.float32), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_70": {
                "images": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_89": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_154": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "image_dtype or tf.float32",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "cast_93": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(image, 0.0, 255.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_104": {
                "variable": {
                    "value": "replace",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "image.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "minval": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "image.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_image_142": {
                "contents": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_33": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_34": {
                "shape": {
                    "value": "[0, 0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_66": {
                "x": {
                    "value": "tf.minimum(height, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_83": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_93": {
                "t": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "minimum_66": {
                "x": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_100": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.slice(image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(image, 0.0, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=input_image_type)",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, y, x, crop_size, crop_size)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize(image, [image_size, image_size])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "(image * std + mean) * 255",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(image, 0.0, 255.0), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'autoaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "autoaugment.cutout(image, pad_size=image_size // 4, replace=replace)",
                            "Call"
                        ],
                        [
                            "autoaugment.distort_image(image, 'randaug', ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "(tf.cast(image, tf.float32) / 255.0 - mean) / std",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_image(image, channels=3) if is_raw else image",
                            "IfExp"
                        ],
                        [
                            "preprocess_for_finetune(image, image_size, is_training, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_train(image, image_size, augname, ra_num_layers, ra_magnitude)",
                            "Call"
                        ],
                        [
                            "preprocess_for_eval(image, image_size)",
                            "Call"
                        ],
                        [
                            "(image - 128.0) / 128.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "efficientnetv2/preprocessing_test.py": {
        "tensorflow": {
            "zeros_26": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(300, 300, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(300, 300, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientnetv2/smoke_test.py": {
        "tensorflow": {
            "disable_eager_execution_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "efficientnetv2/utils.py": {
        "tensorflow": {
            "glob_249": {
                "variable": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "pattern": {
                    "value": "ckpt_path + '.*'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "generate_checkpoint_state_proto_264": {
                "variable": {
                    "value": "ckpt_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "save_dir": {
                    "value": "dst_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'archive')",
                            "Call"
                        ]
                    ]
                },
                "model_checkpoint_path": {
                    "value": "ckpt_name",
                    "type": "Variable",
                    "possible_values": []
                },
                "all_model_checkpoint_paths": {
                    "value": "[ckpt_name]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_302": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "random_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "survival_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + tf.random.uniform([batch_size, 1, 1, 1], dtype=inputs.dtype)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_collection_357": {
                "variable": {
                    "value": "scalar_summaries",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "scalar_summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_374": {
                "variable": {
                    "value": "global_step_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Policy_413": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "policy_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_collection_477": {
                "variable": {
                    "value": "model_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.compat.v1.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "var_scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_checkpoint_479": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "list_variables_543": {
                "variable": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "ckpt_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ckpt_path_or_file",
                            "Name"
                        ],
                        [
                            "tf.train.latest_checkpoint(ckpt_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_checkpoint_560": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "ckpt_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ckpt_path_or_file",
                            "Name"
                        ],
                        [
                            "tf.train.latest_checkpoint(ckpt_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_154": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exists_242": {
                "path": {
                    "value": "saved_objective_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'best_objective.txt')",
                            "Call"
                        ]
                    ]
                }
            },
            "exists_256": {
                "path": {
                    "value": "dst_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'archive')",
                            "Call"
                        ]
                    ]
                }
            },
            "makedirs_258": {
                "path": {
                    "value": "dst_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'archive')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "uniform_301": {
                "shape": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_v2_dtype_behavior_412": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_global_policy_414": {
                "policy": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.mixed_precision.Policy(policy_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_438": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ii",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bfloat16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isdir_539": {
                "path": {
                    "value": "ckpt_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ckpt_path_or_file",
                            "Name"
                        ],
                        [
                            "tf.train.latest_checkpoint(ckpt_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_540": {
                "variable": {
                    "value": "ckpt_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ckpt_path_or_file",
                            "Name"
                        ],
                        [
                            "tf.train.latest_checkpoint(ckpt_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "Checkpoint_551": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "swish_30": {
                "x": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_replica_sum_74": {
                "x": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "group_assignment": {
                    "value": "group_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[[x for x in range(num_shards) if x // num_shards_per_group == y] for y in range(num_groups)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cast_74": {
                "x": {
                    "value": "num_shards_per_group",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(8, num_shards)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_122": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.ExponentialDecay(self.initial_lr, decay_steps, self.decay_factor, staircase=True)(step)",
                            "Call"
                        ],
                        [
                            "0.5 * self.initial_lr * (1 + tf.cos(np.pi * tf.cast(step, tf.float32) / self.total_steps))",
                            "BinOp"
                        ],
                        [
                            "tf.math.maximum(lr, self.minimal_lr)",
                            "Call"
                        ],
                        [
                            "(1.0 - tf.cast(step, tf.float32) / self.total_steps) * self.initial_lr",
                            "BinOp"
                        ],
                        [
                            "self.initial_lr",
                            "Attribute"
                        ],
                        [
                            "tf.cond(step < warmup_steps, lambda : warmup_lr, lambda : lr)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.minimal_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_129": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "step < warmup_steps",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : warmup_lr",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : lr",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_158": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.99",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "square_194": {
                "variable": {
                    "value": "shard_square_of_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shard_mean",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rmtree_257": {
                "path": {
                    "value": "dst_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'archive')",
                            "Call"
                        ]
                    ]
                }
            },
            "copy_263": {
                "a": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GFile_268": {
                "name": {
                    "value": "os.path.join(dst_dir, 'checkpoint')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_270": {
                "name": {
                    "value": "os.path.join(dst_dir, 'best_eval.txt')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_274": {
                "name": {
                    "value": "saved_objective_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'best_objective.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_283": {
                "key": {
                    "value": "moving_vars",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_299": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(ii, tf.bfloat16)",
                            "Call"
                        ],
                        [
                            "tf.cast(ii, tf.float16)",
                            "Call"
                        ]
                    ]
                }
            },
            "profile_318": {
                "graph": {
                    "value": "tf.compat.v1.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                },
                "options": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.profiler.ProfileOptionBuilder.float_operation()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_341": {
                "name": {
                    "value": "scalar_summaries",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "Pair(name, tf.reduce_mean(tensor))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_344": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scalar_summaries[i][0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "tf.reduce_mean(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_350": {
                "name": {
                    "value": "image_summaries",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "Pair(name, tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_352": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scalar_summaries[i][0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args[i][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_373": {
                "tensor": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_391": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getter(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(var, tf.float16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_394": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "_custom_getter",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_444": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ii",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_replica_sum_63": {
                "x": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_63": {
                "x": {
                    "value": "num_shards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tpu_function.get_tpu_context().number_of_shards",
                            "Attribute"
                        ],
                        [
                            "tpu_function.get_tpu_context().number_of_shards or 1",
                            "BoolOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_162": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.99",
                            "MethodArgument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GFile_243": {
                "name": {
                    "value": "saved_objective_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'best_objective.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_graph_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_344": {
                "input_tensor": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args[i][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "create_file_writer_364": {
                "logdir": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_queue": {
                    "value": "iterations_per_loop",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "all_v2_summary_ops_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bfloat16_scope_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_32": {
                "x": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ExponentialDecay_105": {
                "initial_learning_rate": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.steps_per_epoch * self.decay_epochs",
                            "BinOp"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "self.decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_128": {
                "x": {
                    "value": "warmup_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(self.warmup_epochs * self.steps_per_epoch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_166": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_199": {
                "x": {
                    "value": "group_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cross_replica_mean(shard_mean, num_shards_per_group)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_342": {
                "input_tensor": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args[i][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_36": {
                "features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_127": {
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_370": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scalar_summaries[i][0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args[i][0]",
                            "Subscript"
                        ]
                    ]
                },
                "step": {
                    "value": "gs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "global_step[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu6_34": {
                "features": {
                    "value": "features + 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu6_38": {
                "features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_111": {
                "x": {
                    "value": "np.pi * tf.cast(step, tf.float32) / self.total_steps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_40": {
                "features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "leaky_relu_42": {
                "features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_115": {
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "selu_44": {
                "features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_111": {
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_46": {
                "x": {
                    "value": "tf.math.softplus(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_46": {
                "features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "efficientnetv2/utils_test.py": {
        "tensorflow": {
            "main_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}