{
    "JigsawCNN/Boost.py": {
        "tensorflow": {
            "argmax_22": {
                "variable": {
                    "value": "gt_classification",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dimension": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_classification",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_31": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_33": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_35": {
                "variable": {
                    "value": "sess_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_36": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NewCheckpointReader_89": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Saver_100": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "argmax_107": {
                "variable": {
                    "value": "gt_classification",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dimension": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_classification",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_126": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "group_127": {
                "variable": {
                    "value": "sess_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, net.params['height'], net.params['width'], net.params['depth']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_179": {
                "variable": {
                    "value": "roi_box",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_182": {
                "variable": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net._inference(input, roi_box, is_training)",
                            "Call"
                        ],
                        [
                            "net._inference(input, roi_box, is_training)",
                            "Call"
                        ],
                        [
                            "net._inference(input, roi_box, is_training)",
                            "Call"
                        ],
                        [
                            "net._inference(input, roi_box, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_186": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_220": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, net.params['height'], net.params['width'], net.params['depth']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_221": {
                "variable": {
                    "value": "roi_box",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_224": {
                "variable": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net._inference(input, roi_box, is_training)",
                            "Call"
                        ],
                        [
                            "net._inference(input, roi_box, is_training)",
                            "Call"
                        ],
                        [
                            "net._inference(input, roi_box, is_training)",
                            "Call"
                        ],
                        [
                            "net._inference(input, roi_box, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_228": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tf_record_iterator_238": {
                "variable": {
                    "value": "record_iterator",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "testing_tfrecord_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(Parameters.WorkSpacePath['testing_dataset_root'], 'input_tfrecord_roi')",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_25": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(target, dimension=1, name='gt_classification')",
                            "Call"
                        ],
                        [
                            "tf.argmax(target, dimension=1, name='gt_classification')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_26": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_27": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_40": {
                "variable": {
                    "value": "tensorboard_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "tensorboard_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_root, subdir)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_41": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_42": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_110": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(target, dimension=1, name='gt_classification')",
                            "Call"
                        ],
                        [
                            "tf.argmax(target, dimension=1, name='gt_classification')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_111": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(net.pred, gt_classification)",
                            "Call"
                        ],
                        [
                            "tf.cast(I, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(I, [-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_112": {
                "variable": {
                    "value": "corresponding_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(D, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(D, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "data_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "corresponding_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "corresponding_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(weights, data_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(corresponding_weights, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(net.pred, gt_classification)",
                            "Call"
                        ],
                        [
                            "tf.cast(I, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(I, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "variable": {
                    "value": "batch_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(corresponding_weights, I)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "variable": {
                    "value": "batch_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "corresponding_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(weights, data_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(corresponding_weights, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_118": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(target, dimension=1, name='gt_classification')",
                            "Call"
                        ],
                        [
                            "tf.argmax(target, dimension=1, name='gt_classification')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_119": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_121": {
                "variable": {
                    "value": "pred_result",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(net.pred, gt_classification)",
                            "Call"
                        ],
                        [
                            "tf.equal(net.pred, gt_classification)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_122": {
                "variable": {
                    "value": "minus_yg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(pred_result, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_123": {
                "variable": {
                    "value": "minus_yg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "minus_yg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.multiply(pred_result, -2), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(minus_yg, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_124": {
                "variable": {
                    "value": "new_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "corresponding_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(weights, data_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(corresponding_weights, [-1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.exp(minus_yg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Coordinator_136": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_137": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ],
                        [
                            "sessions",
                            "variable"
                        ],
                        [
                            "tf.Session()",
                            "Call"
                        ],
                        [
                            "sessions",
                            "variable"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_189": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_190": {
                "variable": {
                    "value": "sess_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_231": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_232": {
                "variable": {
                    "value": "sess_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_257": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_581": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_24": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_27": {
                "input_tensor": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.cast(correct_prediction, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.cast(correct_prediction, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_96": {
                "variable": {
                    "value": "curr_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "saved_var_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_109": {
                "name": {
                    "value": "calculation_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "string_input_producer_503": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[tfrecord_filename]",
                    "type": "List",
                    "possible_values": []
                },
                "capacity": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_505": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(total_record, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "new_weights",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "string_input_producer_510": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[tfrecord_filename]",
                    "type": "List",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_512": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(total_record, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "new_weights",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_26": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(net.pred, gt_classification)",
                            "Call"
                        ],
                        [
                            "tf.equal(net.pred, gt_classification)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_115": {
                "x": {
                    "value": "corresponding_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(weights, data_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(corresponding_weights, [-1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(net.pred, gt_classification)",
                            "Call"
                        ],
                        [
                            "tf.cast(I, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(I, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_119": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(net.pred, gt_classification)",
                            "Call"
                        ],
                        [
                            "tf.equal(net.pred, gt_classification)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_122": {
                "x": {
                    "value": "pred_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(correct_prediction, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_124": {
                "x": {
                    "value": "minus_yg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.multiply(pred_result, -2), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(minus_yg, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_133": {
                "checkpoint_dir": {
                    "value": "checkpoint_dir + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_192": {
                "checkpoint_dir": {
                    "value": "check_point + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_234": {
                "checkpoint_dir": {
                    "value": "check_point + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reset_default_graph_507": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_516": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_step_50": {
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ],
                        [
                            "sessions",
                            "variable"
                        ],
                        [
                            "tf.Session()",
                            "Call"
                        ],
                        [
                            "sessions",
                            "variable"
                        ]
                    ]
                },
                "global_step_tensor": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                }
            },
            "tf_record_iterator_487": {
                "path": {
                    "value": "tfrecord_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(Parameters.WorkSpacePath['training_dataset_root'], 'training_input_tfrecord_roi_withId')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "JigsawCNN/JIgsawAbitraryNetROI.py": {
        "tensorflow": {
            "get_variable_55": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'BN_beta'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "filter_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_57": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'BN_gamma'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "filter_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "moving_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mov_avg_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'BN_moving_avg'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "filter_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_61": {
                "variable": {
                    "value": "moving_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mov_var_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'BN_moving_var'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "filter_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_257": {
                "variable": {
                    "value": "self.block1_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='Pooling_layer')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean, var, offset=beta, scale=gamma, variance_epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape[3], is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights1, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias1)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta1', gamma_name='ResLayer_BN_gamma1', mov_avg_name='ResLayer_BN_mov_avg1', mov_var_name='ResLayer_BN_mov_var1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, filter=filter_weights2, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias2)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta2', gamma_name='ResLayer_BN_gamma2', mov_avg_name='ResLayer_BN_mov_avg2', mov_var_name='ResLayer_BN_mov_var2')",
                            "Call"
                        ],
                        [
                            "x + skip_out",
                            "BinOp"
                        ],
                        [
                            "x + input",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_geo, x_roi], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "x_roi",
                            "variable"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "self._conv_layer(input, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='init_conv_layer')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='first_6_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='second_3_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=128, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._classifyOnlyROIFeature(roi_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_293": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='Pooling_layer')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean, var, offset=beta, scale=gamma, variance_epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape[3], is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights1, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias1)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta1', gamma_name='ResLayer_BN_gamma1', mov_avg_name='ResLayer_BN_mov_avg1', mov_var_name='ResLayer_BN_mov_var1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, filter=filter_weights2, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias2)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta2', gamma_name='ResLayer_BN_gamma2', mov_avg_name='ResLayer_BN_mov_avg2', mov_var_name='ResLayer_BN_mov_var2')",
                            "Call"
                        ],
                        [
                            "x + skip_out",
                            "BinOp"
                        ],
                        [
                            "x + input",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_geo, x_roi], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "x_roi",
                            "variable"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "self._conv_layer(input, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='init_conv_layer')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='first_6_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='second_3_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=128, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._classifyOnlyROIFeature(roi_feature)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_305": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "reg_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_333": {
                "variable": {
                    "value": "gt_classification",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dimension": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_classification",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_342": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_344": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_346": {
                "variable": {
                    "value": "sess_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_347": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_408": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.params['height'], self.params['width'], self.params['depth']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_409": {
                "variable": {
                    "value": "roi_box",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_412": {
                "variable": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._inference(input, roi_box, is_training)",
                            "Call"
                        ],
                        [
                            "self._inference(input, roi_box, is_training)",
                            "Call"
                        ],
                        [
                            "self._inference(input, roi_box, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_413": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_433": {
                "variable": {
                    "value": "gt_classification",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dimension": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_classification",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_438": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "group_439": {
                "variable": {
                    "value": "sess_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, self.params['height'], self.params['width'], self.params['depth']])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "Pooling_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_41": {
                "variable": {
                    "value": "roi_out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_42": {
                "variable": {
                    "value": "box_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "limit": {
                    "value": "tf.shape(input)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "crop_and_resize_44": {
                "variable": {
                    "value": "align_roi",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, self.params['height'], self.params['width'], self.params['depth']])",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": []
                },
                "box_ind": {
                    "value": "box_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(start=0, limit=tf.shape(input)[0], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "crop_size": {
                    "value": "roi_out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([4, 4])",
                            "Call"
                        ]
                    ]
                },
                "method": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "align_roi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "moments_66": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, self.params['height'], self.params['width'], self.params['depth']])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, self.params['height'], self.params['width'], self.params['depth']])",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "moving_avg",
                            "variable"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "moving_var",
                            "variable"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=beta_name, shape=filter_num, dtype=tf.float32, initializer=tf.constant_initializer(0.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=gamma_name, shape=filter_num, dtype=tf.float32, initializer=tf.constant_initializer(1.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "filter_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ConvLayer_filter",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3, 3, self.params['depth'], 8]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_93": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ConvLayer_biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, self.params['height'], self.params['width'], self.params['depth']])",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "filter_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='ConvLayer_filter', shape=filter_shape, initializer=tf.contrib.layers.xavier_initializer(), regularizer=tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay']))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='Pooling_layer')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean, var, offset=beta, scale=gamma, variance_epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape[3], is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights1, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias1)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta1', gamma_name='ResLayer_BN_gamma1', mov_avg_name='ResLayer_BN_mov_avg1', mov_var_name='ResLayer_BN_mov_var1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, filter=filter_weights2, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias2)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta2', gamma_name='ResLayer_BN_gamma2', mov_avg_name='ResLayer_BN_mov_avg2', mov_var_name='ResLayer_BN_mov_var2')",
                            "Call"
                        ],
                        [
                            "x + skip_out",
                            "BinOp"
                        ],
                        [
                            "x + input",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_geo, x_roi], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "x_roi",
                            "variable"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "self._conv_layer(input, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='init_conv_layer')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='first_6_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='second_3_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=128, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._classifyOnlyROIFeature(roi_feature)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='ConvLayer_biases', initializer=tf.contrib.layers.xavier_initializer(), shape=[filter_shape[3]])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='Pooling_layer')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean, var, offset=beta, scale=gamma, variance_epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape[3], is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights1, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias1)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta1', gamma_name='ResLayer_BN_gamma1', mov_avg_name='ResLayer_BN_mov_avg1', mov_var_name='ResLayer_BN_mov_var1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, filter=filter_weights2, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias2)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta2', gamma_name='ResLayer_BN_gamma2', mov_avg_name='ResLayer_BN_mov_avg2', mov_var_name='ResLayer_BN_mov_var2')",
                            "Call"
                        ],
                        [
                            "x + skip_out",
                            "BinOp"
                        ],
                        [
                            "x + input",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_geo, x_roi], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "x_roi",
                            "variable"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "self._conv_layer(input, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='init_conv_layer')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='first_6_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='second_3_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=128, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._classifyOnlyROIFeature(roi_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_118": {
                "variable": {
                    "value": "filter_weights1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ResLayer_filter1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3, 3, filter_in, filter_out]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_122": {
                "variable": {
                    "value": "bias1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ResLayer_filter1_biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape1[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_124": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, self.params['height'], self.params['width'], self.params['depth']])",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "filter_weights1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='ResLayer_filter1', shape=filter_shape1, initializer=tf.contrib.layers.xavier_initializer(), regularizer=tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay']))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='ResLayer_skip_filter', shape=filter_shape1, initializer=tf.contrib.layers.xavier_initializer(), regularizer=tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay']))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_125": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='Pooling_layer')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean, var, offset=beta, scale=gamma, variance_epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape[3], is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights1, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias1)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta1', gamma_name='ResLayer_BN_gamma1', mov_avg_name='ResLayer_BN_mov_avg1', mov_var_name='ResLayer_BN_mov_var1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, filter=filter_weights2, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias2)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta2', gamma_name='ResLayer_BN_gamma2', mov_avg_name='ResLayer_BN_mov_avg2', mov_var_name='ResLayer_BN_mov_var2')",
                            "Call"
                        ],
                        [
                            "x + skip_out",
                            "BinOp"
                        ],
                        [
                            "x + input",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_geo, x_roi], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "x_roi",
                            "variable"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "self._conv_layer(input, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='init_conv_layer')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='first_6_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='second_3_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=128, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._classifyOnlyROIFeature(roi_feature)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='ResLayer_filter1_biases', initializer=tf.contrib.layers.xavier_initializer(), shape=[filter_shape1[3]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='ResLayer_skip_filter_biases', initializer=tf.contrib.layers.xavier_initializer(), shape=[filter_shape1[3]])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_136": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='Pooling_layer')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean, var, offset=beta, scale=gamma, variance_epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape[3], is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights1, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias1)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta1', gamma_name='ResLayer_BN_gamma1', mov_avg_name='ResLayer_BN_mov_avg1', mov_var_name='ResLayer_BN_mov_var1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, filter=filter_weights2, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias2)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta2', gamma_name='ResLayer_BN_gamma2', mov_avg_name='ResLayer_BN_mov_avg2', mov_var_name='ResLayer_BN_mov_var2')",
                            "Call"
                        ],
                        [
                            "x + skip_out",
                            "BinOp"
                        ],
                        [
                            "x + input",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_geo, x_roi], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "x_roi",
                            "variable"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "self._conv_layer(input, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='init_conv_layer')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='first_6_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='second_3_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=128, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._classifyOnlyROIFeature(roi_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_138": {
                "variable": {
                    "value": "filter_weights2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ResLayer_filter2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3, 3, filter_out, filter_out]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_142": {
                "variable": {
                    "value": "bias2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ResLayer_filter2_biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape2[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_144": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='Pooling_layer')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean, var, offset=beta, scale=gamma, variance_epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape[3], is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights1, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias1)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta1', gamma_name='ResLayer_BN_gamma1', mov_avg_name='ResLayer_BN_mov_avg1', mov_var_name='ResLayer_BN_mov_var1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, filter=filter_weights2, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias2)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta2', gamma_name='ResLayer_BN_gamma2', mov_avg_name='ResLayer_BN_mov_avg2', mov_var_name='ResLayer_BN_mov_var2')",
                            "Call"
                        ],
                        [
                            "x + skip_out",
                            "BinOp"
                        ],
                        [
                            "x + input",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_geo, x_roi], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "x_roi",
                            "variable"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "self._conv_layer(input, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='init_conv_layer')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='first_6_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='second_3_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=128, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._classifyOnlyROIFeature(roi_feature)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "filter_weights2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='ResLayer_filter2', shape=filter_shape2, initializer=tf.contrib.layers.xavier_initializer(), regularizer=tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay']))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_145": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='Pooling_layer')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean, var, offset=beta, scale=gamma, variance_epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape[3], is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights1, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias1)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta1', gamma_name='ResLayer_BN_gamma1', mov_avg_name='ResLayer_BN_mov_avg1', mov_var_name='ResLayer_BN_mov_var1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, filter=filter_weights2, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias2)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta2', gamma_name='ResLayer_BN_gamma2', mov_avg_name='ResLayer_BN_mov_avg2', mov_var_name='ResLayer_BN_mov_var2')",
                            "Call"
                        ],
                        [
                            "x + skip_out",
                            "BinOp"
                        ],
                        [
                            "x + input",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_geo, x_roi], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "x_roi",
                            "variable"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "self._conv_layer(input, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='init_conv_layer')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='first_6_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='second_3_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=128, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._classifyOnlyROIFeature(roi_feature)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='ResLayer_filter2_biases', initializer=tf.contrib.layers.xavier_initializer(), shape=[filter_shape2[3]])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_171": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='Pooling_layer')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean, var, offset=beta, scale=gamma, variance_epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape[3], is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights1, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias1)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta1', gamma_name='ResLayer_BN_gamma1', mov_avg_name='ResLayer_BN_mov_avg1', mov_var_name='ResLayer_BN_mov_var1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, filter=filter_weights2, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias2)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta2', gamma_name='ResLayer_BN_gamma2', mov_avg_name='ResLayer_BN_mov_avg2', mov_var_name='ResLayer_BN_mov_var2')",
                            "Call"
                        ],
                        [
                            "x + skip_out",
                            "BinOp"
                        ],
                        [
                            "x + input",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_geo, x_roi], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "x_roi",
                            "variable"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "self._conv_layer(input, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='init_conv_layer')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='first_6_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='second_3_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=128, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._classifyOnlyROIFeature(roi_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_188": {
                "variable": {
                    "value": "geometric_feature_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "geometric_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, flat_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_189": {
                "variable": {
                    "value": "fc_geo_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ValueLayer_fc1_geo_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[flat_size, fc1_geo_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_192": {
                "variable": {
                    "value": "fc_geo_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ValueLayer_fc1_geo_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[fc1_geo_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "roi_feature_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "roi_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._roi_pooling_layer(x, name_scope='roi_pooling', box=roi_box)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flat_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_198": {
                "variable": {
                    "value": "fc_roi_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ValueLayer_fc1_roi_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[flat_size, fc1_roi_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_201": {
                "variable": {
                    "value": "fc_roi_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ValueLayer_fc1_roi_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[fc1_roi_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_206": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_geo, x_roi]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_209": {
                "variable": {
                    "value": "fc_w2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ValueLayer_fc_w2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[fc1_geo_dim + fc1_roi_dim, fc2_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_212": {
                "variable": {
                    "value": "fc_b2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ValueLayer_fc_bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[fc2_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_214": {
                "variable": {
                    "value": "self.fc2_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='Pooling_layer')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean, var, offset=beta, scale=gamma, variance_epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape[3], is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights1, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias1)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta1', gamma_name='ResLayer_BN_gamma1', mov_avg_name='ResLayer_BN_mov_avg1', mov_var_name='ResLayer_BN_mov_var1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, filter=filter_weights2, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias2)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta2', gamma_name='ResLayer_BN_gamma2', mov_avg_name='ResLayer_BN_mov_avg2', mov_var_name='ResLayer_BN_mov_var2')",
                            "Call"
                        ],
                        [
                            "x + skip_out",
                            "BinOp"
                        ],
                        [
                            "x + input",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_geo, x_roi], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "x_roi",
                            "variable"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "self._conv_layer(input, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='init_conv_layer')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='first_6_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='second_3_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=128, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._classifyOnlyROIFeature(roi_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_228": {
                "variable": {
                    "value": "roi_feature_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "roi_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._roi_pooling_layer(x, name_scope='roi_pooling', box=roi_box)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flat_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_229": {
                "variable": {
                    "value": "fc_roi_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ValueLayer_fc1_roi_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[flat_size, fc1_roi_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_232": {
                "variable": {
                    "value": "fc_roi_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ValueLayer_fc1_roi_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[fc1_roi_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_240": {
                "variable": {
                    "value": "fc_w2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ValueLayer_fc_w2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[fc1_roi_dim, fc2_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_243": {
                "variable": {
                    "value": "fc_b2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ValueLayer_fc_bias2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[fc2_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_245": {
                "variable": {
                    "value": "self.fc2_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='Pooling_layer')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean, var, offset=beta, scale=gamma, variance_epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape[3], is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights1, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias1)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta1', gamma_name='ResLayer_BN_gamma1', mov_avg_name='ResLayer_BN_mov_avg1', mov_var_name='ResLayer_BN_mov_var1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, filter=filter_weights2, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias2)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta2', gamma_name='ResLayer_BN_gamma2', mov_avg_name='ResLayer_BN_mov_avg2', mov_var_name='ResLayer_BN_mov_var2')",
                            "Call"
                        ],
                        [
                            "x + skip_out",
                            "BinOp"
                        ],
                        [
                            "x + input",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_geo, x_roi], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "x_roi",
                            "variable"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "self._conv_layer(input, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='init_conv_layer')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='first_6_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='second_3_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=128, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._classifyOnlyROIFeature(roi_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_298": {
                "variable": {
                    "value": "corresponding_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "data_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_299": {
                "variable": {
                    "value": "cross_e",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "variable"
                        ]
                    ]
                },
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_300": {
                "variable": {
                    "value": "weighted_cross_e",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "corresponding_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(weights, data_ids)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cross_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=target_value, logits=pred, name='entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_301": {
                "variable": {
                    "value": "entropy_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weighted_cross_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(corresponding_weights, cross_e)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_303": {
                "variable": {
                    "value": "entropy_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=target_value, logits=pred, name='entropy')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_304": {
                "name": {
                    "value": "cross_entropy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "entropy_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(weighted_cross_e)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=target_value, logits=pred, name='entropy'))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_306": {
                "name": {
                    "value": "reg_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES), name='reg_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_318": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_collection_322": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_336": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(target, dimension=1, name='gt_classification')",
                            "Call"
                        ],
                        [
                            "tf.argmax(target, dimension=1, name='gt_classification')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_337": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_338": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(accuracy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_351": {
                "variable": {
                    "value": "tensorboard_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "tensorboard_dir",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Coordinator_353": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_354": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_436": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "gt_classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(target, dimension=1, name='gt_classification')",
                            "Call"
                        ],
                        [
                            "tf.argmax(target, dimension=1, name='gt_classification')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_437": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Coordinator_445": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_446": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_29": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_30": {
                "name": {
                    "value": "histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'residual_layer_0'",
                            "str"
                        ],
                        [
                            "'residual_layer_1'",
                            "str"
                        ],
                        [
                            "'residual_layer_2'",
                            "str"
                        ],
                        [
                            "'residual_layer_3'",
                            "str"
                        ],
                        [
                            "'residual_layer_4'",
                            "str"
                        ],
                        [
                            "'residual_layer_5'",
                            "str"
                        ],
                        [
                            "'residual_layer_6'",
                            "str"
                        ],
                        [
                            "'residual_layer_7'",
                            "str"
                        ],
                        [
                            "'residual_layer_8'",
                            "str"
                        ],
                        [
                            "'residual_layer_9'",
                            "str"
                        ],
                        [
                            "'residual_layer_10'",
                            "str"
                        ],
                        [
                            "'residual_layer_11'",
                            "str"
                        ]
                    ]
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'residual_layer_0'",
                            "str"
                        ],
                        [
                            "'residual_layer_1'",
                            "str"
                        ],
                        [
                            "'residual_layer_2'",
                            "str"
                        ],
                        [
                            "'residual_layer_3'",
                            "str"
                        ],
                        [
                            "'residual_layer_4'",
                            "str"
                        ],
                        [
                            "'residual_layer_5'",
                            "str"
                        ],
                        [
                            "'residual_layer_6'",
                            "str"
                        ],
                        [
                            "'residual_layer_7'",
                            "str"
                        ],
                        [
                            "'residual_layer_8'",
                            "str"
                        ],
                        [
                            "'residual_layer_9'",
                            "str"
                        ],
                        [
                            "'residual_layer_10'",
                            "str"
                        ],
                        [
                            "'residual_layer_11'",
                            "str"
                        ]
                    ]
                }
            },
            "control_dependencies_75": {
                "control_inputs": {
                    "value": "control_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[update_moving_avg, update_moving_var]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "init_conv_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'residual_layer_0'",
                            "str"
                        ],
                        [
                            "'residual_layer_1'",
                            "str"
                        ],
                        [
                            "'residual_layer_2'",
                            "str"
                        ],
                        [
                            "'residual_layer_3'",
                            "str"
                        ],
                        [
                            "'residual_layer_4'",
                            "str"
                        ],
                        [
                            "'residual_layer_5'",
                            "str"
                        ],
                        [
                            "'residual_layer_6'",
                            "str"
                        ],
                        [
                            "'residual_layer_7'",
                            "str"
                        ],
                        [
                            "'residual_layer_8'",
                            "str"
                        ],
                        [
                            "'residual_layer_9'",
                            "str"
                        ],
                        [
                            "'residual_layer_10'",
                            "str"
                        ],
                        [
                            "'residual_layer_11'",
                            "str"
                        ]
                    ]
                }
            },
            "get_variable_154": {
                "variable": {
                    "value": "filter_weights1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ResLayer_skip_filter",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3, 3, filter_in, filter_out]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_158": {
                "variable": {
                    "value": "bias1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ResLayer_skip_filter_biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_shape1[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_160": {
                "variable": {
                    "value": "skip_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, self.params['height'], self.params['width'], self.params['depth']])",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "filter_weights1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='ResLayer_filter1', shape=filter_shape1, initializer=tf.contrib.layers.xavier_initializer(), regularizer=tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay']))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='ResLayer_skip_filter', shape=filter_shape1, initializer=tf.contrib.layers.xavier_initializer(), regularizer=tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay']))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_161": {
                "variable": {
                    "value": "skip_out",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "skip_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, filter=filter_weights1, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(skip_out, bias1)",
                            "Call"
                        ],
                        [
                            "self._BN(input=skip_out, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_skip_BN_beta1', gamma_name='ResLayer_skip_BN_gamma1', mov_avg_name='ResLayer_skip_BN_mov_avg1', mov_var_name='ResLayer_skip_BN_mov_var1')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='ResLayer_filter1_biases', initializer=tf.contrib.layers.xavier_initializer(), shape=[filter_shape1[3]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='ResLayer_skip_filter_biases', initializer=tf.contrib.layers.xavier_initializer(), shape=[filter_shape1[3]])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_185": {
                "name_or_scope": {
                    "value": "value_head",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "value_head",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_305": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_315": {
                "name": {
                    "value": "training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_320": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "losses['value_loss'] + losses['reg_loss']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_335": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_338": {
                "input_tensor": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.cast(correct_prediction, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.cast(correct_prediction, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_419": {
                "variable": {
                    "value": "sess_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_435": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_441": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_56": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_58": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_60": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_62": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_193": {
                "a": {
                    "value": "geometric_feature_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(geometric_feature, [-1, flat_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fc_geo_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='ValueLayer_fc1_geo_w', shape=[flat_size, fc1_geo_dim], initializer=tf.contrib.layers.xavier_initializer(), regularizer=tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay']))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_203": {
                "a": {
                    "value": "roi_feature_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(roi_feature, [-1, flat_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(roi_feature, [-1, flat_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fc_roi_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='ValueLayer_fc1_roi_w', shape=[flat_size, fc1_roi_dim], initializer=tf.contrib.layers.xavier_initializer(), regularizer=tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay']))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='ValueLayer_fc1_roi_w', shape=[flat_size, fc1_roi_dim], initializer=tf.contrib.layers.xavier_initializer(), regularizer=tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay']))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_213": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='Pooling_layer')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean, var, offset=beta, scale=gamma, variance_epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape[3], is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights1, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias1)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta1', gamma_name='ResLayer_BN_gamma1', mov_avg_name='ResLayer_BN_mov_avg1', mov_var_name='ResLayer_BN_mov_var1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, filter=filter_weights2, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias2)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta2', gamma_name='ResLayer_BN_gamma2', mov_avg_name='ResLayer_BN_mov_avg2', mov_var_name='ResLayer_BN_mov_var2')",
                            "Call"
                        ],
                        [
                            "x + skip_out",
                            "BinOp"
                        ],
                        [
                            "x + input",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_geo, x_roi], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "x_roi",
                            "variable"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "self._conv_layer(input, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='init_conv_layer')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='first_6_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='second_3_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=128, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._classifyOnlyROIFeature(roi_feature)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fc_w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='ValueLayer_fc_w2', shape=[fc1_geo_dim + fc1_roi_dim, fc2_dim], initializer=tf.contrib.layers.xavier_initializer(), regularizer=tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay']))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='ValueLayer_fc_w2', shape=[fc1_roi_dim, fc2_dim], initializer=tf.contrib.layers.xavier_initializer(), regularizer=tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay']))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_234": {
                "a": {
                    "value": "roi_feature_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(roi_feature, [-1, flat_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(roi_feature, [-1, flat_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fc_roi_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='ValueLayer_fc1_roi_w', shape=[flat_size, fc1_roi_dim], initializer=tf.contrib.layers.xavier_initializer(), regularizer=tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay']))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='ValueLayer_fc1_roi_w', shape=[flat_size, fc1_roi_dim], initializer=tf.contrib.layers.xavier_initializer(), regularizer=tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay']))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_244": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(input, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name='Pooling_layer')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean, var, offset=beta, scale=gamma, variance_epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape[3], is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, filter=filter_weights1, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias1)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta1', gamma_name='ResLayer_BN_gamma1', mov_avg_name='ResLayer_BN_mov_avg1', mov_var_name='ResLayer_BN_mov_var1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, filter=filter_weights2, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, bias2)",
                            "Call"
                        ],
                        [
                            "self._BN(input=x, filter_num=filter_shape1[3], is_training=is_training, beta_name='ResLayer_BN_beta2', gamma_name='ResLayer_BN_gamma2', mov_avg_name='ResLayer_BN_mov_avg2', mov_var_name='ResLayer_BN_mov_var2')",
                            "Call"
                        ],
                        [
                            "x + skip_out",
                            "BinOp"
                        ],
                        [
                            "x + input",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_geo, x_roi], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "x_roi",
                            "variable"
                        ],
                        [
                            "tf.matmul(x, fc_w2) + fc_b2",
                            "BinOp"
                        ],
                        [
                            "self._conv_layer(input, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='init_conv_layer')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=8, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=8, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=16, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=16, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='first_6_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=32, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=32, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._pooling_layer(x, name_scope='second_3_residual')",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=64, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._residual_layer(x, filter_in=64, filter_out=128, name_scope=name_scope, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "self._classifyOnlyROIFeature(roi_feature)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fc_w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='ValueLayer_fc_w2', shape=[fc1_geo_dim + fc1_roi_dim, fc2_dim], initializer=tf.contrib.layers.xavier_initializer(), regularizer=tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay']))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='ValueLayer_fc_w2', shape=[fc1_roi_dim, fc2_dim], initializer=tf.contrib.layers.xavier_initializer(), regularizer=tf.contrib.layers.l2_regularizer(scale=self.params['weight_decay']))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_303": {
                "labels": {
                    "value": "target_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "variable"
                        ]
                    ]
                },
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_323": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_337": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.pred, gt_classification)",
                            "Call"
                        ],
                        [
                            "tf.equal(self.pred, gt_classification)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_437": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.pred, gt_classification)",
                            "Call"
                        ],
                        [
                            "tf.equal(self.pred, gt_classification)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_443": {
                "checkpoint_dir": {
                    "value": "checkpoint_dir + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_416": {
                "checkpoint_dir": {
                    "value": "checkpoint_dir + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_419": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_419": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_42": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, self.params['height'], self.params['width'], self.params['depth']])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_step_362": {
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step_tensor": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "JigsawCNN/TFRecordIOWithROI.py": {
        "tensorflow": {
            "TFRecordWriter_26": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "tfrecords_filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TFRecordReader_75": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_77": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'height': tf.FixedLenFeature([], tf.int64), 'width': tf.FixedLenFeature([], tf.int64), 'id': tf.FixedLenFeature([], tf.int64), 'training_input': tf.FixedLenFeature([], tf.string), 'training_target': tf.VarLenFeature(tf.float32), 'training_roi': tf.VarLenFeature(tf.float32)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_87": {
                "variable": {
                    "value": "training_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['training_input']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_88": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_89": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_90": {
                "variable": {
                    "value": "data_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_95": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Parameters.NNHyperparameters['height'], Parameters.NNHyperparameters['width'], Parameters.NNHyperparameters['depth']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "training_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "training_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "variable"
                        ],
                        [
                            "training_input.tostring()",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['training_input'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(training_input, input_shape)",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['training_input'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(training_input, input_shape)",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['training_input'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(training_input, input_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([Parameters.NNHyperparameters['height'], Parameters.NNHyperparameters['width'], Parameters.NNHyperparameters['depth']])",
                            "Call"
                        ],
                        [
                            "tf.stack([Parameters.NNHyperparameters['height'], Parameters.NNHyperparameters['width'], Parameters.NNHyperparameters['depth']])",
                            "Call"
                        ],
                        [
                            "tf.stack([Parameters.NNHyperparameters['height'], Parameters.NNHyperparameters['width'], Parameters.NNHyperparameters['depth']])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "training_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "training_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_vec",
                            "variable"
                        ],
                        [
                            "features['training_target'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_target, [2])",
                            "Call"
                        ],
                        [
                            "features['training_target'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_target, [2])",
                            "Call"
                        ],
                        [
                            "features['training_target'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_target, [2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "training_roi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "training_roi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roi_vec",
                            "variable"
                        ],
                        [
                            "features['training_roi'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_roi, [4])",
                            "Call"
                        ],
                        [
                            "features['training_roi'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_roi, [4])",
                            "Call"
                        ],
                        [
                            "features['training_roi'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_roi, [4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "data_id",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "data_id + 1",
                            "BinOp"
                        ],
                        [
                            "tf.cast(features['id'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data_id, [1])",
                            "Call"
                        ],
                        [
                            "tf.cast(features['id'], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shuffle_batch_102": {
                "variable": {
                    "value": "(inputs, targets, roi_boxes, data_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[training_input, training_target, training_roi, data_id]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Parameters.NNHyperparameters['batch_size']",
                            "Subscript"
                        ],
                        [
                            "Parameters.NNHyperparameters['batch_size']",
                            "Subscript"
                        ],
                        [
                            "Parameters.NNHyperparameters['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "capacity": {
                    "value": "60000",
                    "type": "int",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "allow_smaller_final_batch": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_109": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(inputs, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_110": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(targets, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(targets, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(targets, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_111": {
                "variable": {
                    "value": "roi_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "roi_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(roi_boxes, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(roi_boxes, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(roi_boxes, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_112": {
                "variable": {
                    "value": "data_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(data_ids, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(data_ids, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordReader_118": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_120": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'height': tf.FixedLenFeature([], tf.int64), 'width': tf.FixedLenFeature([], tf.int64), 'id': tf.FixedLenFeature([], tf.int64), 'training_input': tf.FixedLenFeature([], tf.string), 'training_target': tf.VarLenFeature(tf.float32), 'training_roi': tf.VarLenFeature(tf.float32)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_130": {
                "variable": {
                    "value": "training_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['training_input']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_131": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_132": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_133": {
                "variable": {
                    "value": "data_id",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['id']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_138": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Parameters.NNHyperparameters['height'], Parameters.NNHyperparameters['width'], Parameters.NNHyperparameters['depth']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "training_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "training_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "variable"
                        ],
                        [
                            "training_input.tostring()",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['training_input'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(training_input, input_shape)",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['training_input'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(training_input, input_shape)",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['training_input'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(training_input, input_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([Parameters.NNHyperparameters['height'], Parameters.NNHyperparameters['width'], Parameters.NNHyperparameters['depth']])",
                            "Call"
                        ],
                        [
                            "tf.stack([Parameters.NNHyperparameters['height'], Parameters.NNHyperparameters['width'], Parameters.NNHyperparameters['depth']])",
                            "Call"
                        ],
                        [
                            "tf.stack([Parameters.NNHyperparameters['height'], Parameters.NNHyperparameters['width'], Parameters.NNHyperparameters['depth']])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "training_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "training_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_vec",
                            "variable"
                        ],
                        [
                            "features['training_target'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_target, [2])",
                            "Call"
                        ],
                        [
                            "features['training_target'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_target, [2])",
                            "Call"
                        ],
                        [
                            "features['training_target'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_target, [2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "training_roi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "training_roi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roi_vec",
                            "variable"
                        ],
                        [
                            "features['training_roi'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_roi, [4])",
                            "Call"
                        ],
                        [
                            "features['training_roi'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_roi, [4])",
                            "Call"
                        ],
                        [
                            "features['training_roi'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_roi, [4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_144": {
                "variable": {
                    "value": "(inputs, targets, roi_boxes, data_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[training_input, training_target, training_roi, data_id]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Parameters.NNHyperparameters['batch_size']",
                            "Subscript"
                        ],
                        [
                            "Parameters.NNHyperparameters['batch_size']",
                            "Subscript"
                        ],
                        [
                            "Parameters.NNHyperparameters['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "capacity": {
                    "value": "batch_size * 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "batch_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_149": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(inputs, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_150": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(targets, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(targets, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(targets, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_151": {
                "variable": {
                    "value": "roi_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "roi_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(roi_boxes, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(roi_boxes, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(roi_boxes, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_152": {
                "variable": {
                    "value": "data_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "data_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(data_ids, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(data_ids, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordReader_158": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_160": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'height': tf.FixedLenFeature([], tf.int64), 'width': tf.FixedLenFeature([], tf.int64), 'training_input': tf.FixedLenFeature([], tf.string), 'training_target': tf.VarLenFeature(tf.float32), 'training_roi': tf.VarLenFeature(tf.float32)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_169": {
                "variable": {
                    "value": "training_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['training_input']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_170": {
                "variable": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_171": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_176": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Parameters.NNHyperparameters['height'], Parameters.NNHyperparameters['width'], Parameters.NNHyperparameters['depth']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "training_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "training_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "variable"
                        ],
                        [
                            "training_input.tostring()",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['training_input'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(training_input, input_shape)",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['training_input'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(training_input, input_shape)",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['training_input'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(training_input, input_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([Parameters.NNHyperparameters['height'], Parameters.NNHyperparameters['width'], Parameters.NNHyperparameters['depth']])",
                            "Call"
                        ],
                        [
                            "tf.stack([Parameters.NNHyperparameters['height'], Parameters.NNHyperparameters['width'], Parameters.NNHyperparameters['depth']])",
                            "Call"
                        ],
                        [
                            "tf.stack([Parameters.NNHyperparameters['height'], Parameters.NNHyperparameters['width'], Parameters.NNHyperparameters['depth']])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "training_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "training_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_vec",
                            "variable"
                        ],
                        [
                            "features['training_target'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_target, [2])",
                            "Call"
                        ],
                        [
                            "features['training_target'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_target, [2])",
                            "Call"
                        ],
                        [
                            "features['training_target'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_target, [2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "variable": {
                    "value": "training_roi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "training_roi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roi_vec",
                            "variable"
                        ],
                        [
                            "features['training_roi'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_roi, [4])",
                            "Call"
                        ],
                        [
                            "features['training_roi'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_roi, [4])",
                            "Call"
                        ],
                        [
                            "features['training_roi'].values",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(training_roi, [4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_182": {
                "variable": {
                    "value": "(inputs, targets, roi_boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[training_input, training_target, training_roi]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Parameters.NNHyperparameters['batch_size']",
                            "Subscript"
                        ],
                        [
                            "Parameters.NNHyperparameters['batch_size']",
                            "Subscript"
                        ],
                        [
                            "Parameters.NNHyperparameters['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "capacity": {
                    "value": "batch_size * 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "batch_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_187": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(inputs, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_188": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(targets, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(targets, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(targets, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_189": {
                "variable": {
                    "value": "roi_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "roi_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(roi_boxes, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(roi_boxes, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(roi_boxes, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_60": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'height': _int64_feature(height), 'width': _int64_feature(width), 'id': _int64_feature(data_id), 'training_input': _bytes_feature(training_input), 'training_target': _float_feature(training_target), 'training_roi': _float_feature(training_roi)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_20": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_22": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_24": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BytesList_20": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_22": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_24": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Features_60": {
                "feature": {
                    "value": "{'height': _int64_feature(height), 'width': _int64_feature(width), 'id': _int64_feature(data_id), 'training_input': _bytes_feature(training_input), 'training_target': _float_feature(training_target), 'training_roi': _float_feature(training_roi)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FixedLenFeature_79": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_80": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_81": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_82": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_83": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_84": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_122": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_123": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_124": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_125": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_126": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_127": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_162": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_163": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_164": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_165": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_166": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}