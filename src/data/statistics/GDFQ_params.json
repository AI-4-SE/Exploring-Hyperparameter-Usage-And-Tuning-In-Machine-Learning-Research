{
    "models/conditional_batchnorm.py": {
        "torch": {
            "batch_norm_31": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "exponential_average_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "1.0 / self.num_batches_tracked.item()",
                            "BinOp"
                        ],
                        [
                            "self.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_52": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_53": {
                "variable": {
                    "value": "self.biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/generator.py": {
        "torch": {
            "Embedding_35": {
                "variable": {
                    "value": "self.label_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channel, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.conv_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm1d(128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_54": {
                "variable": {
                    "value": "gen_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.label_emb(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_78": {
                "variable": {
                    "value": "self.label_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channel, 128 * self.init_size ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.conv_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_98": {
                "variable": {
                    "value": "gen_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.label_emb(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "16 * num_features * self.init_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_137": {
                "variable": {
                    "value": "self.b7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_138": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_149": {
                "input": {
                    "value": "self.conv7(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_40": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_43": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_46": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128 * self.init_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_83": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_86": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_87": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_90": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/resblock.py": {
        "torch": {
            "interpolate_14": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h * 2, w * 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h_ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "h_ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "h_ch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "toy.py": {
        "torch": {
            "Sequential_68": {
                "variable": {
                    "value": "FP_Model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_86": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_87": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "FP_Model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_88": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(FP_Model.parameters(), lr=0.001, weight_decay=0.0001, momentum=0.9)",
                            "Call"
                        ],
                        [
                            "optim.Adam([input_data], lr=0.005)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(toy_g.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "test_epoch // 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorDataset_90": {
                "variable": {
                    "value": "toy_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "FloatTensor(GTdata)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "toy_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "toy_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(FloatTensor(GTdata), FloatTensor(label))",
                            "Call"
                        ],
                        [
                            "data.TensorDataset(FloatTensor(zeroQ_gaussian_input_data), LongTensor(test_gaussian_label))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_132": {
                "variable": {
                    "value": "toy_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "FloatTensor(zeroQ_gaussian_input_data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "toy_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "toy_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(FloatTensor(GTdata), FloatTensor(label))",
                            "Call"
                        ],
                        [
                            "data.TensorDataset(FloatTensor(zeroQ_gaussian_input_data), LongTensor(test_gaussian_label))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_243": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_251": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "toy_g.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_253": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(FP_Model.parameters(), lr=0.001, weight_decay=0.0001, momentum=0.9)",
                            "Call"
                        ],
                        [
                            "optim.Adam([input_data], lr=0.005)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(toy_g.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_279": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_169": {
                "variable": {
                    "value": "crit",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_172": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_data]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_173": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(FP_Model.parameters(), lr=0.001, weight_decay=0.0001, momentum=0.9)",
                            "Call"
                        ],
                        [
                            "optim.Adam([input_data], lr=0.005)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(toy_g.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                },
                "min_lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "patience": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_70": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_73": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_76": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_205": {
                "variable": {
                    "value": "tmp_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_data.cuda()",
                            "Call"
                        ],
                        [
                            "input_data.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(FloatTensor(train_gaussian_noise)).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_206": {
                "variable": {
                    "value": "tmp_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.var(input_data, dim=-1) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_313": {
                "variable": {
                    "value": "tmp_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_data.cuda()",
                            "Call"
                        ],
                        [
                            "input_data.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(FloatTensor(train_gaussian_noise)).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_314": {
                "variable": {
                    "value": "tmp_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.var(input_data, dim=-1) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_199": {
                "variable": {
                    "value": "tmp_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hook.outputs",
                            "Attribute"
                        ],
                        [
                            "hook.outputs",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_200": {
                "variable": {
                    "value": "tmp_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.var(tmp_output, dim=0) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_307": {
                "variable": {
                    "value": "tmp_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hook.outputs",
                            "Attribute"
                        ],
                        [
                            "hook.outputs",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_308": {
                "variable": {
                    "value": "tmp_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.var(tmp_output, dim=0) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_157": {
                "input": {
                    "value": "m.running_var + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clone_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "var_206": {
                "input": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_data.cuda()",
                            "Call"
                        ],
                        [
                            "input_data.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(FloatTensor(train_gaussian_noise)).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_272": {
                "input": {
                    "value": "m.running_var + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clone_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "var_314": {
                "input": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_data.cuda()",
                            "Call"
                        ],
                        [
                            "input_data.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(FloatTensor(train_gaussian_noise)).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "var_200": {
                "input": {
                    "value": "tmp_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hook.outputs",
                            "Attribute"
                        ],
                        [
                            "hook.outputs",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "var_308": {
                "input": {
                    "value": "tmp_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hook.outputs",
                            "Attribute"
                        ],
                        [
                            "hook.outputs",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_script/get_zeroQ_data.py": {
        "torch": {
            "DataLoader_65": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "UniformDataset(length=10000, size=size, transform=None)",
                            "Call"
                        ],
                        [
                            "'cifar10'",
                            "MethodArgument"
                        ],
                        [
                            "'imagenet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(path + 'val', transforms.Compose([transforms.Resize(int(input_size / 0.875)), transforms.CenterCrop(input_size), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_109": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(path + 'val', transforms.Compose([transforms.Resize(int(input_size / 0.875)), transforms.CenterCrop(input_size), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_41": {
                "high": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_script/train_GDFQ.py": {
        "torch": {
            "DataParallel_57": {
                "variable": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ResNetGenerator(num_classes=num_class, dim_z=100, img_size=img_size)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_58": {
                "variable": {
                    "value": "q_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "q_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "freeze_bn(q_model)",
                            "Call"
                        ],
                        [
                            "un_freeze_act(q_model)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(q_model).cuda()",
                            "Call"
                        ],
                        [
                            "freeze_act(q_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "g_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SGD_61": {
                "variable": {
                    "value": "q_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "q_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "q_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_89": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "input_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_100": {
                "variable": {
                    "value": "input_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_142": {
                "variable": {
                    "value": "tmp_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_data.view(fake_data.size(0), 3, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_143": {
                "variable": {
                    "value": "tmp_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.var(fake_data.view(fake_data.size(0), 3, -1), dim=2) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "q_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "q_model.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_199": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "generator.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_125": {
                "variable": {
                    "value": "tmp_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_output.view(tmp_output.size(0), tmp_output.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_130": {
                "variable": {
                    "value": "tmp_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.var(tmp_output.view(tmp_output.size(0), tmp_output.size(1), -1), dim=2) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_169": {
                "variable": {
                    "value": "q_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_model(detach_fake_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_172": {
                "variable": {
                    "value": "kd_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(q_model(detach_fake_data), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "fp_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(fp_model(detach_fake_data), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_171": {
                "variable": {
                    "value": "fp_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fp_model(detach_fake_data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_83": {
                "input": {
                    "value": "m.running_var + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clone_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "var_143": {
                "input": {
                    "value": "fake_data.view(fake_data.size(0), 3, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "var_131": {
                "input": {
                    "value": "tmp_output.view(tmp_output.size(0), tmp_output.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_script/train_zeroQ.py": {
        "torch": {
            "CrossEntropyLoss_93": {
                "variable": {
                    "value": "crit",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[gaussian_data]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_95": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam([gaussian_data], lr=0.5)",
                            "Call"
                        ]
                    ]
                },
                "min_lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "patience": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "input_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_101": {
                "variable": {
                    "value": "input_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_125": {
                "variable": {
                    "value": "tmp_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gaussian_data.view(gaussian_data.size(0), 3, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_128": {
                "variable": {
                    "value": "tmp_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.var(gaussian_data.view(gaussian_data.size(0), 3, -1), dim=2) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_116": {
                "variable": {
                    "value": "tmp_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_output.view(tmp_output.size(0), tmp_output.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_119": {
                "variable": {
                    "value": "tmp_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.var(tmp_output.view(tmp_output.size(0), tmp_output.size(1), -1), dim=2) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_80": {
                "input": {
                    "value": "m.running_var + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clone_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "var_129": {
                "input": {
                    "value": "gaussian_data.view(gaussian_data.size(0), 3, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "var_120": {
                "input": {
                    "value": "tmp_output.view(tmp_output.size(0), tmp_output.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/quantize_model.py": {
        "torch": {
            "Sequential_24": {
                "*args": {
                    "value": "*[model, SYQActivation(a_bit)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "utils/syquan.py": {
        "torch": {
            "clamp_53": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "delta * x - b",
                            "BinOp"
                        ],
                        [
                            "RoundWithGradient.apply(x)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, -limit, limit - 1)",
                            "Call"
                        ],
                        [
                            "(x + b) / delta",
                            "BinOp"
                        ],
                        [
                            "SyQuan(x, self.a_bit, self.x_min, self.x_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-limit",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "limit - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "origin_conv.weight.data.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "origin_linear.weight.data.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_26": {
                "input": {
                    "value": "x_max - x_min",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "origin_conv.bias.data.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_131": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "delta * x - b",
                            "BinOp"
                        ],
                        [
                            "RoundWithGradient.apply(x)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, -limit, limit - 1)",
                            "Call"
                        ],
                        [
                            "(x + b) / delta",
                            "BinOp"
                        ],
                        [
                            "SyQuan(x, self.a_bit, self.x_min, self.x_max)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "SyQuan(self.weight, self.w_bit, w_min, w_max)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "SyQuan(self.weight, self.w_bit, w_min, w_max)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_160": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "origin_linear.bias.data.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_199": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "delta * x - b",
                            "BinOp"
                        ],
                        [
                            "RoundWithGradient.apply(x)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, -limit, limit - 1)",
                            "Call"
                        ],
                        [
                            "(x + b) / delta",
                            "BinOp"
                        ],
                        [
                            "SyQuan(x, self.a_bit, self.x_min, self.x_max)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "SyQuan(self.weight, self.w_bit, w_min, w_max)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "SyQuan(self.weight, self.w_bit, w_min, w_max)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_212": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/val.py": {
        "torch": {
            "CrossEntropyLoss_29": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}